
traffic-light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003438  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003544  08003544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035b4  080035b4  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  080035b4  080035b4  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035b4  080035b4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b4  080035b4  000135b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080035bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000098  08003654  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08003654  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106ac  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024fe  00000000  00000000  0003076d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00032c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  00033920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c86  00000000  00000000  000344c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f695  00000000  00000000  0004d146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b083  00000000  00000000  0005c7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e785e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f8  00000000  00000000  000e78b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	0800352c 	.word	0x0800352c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	0800352c 	.word	0x0800352c

0800014c <displayUART>:


#include "stdio.h"
#include "main.h"

void displayUART(int counter, UART_HandleTypeDef huart2) {
 800014c:	b084      	sub	sp, #16
 800014e:	b580      	push	{r7, lr}
 8000150:	b084      	sub	sp, #16
 8000152:	af00      	add	r7, sp, #0
 8000154:	6078      	str	r0, [r7, #4]
 8000156:	f107 001c 	add.w	r0, r7, #28
 800015a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int t = counter / 10;
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	4a14      	ldr	r2, [pc, #80]	; (80001b4 <displayUART+0x68>)
 8000162:	fb82 1203 	smull	r1, r2, r2, r3
 8000166:	1092      	asrs	r2, r2, #2
 8000168:	17db      	asrs	r3, r3, #31
 800016a:	1ad3      	subs	r3, r2, r3
 800016c:	60fb      	str	r3, [r7, #12]
	int u = counter % 10;
 800016e:	687a      	ldr	r2, [r7, #4]
 8000170:	4b10      	ldr	r3, [pc, #64]	; (80001b4 <displayUART+0x68>)
 8000172:	fb83 1302 	smull	r1, r3, r3, r2
 8000176:	1099      	asrs	r1, r3, #2
 8000178:	17d3      	asrs	r3, r2, #31
 800017a:	1ac9      	subs	r1, r1, r3
 800017c:	460b      	mov	r3, r1
 800017e:	009b      	lsls	r3, r3, #2
 8000180:	440b      	add	r3, r1
 8000182:	005b      	lsls	r3, r3, #1
 8000184:	1ad3      	subs	r3, r2, r3
 8000186:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!7SEG1=%u%u#\r\n", t, u), 1000);
 8000188:	68bb      	ldr	r3, [r7, #8]
 800018a:	68fa      	ldr	r2, [r7, #12]
 800018c:	490a      	ldr	r1, [pc, #40]	; (80001b8 <displayUART+0x6c>)
 800018e:	480b      	ldr	r0, [pc, #44]	; (80001bc <displayUART+0x70>)
 8000190:	f002 fd92 	bl	8002cb8 <siprintf>
 8000194:	4603      	mov	r3, r0
 8000196:	b29a      	uxth	r2, r3
 8000198:	f107 001c 	add.w	r0, r7, #28
 800019c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001a0:	4906      	ldr	r1, [pc, #24]	; (80001bc <displayUART+0x70>)
 80001a2:	f002 fbd7 	bl	8002954 <HAL_UART_Transmit>
}
 80001a6:	bf00      	nop
 80001a8:	3710      	adds	r7, #16
 80001aa:	46bd      	mov	sp, r7
 80001ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001b0:	b004      	add	sp, #16
 80001b2:	4770      	bx	lr
 80001b4:	66666667 	.word	0x66666667
 80001b8:	08003544 	.word	0x08003544
 80001bc:	2000017c 	.word	0x2000017c

080001c0 <traffic_light>:
#include "main.h"

void toggle_red() {
	
}
void traffic_light(int color) {
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	switch (color) {
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d018      	beq.n	8000200 <traffic_light+0x40>
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	f2c0 8083 	blt.w	80002dc <traffic_light+0x11c>
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2b36      	cmp	r3, #54	; 0x36
 80001da:	dc7f      	bgt.n	80002dc <traffic_light+0x11c>
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2b33      	cmp	r3, #51	; 0x33
 80001e0:	db7c      	blt.n	80002dc <traffic_light+0x11c>
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	3b33      	subs	r3, #51	; 0x33
 80001e6:	2b03      	cmp	r3, #3
 80001e8:	d878      	bhi.n	80002dc <traffic_light+0x11c>
 80001ea:	a201      	add	r2, pc, #4	; (adr r2, 80001f0 <traffic_light+0x30>)
 80001ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f0:	08000285 	.word	0x08000285
 80001f4:	080002b1 	.word	0x080002b1
 80001f8:	0800022d 	.word	0x0800022d
 80001fc:	08000259 	.word	0x08000259
		case INIT:
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 8000200:	2200      	movs	r2, #0
 8000202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000206:	4838      	ldr	r0, [pc, #224]	; (80002e8 <traffic_light+0x128>)
 8000208:	f001 fb17 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	2108      	movs	r1, #8
 8000210:	4836      	ldr	r0, [pc, #216]	; (80002ec <traffic_light+0x12c>)
 8000212:	f001 fb12 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	2120      	movs	r1, #32
 800021a:	4834      	ldr	r0, [pc, #208]	; (80002ec <traffic_light+0x12c>)
 800021c:	f001 fb0d 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	2110      	movs	r1, #16
 8000224:	4831      	ldr	r0, [pc, #196]	; (80002ec <traffic_light+0x12c>)
 8000226:	f001 fb08 	bl	800183a <HAL_GPIO_WritePin>
			break;
 800022a:	e058      	b.n	80002de <traffic_light+0x11e>
		case GREEN2:
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, SET);
 800022c:	2201      	movs	r2, #1
 800022e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000232:	482d      	ldr	r0, [pc, #180]	; (80002e8 <traffic_light+0x128>)
 8000234:	f001 fb01 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	2108      	movs	r1, #8
 800023c:	482b      	ldr	r0, [pc, #172]	; (80002ec <traffic_light+0x12c>)
 800023e:	f001 fafc 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	2120      	movs	r1, #32
 8000246:	4829      	ldr	r0, [pc, #164]	; (80002ec <traffic_light+0x12c>)
 8000248:	f001 faf7 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, SET);
 800024c:	2201      	movs	r2, #1
 800024e:	2110      	movs	r1, #16
 8000250:	4826      	ldr	r0, [pc, #152]	; (80002ec <traffic_light+0x12c>)
 8000252:	f001 faf2 	bl	800183a <HAL_GPIO_WritePin>
			break;
 8000256:	e042      	b.n	80002de <traffic_light+0x11e>
		case AMBER2:
            HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, SET);
 8000258:	2201      	movs	r2, #1
 800025a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025e:	4822      	ldr	r0, [pc, #136]	; (80002e8 <traffic_light+0x128>)
 8000260:	f001 faeb 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2108      	movs	r1, #8
 8000268:	4820      	ldr	r0, [pc, #128]	; (80002ec <traffic_light+0x12c>)
 800026a:	f001 fae6 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, SET);
 800026e:	2201      	movs	r2, #1
 8000270:	2120      	movs	r1, #32
 8000272:	481e      	ldr	r0, [pc, #120]	; (80002ec <traffic_light+0x12c>)
 8000274:	f001 fae1 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, SET);
 8000278:	2201      	movs	r2, #1
 800027a:	2110      	movs	r1, #16
 800027c:	481b      	ldr	r0, [pc, #108]	; (80002ec <traffic_light+0x12c>)
 800027e:	f001 fadc 	bl	800183a <HAL_GPIO_WritePin>
			break;
 8000282:	e02c      	b.n	80002de <traffic_light+0x11e>
		case GREEN1:
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800028a:	4817      	ldr	r0, [pc, #92]	; (80002e8 <traffic_light+0x128>)
 800028c:	f001 fad5 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, SET);
 8000290:	2201      	movs	r2, #1
 8000292:	2108      	movs	r1, #8
 8000294:	4815      	ldr	r0, [pc, #84]	; (80002ec <traffic_light+0x12c>)
 8000296:	f001 fad0 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2120      	movs	r1, #32
 800029e:	4813      	ldr	r0, [pc, #76]	; (80002ec <traffic_light+0x12c>)
 80002a0:	f001 facb 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2110      	movs	r1, #16
 80002a8:	4810      	ldr	r0, [pc, #64]	; (80002ec <traffic_light+0x12c>)
 80002aa:	f001 fac6 	bl	800183a <HAL_GPIO_WritePin>
			break;
 80002ae:	e016      	b.n	80002de <traffic_light+0x11e>
        case AMBER1:
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, SET);
 80002b0:	2201      	movs	r2, #1
 80002b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b6:	480c      	ldr	r0, [pc, #48]	; (80002e8 <traffic_light+0x128>)
 80002b8:	f001 fabf 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	2108      	movs	r1, #8
 80002c0:	480a      	ldr	r0, [pc, #40]	; (80002ec <traffic_light+0x12c>)
 80002c2:	f001 faba 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2120      	movs	r1, #32
 80002ca:	4808      	ldr	r0, [pc, #32]	; (80002ec <traffic_light+0x12c>)
 80002cc:	f001 fab5 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2110      	movs	r1, #16
 80002d4:	4805      	ldr	r0, [pc, #20]	; (80002ec <traffic_light+0x12c>)
 80002d6:	f001 fab0 	bl	800183a <HAL_GPIO_WritePin>
			break;
 80002da:	e000      	b.n	80002de <traffic_light+0x11e>
		default:
			break;
 80002dc:	bf00      	nop
	}
}
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40010800 	.word	0x40010800
 80002ec:	40010c00 	.word	0x40010c00

080002f0 <set_blinky>:

int toggle = 0;
void set_blinky(int color) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	switch (color) {
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2b21      	cmp	r3, #33	; 0x21
 80002fc:	d055      	beq.n	80003aa <set_blinky+0xba>
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2b21      	cmp	r3, #33	; 0x21
 8000302:	dc66      	bgt.n	80003d2 <set_blinky+0xe2>
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d003      	beq.n	8000312 <set_blinky+0x22>
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2b1f      	cmp	r3, #31
 800030e:	d016      	beq.n	800033e <set_blinky+0x4e>
            HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
            HAL_GPIO_TogglePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin);
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
			break;
		default:
			break;
 8000310:	e05f      	b.n	80003d2 <set_blinky+0xe2>
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000318:	4830      	ldr	r0, [pc, #192]	; (80003dc <set_blinky+0xec>)
 800031a:	f001 fa8e 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	2108      	movs	r1, #8
 8000322:	482f      	ldr	r0, [pc, #188]	; (80003e0 <set_blinky+0xf0>)
 8000324:	f001 fa89 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2120      	movs	r1, #32
 800032c:	482c      	ldr	r0, [pc, #176]	; (80003e0 <set_blinky+0xf0>)
 800032e:	f001 fa84 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2110      	movs	r1, #16
 8000336:	482a      	ldr	r0, [pc, #168]	; (80003e0 <set_blinky+0xf0>)
 8000338:	f001 fa7f 	bl	800183a <HAL_GPIO_WritePin>
            break;
 800033c:	e04a      	b.n	80003d4 <set_blinky+0xe4>
			if (toggle == 0) {
 800033e:	4b29      	ldr	r3, [pc, #164]	; (80003e4 <set_blinky+0xf4>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d118      	bne.n	8000378 <set_blinky+0x88>
                HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, SET);
 8000346:	2201      	movs	r2, #1
 8000348:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800034c:	4823      	ldr	r0, [pc, #140]	; (80003dc <set_blinky+0xec>)
 800034e:	f001 fa74 	bl	800183a <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, SET);
 8000352:	2201      	movs	r2, #1
 8000354:	2108      	movs	r1, #8
 8000356:	4822      	ldr	r0, [pc, #136]	; (80003e0 <set_blinky+0xf0>)
 8000358:	f001 fa6f 	bl	800183a <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, SET);
 800035c:	2201      	movs	r2, #1
 800035e:	2120      	movs	r1, #32
 8000360:	481f      	ldr	r0, [pc, #124]	; (80003e0 <set_blinky+0xf0>)
 8000362:	f001 fa6a 	bl	800183a <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, SET);
 8000366:	2201      	movs	r2, #1
 8000368:	2110      	movs	r1, #16
 800036a:	481d      	ldr	r0, [pc, #116]	; (80003e0 <set_blinky+0xf0>)
 800036c:	f001 fa65 	bl	800183a <HAL_GPIO_WritePin>
                toggle = 1;
 8000370:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <set_blinky+0xf4>)
 8000372:	2201      	movs	r2, #1
 8000374:	601a      	str	r2, [r3, #0]
			break;
 8000376:	e02d      	b.n	80003d4 <set_blinky+0xe4>
                HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800037e:	4817      	ldr	r0, [pc, #92]	; (80003dc <set_blinky+0xec>)
 8000380:	f001 fa5b 	bl	800183a <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2108      	movs	r1, #8
 8000388:	4815      	ldr	r0, [pc, #84]	; (80003e0 <set_blinky+0xf0>)
 800038a:	f001 fa56 	bl	800183a <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2120      	movs	r1, #32
 8000392:	4813      	ldr	r0, [pc, #76]	; (80003e0 <set_blinky+0xf0>)
 8000394:	f001 fa51 	bl	800183a <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2110      	movs	r1, #16
 800039c:	4810      	ldr	r0, [pc, #64]	; (80003e0 <set_blinky+0xf0>)
 800039e:	f001 fa4c 	bl	800183a <HAL_GPIO_WritePin>
                toggle = 0;
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <set_blinky+0xf4>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
			break;
 80003a8:	e014      	b.n	80003d4 <set_blinky+0xe4>
			HAL_GPIO_TogglePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin);
 80003aa:	2108      	movs	r1, #8
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <set_blinky+0xf0>)
 80003ae:	f001 fa5c 	bl	800186a <HAL_GPIO_TogglePin>
            HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b8:	4808      	ldr	r0, [pc, #32]	; (80003dc <set_blinky+0xec>)
 80003ba:	f001 fa3e 	bl	800183a <HAL_GPIO_WritePin>
            HAL_GPIO_TogglePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin);
 80003be:	2110      	movs	r1, #16
 80003c0:	4807      	ldr	r0, [pc, #28]	; (80003e0 <set_blinky+0xf0>)
 80003c2:	f001 fa52 	bl	800186a <HAL_GPIO_TogglePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2120      	movs	r1, #32
 80003ca:	4805      	ldr	r0, [pc, #20]	; (80003e0 <set_blinky+0xf0>)
 80003cc:	f001 fa35 	bl	800183a <HAL_GPIO_WritePin>
			break;
 80003d0:	e000      	b.n	80003d4 <set_blinky+0xe4>
			break;
 80003d2:	bf00      	nop
	}
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40010800 	.word	0x40010800
 80003e0:	40010c00 	.word	0x40010c00
 80003e4:	200000b4 	.word	0x200000b4

080003e8 <fsm_automatic_run>:
	current_state = RED1_GREEN2;
	counter1 = RED;
	counter2 = GREEN;
}

void fsm_automatic_run() {
 80003e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ea:	b093      	sub	sp, #76	; 0x4c
 80003ec:	af10      	add	r7, sp, #64	; 0x40
	switch(current_state){
 80003ee:	4ba0      	ldr	r3, [pc, #640]	; (8000670 <fsm_automatic_run+0x288>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	3b33      	subs	r3, #51	; 0x33
 80003f4:	2b03      	cmp	r3, #3
 80003f6:	f200 81b2 	bhi.w	800075e <fsm_automatic_run+0x376>
 80003fa:	a201      	add	r2, pc, #4	; (adr r2, 8000400 <fsm_automatic_run+0x18>)
 80003fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000400:	080005a3 	.word	0x080005a3
 8000404:	08000691 	.word	0x08000691
 8000408:	08000411 	.word	0x08000411
 800040c:	080004d9 	.word	0x080004d9

	case GREEN2:
		traffic_light(GREEN2);
 8000410:	2035      	movs	r0, #53	; 0x35
 8000412:	f7ff fed5 	bl	80001c0 <traffic_light>

		if (timer_flag[0] == 1) {
 8000416:	4b97      	ldr	r3, [pc, #604]	; (8000674 <fsm_automatic_run+0x28c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d113      	bne.n	8000446 <fsm_automatic_run+0x5e>
			counter2 = RED - GREEN;
 800041e:	4b96      	ldr	r3, [pc, #600]	; (8000678 <fsm_automatic_run+0x290>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	4b96      	ldr	r3, [pc, #600]	; (800067c <fsm_automatic_run+0x294>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	1ad3      	subs	r3, r2, r3
 8000428:	4a95      	ldr	r2, [pc, #596]	; (8000680 <fsm_automatic_run+0x298>)
 800042a:	6013      	str	r3, [r2, #0]
			current_state = AMBER2;
 800042c:	4b90      	ldr	r3, [pc, #576]	; (8000670 <fsm_automatic_run+0x288>)
 800042e:	2236      	movs	r2, #54	; 0x36
 8000430:	601a      	str	r2, [r3, #0]
			setTimer(0, counter2 * 1000);
 8000432:	4b93      	ldr	r3, [pc, #588]	; (8000680 <fsm_automatic_run+0x298>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800043a:	fb02 f303 	mul.w	r3, r2, r3
 800043e:	4619      	mov	r1, r3
 8000440:	2000      	movs	r0, #0
 8000442:	f000 fd47 	bl	8000ed4 <setTimer>
		}
		if (timer_flag[2] == 1) {
 8000446:	4b8b      	ldr	r3, [pc, #556]	; (8000674 <fsm_automatic_run+0x28c>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d130      	bne.n	80004b0 <fsm_automatic_run+0xc8>
			displayUART(counter1, huart2);
 800044e:	4b8d      	ldr	r3, [pc, #564]	; (8000684 <fsm_automatic_run+0x29c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	4e8c      	ldr	r6, [pc, #560]	; (8000688 <fsm_automatic_run+0x2a0>)
 8000456:	466d      	mov	r5, sp
 8000458:	f106 040c 	add.w	r4, r6, #12
 800045c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800045e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000468:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800046c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000470:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f7ff fe69 	bl	800014c <displayUART>
			displayUART(counter2, huart2);
 800047a:	4b81      	ldr	r3, [pc, #516]	; (8000680 <fsm_automatic_run+0x298>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	4e81      	ldr	r6, [pc, #516]	; (8000688 <fsm_automatic_run+0x2a0>)
 8000482:	466d      	mov	r5, sp
 8000484:	f106 040c 	add.w	r4, r6, #12
 8000488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800048a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800048c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800048e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000494:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000498:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800049c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	f7ff fe53 	bl	800014c <displayUART>
			setTimer(2, 1000);
 80004a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004aa:	2002      	movs	r0, #2
 80004ac:	f000 fd12 	bl	8000ed4 <setTimer>
		}
		if(isButtonPressed(0)){
 80004b0:	2000      	movs	r0, #0
 80004b2:	f000 fa9f 	bl	80009f4 <isButtonPressed>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d002      	beq.n	80004c2 <fsm_automatic_run+0xda>
			current_state = GREEN2;
 80004bc:	4b6c      	ldr	r3, [pc, #432]	; (8000670 <fsm_automatic_run+0x288>)
 80004be:	2235      	movs	r2, #53	; 0x35
 80004c0:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(3)){
 80004c2:	2003      	movs	r0, #3
 80004c4:	f000 fa96 	bl	80009f4 <isButtonPressed>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f000 8149 	beq.w	8000762 <fsm_automatic_run+0x37a>
			current_state = PED_RED;
 80004d0:	4b67      	ldr	r3, [pc, #412]	; (8000670 <fsm_automatic_run+0x288>)
 80004d2:	222b      	movs	r2, #43	; 0x2b
 80004d4:	601a      	str	r2, [r3, #0]
		}
		break;
 80004d6:	e144      	b.n	8000762 <fsm_automatic_run+0x37a>

	case AMBER2:
		traffic_light(AMBER2);
 80004d8:	2036      	movs	r0, #54	; 0x36
 80004da:	f7ff fe71 	bl	80001c0 <traffic_light>

		if (timer_flag[0] == 1) {
 80004de:	4b65      	ldr	r3, [pc, #404]	; (8000674 <fsm_automatic_run+0x28c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d114      	bne.n	8000510 <fsm_automatic_run+0x128>
			counter1 = GREEN;
 80004e6:	4b65      	ldr	r3, [pc, #404]	; (800067c <fsm_automatic_run+0x294>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a66      	ldr	r2, [pc, #408]	; (8000684 <fsm_automatic_run+0x29c>)
 80004ec:	6013      	str	r3, [r2, #0]
			counter2 = RED;
 80004ee:	4b62      	ldr	r3, [pc, #392]	; (8000678 <fsm_automatic_run+0x290>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a63      	ldr	r2, [pc, #396]	; (8000680 <fsm_automatic_run+0x298>)
 80004f4:	6013      	str	r3, [r2, #0]
			current_state = GREEN1;
 80004f6:	4b5e      	ldr	r3, [pc, #376]	; (8000670 <fsm_automatic_run+0x288>)
 80004f8:	2233      	movs	r2, #51	; 0x33
 80004fa:	601a      	str	r2, [r3, #0]
			setTimer(0, counter1 * 1000);
 80004fc:	4b61      	ldr	r3, [pc, #388]	; (8000684 <fsm_automatic_run+0x29c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000504:	fb02 f303 	mul.w	r3, r2, r3
 8000508:	4619      	mov	r1, r3
 800050a:	2000      	movs	r0, #0
 800050c:	f000 fce2 	bl	8000ed4 <setTimer>
		}
		if (timer_flag[2] == 1) {
 8000510:	4b58      	ldr	r3, [pc, #352]	; (8000674 <fsm_automatic_run+0x28c>)
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d130      	bne.n	800057a <fsm_automatic_run+0x192>
			displayUART(counter1, huart2);
 8000518:	4b5a      	ldr	r3, [pc, #360]	; (8000684 <fsm_automatic_run+0x29c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	607b      	str	r3, [r7, #4]
 800051e:	4e5a      	ldr	r6, [pc, #360]	; (8000688 <fsm_automatic_run+0x2a0>)
 8000520:	466d      	mov	r5, sp
 8000522:	f106 040c 	add.w	r4, r6, #12
 8000526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800052a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800052c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800052e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000532:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000536:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800053a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f7ff fe04 	bl	800014c <displayUART>
			displayUART(counter2, huart2);
 8000544:	4b4e      	ldr	r3, [pc, #312]	; (8000680 <fsm_automatic_run+0x298>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	4e4f      	ldr	r6, [pc, #316]	; (8000688 <fsm_automatic_run+0x2a0>)
 800054c:	466d      	mov	r5, sp
 800054e:	f106 040c 	add.w	r4, r6, #12
 8000552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800055a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800055c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800055e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000562:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000566:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f7ff fdee 	bl	800014c <displayUART>
			setTimer(2, 1000);
 8000570:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000574:	2002      	movs	r0, #2
 8000576:	f000 fcad 	bl	8000ed4 <setTimer>
		}
		if(isButtonPressed(0)){
 800057a:	2000      	movs	r0, #0
 800057c:	f000 fa3a 	bl	80009f4 <isButtonPressed>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d002      	beq.n	800058c <fsm_automatic_run+0x1a4>
			current_state = AMBER2;
 8000586:	4b3a      	ldr	r3, [pc, #232]	; (8000670 <fsm_automatic_run+0x288>)
 8000588:	2236      	movs	r2, #54	; 0x36
 800058a:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(3)){
 800058c:	2003      	movs	r0, #3
 800058e:	f000 fa31 	bl	80009f4 <isButtonPressed>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	f000 80e6 	beq.w	8000766 <fsm_automatic_run+0x37e>
			current_state = PED_RED;
 800059a:	4b35      	ldr	r3, [pc, #212]	; (8000670 <fsm_automatic_run+0x288>)
 800059c:	222b      	movs	r2, #43	; 0x2b
 800059e:	601a      	str	r2, [r3, #0]
		}
		break;
 80005a0:	e0e1      	b.n	8000766 <fsm_automatic_run+0x37e>

	case GREEN1:
		traffic_light(GREEN1);
 80005a2:	2033      	movs	r0, #51	; 0x33
 80005a4:	f7ff fe0c 	bl	80001c0 <traffic_light>

		if (timer_flag[0] == 1) {
 80005a8:	4b32      	ldr	r3, [pc, #200]	; (8000674 <fsm_automatic_run+0x28c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d116      	bne.n	80005de <fsm_automatic_run+0x1f6>
			status = AMBER1;
 80005b0:	4b36      	ldr	r3, [pc, #216]	; (800068c <fsm_automatic_run+0x2a4>)
 80005b2:	2234      	movs	r2, #52	; 0x34
 80005b4:	601a      	str	r2, [r3, #0]
			counter1 = RED - GREEN;
 80005b6:	4b30      	ldr	r3, [pc, #192]	; (8000678 <fsm_automatic_run+0x290>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	4b30      	ldr	r3, [pc, #192]	; (800067c <fsm_automatic_run+0x294>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	4a30      	ldr	r2, [pc, #192]	; (8000684 <fsm_automatic_run+0x29c>)
 80005c2:	6013      	str	r3, [r2, #0]
			current_state = AMBER1;
 80005c4:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <fsm_automatic_run+0x288>)
 80005c6:	2234      	movs	r2, #52	; 0x34
 80005c8:	601a      	str	r2, [r3, #0]
			setTimer(0, counter1 * 1000);
 80005ca:	4b2e      	ldr	r3, [pc, #184]	; (8000684 <fsm_automatic_run+0x29c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005d2:	fb02 f303 	mul.w	r3, r2, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fc7b 	bl	8000ed4 <setTimer>
		}
		if (timer_flag[2] == 1) {
 80005de:	4b25      	ldr	r3, [pc, #148]	; (8000674 <fsm_automatic_run+0x28c>)
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d130      	bne.n	8000648 <fsm_automatic_run+0x260>
			displayUART(counter1, huart2);
 80005e6:	4b27      	ldr	r3, [pc, #156]	; (8000684 <fsm_automatic_run+0x29c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4e26      	ldr	r6, [pc, #152]	; (8000688 <fsm_automatic_run+0x2a0>)
 80005ee:	466d      	mov	r5, sp
 80005f0:	f106 040c 	add.w	r4, r6, #12
 80005f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000600:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000604:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000608:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff fd9d 	bl	800014c <displayUART>
			displayUART(counter2, huart2);
 8000612:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <fsm_automatic_run+0x298>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4e1b      	ldr	r6, [pc, #108]	; (8000688 <fsm_automatic_run+0x2a0>)
 800061a:	466d      	mov	r5, sp
 800061c:	f106 040c 	add.w	r4, r6, #12
 8000620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800062a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800062c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000630:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000634:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff fd87 	bl	800014c <displayUART>
			setTimer(2, 1000);
 800063e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000642:	2002      	movs	r0, #2
 8000644:	f000 fc46 	bl	8000ed4 <setTimer>
		}
		if(isButtonPressed(0)){
 8000648:	2000      	movs	r0, #0
 800064a:	f000 f9d3 	bl	80009f4 <isButtonPressed>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <fsm_automatic_run+0x272>
			current_state = GREEN1;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <fsm_automatic_run+0x288>)
 8000656:	2233      	movs	r2, #51	; 0x33
 8000658:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(3)){
 800065a:	2003      	movs	r0, #3
 800065c:	f000 f9ca 	bl	80009f4 <isButtonPressed>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	f000 8081 	beq.w	800076a <fsm_automatic_run+0x382>
			current_state = PED_GREEN;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <fsm_automatic_run+0x288>)
 800066a:	222a      	movs	r2, #42	; 0x2a
 800066c:	601a      	str	r2, [r3, #0]
		}
		break;
 800066e:	e07c      	b.n	800076a <fsm_automatic_run+0x382>
 8000670:	20000178 	.word	0x20000178
 8000674:	20000148 	.word	0x20000148
 8000678:	20000000 	.word	0x20000000
 800067c:	20000008 	.word	0x20000008
 8000680:	200000c0 	.word	0x200000c0
 8000684:	200000bc 	.word	0x200000bc
 8000688:	20000240 	.word	0x20000240
 800068c:	200000b8 	.word	0x200000b8

	case AMBER1:
		traffic_light(AMBER1);
 8000690:	2034      	movs	r0, #52	; 0x34
 8000692:	f7ff fd95 	bl	80001c0 <traffic_light>

		if (timer_flag[0] == 1) {
 8000696:	4b38      	ldr	r3, [pc, #224]	; (8000778 <fsm_automatic_run+0x390>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d117      	bne.n	80006ce <fsm_automatic_run+0x2e6>
			status = GREEN2;
 800069e:	4b37      	ldr	r3, [pc, #220]	; (800077c <fsm_automatic_run+0x394>)
 80006a0:	2235      	movs	r2, #53	; 0x35
 80006a2:	601a      	str	r2, [r3, #0]
			counter1 = RED;
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <fsm_automatic_run+0x398>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a36      	ldr	r2, [pc, #216]	; (8000784 <fsm_automatic_run+0x39c>)
 80006aa:	6013      	str	r3, [r2, #0]
			counter2 = GREEN;
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <fsm_automatic_run+0x3a0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a36      	ldr	r2, [pc, #216]	; (800078c <fsm_automatic_run+0x3a4>)
 80006b2:	6013      	str	r3, [r2, #0]
			current_state = GREEN2;
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <fsm_automatic_run+0x3a8>)
 80006b6:	2235      	movs	r2, #53	; 0x35
 80006b8:	601a      	str	r2, [r3, #0]
			setTimer(0, counter2 * 1000);
 80006ba:	4b34      	ldr	r3, [pc, #208]	; (800078c <fsm_automatic_run+0x3a4>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c2:	fb02 f303 	mul.w	r3, r2, r3
 80006c6:	4619      	mov	r1, r3
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 fc03 	bl	8000ed4 <setTimer>
		}
		if (timer_flag[2] == 1) {
 80006ce:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <fsm_automatic_run+0x390>)
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d130      	bne.n	8000738 <fsm_automatic_run+0x350>
			displayUART(counter1, huart2);
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <fsm_automatic_run+0x39c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4e2d      	ldr	r6, [pc, #180]	; (8000794 <fsm_automatic_run+0x3ac>)
 80006de:	466d      	mov	r5, sp
 80006e0:	f106 040c 	add.w	r4, r6, #12
 80006e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80006f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80006f8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff fd25 	bl	800014c <displayUART>
			displayUART(counter2, huart2);
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <fsm_automatic_run+0x3a4>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4e22      	ldr	r6, [pc, #136]	; (8000794 <fsm_automatic_run+0x3ac>)
 800070a:	466d      	mov	r5, sp
 800070c:	f106 040c 	add.w	r4, r6, #12
 8000710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800071a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800071c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000720:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000724:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff fd0f 	bl	800014c <displayUART>
			setTimer(2, 1000);
 800072e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000732:	2002      	movs	r0, #2
 8000734:	f000 fbce 	bl	8000ed4 <setTimer>
		}
		if(isButtonPressed(0)){
 8000738:	2000      	movs	r0, #0
 800073a:	f000 f95b 	bl	80009f4 <isButtonPressed>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d002      	beq.n	800074a <fsm_automatic_run+0x362>
			current_state = AMBER1;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <fsm_automatic_run+0x3a8>)
 8000746:	2234      	movs	r2, #52	; 0x34
 8000748:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(3)){
 800074a:	2003      	movs	r0, #3
 800074c:	f000 f952 	bl	80009f4 <isButtonPressed>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d00b      	beq.n	800076e <fsm_automatic_run+0x386>
			current_state = PED_GREEN;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <fsm_automatic_run+0x3a8>)
 8000758:	222a      	movs	r2, #42	; 0x2a
 800075a:	601a      	str	r2, [r3, #0]
		}
		break;
 800075c:	e007      	b.n	800076e <fsm_automatic_run+0x386>

	default:
		break;
 800075e:	bf00      	nop
 8000760:	e006      	b.n	8000770 <fsm_automatic_run+0x388>
		break;
 8000762:	bf00      	nop
 8000764:	e004      	b.n	8000770 <fsm_automatic_run+0x388>
		break;
 8000766:	bf00      	nop
 8000768:	e002      	b.n	8000770 <fsm_automatic_run+0x388>
		break;
 800076a:	bf00      	nop
 800076c:	e000      	b.n	8000770 <fsm_automatic_run+0x388>
		break;
 800076e:	bf00      	nop
	}
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000778:	20000148 	.word	0x20000148
 800077c:	200000b8 	.word	0x200000b8
 8000780:	20000000 	.word	0x20000000
 8000784:	200000bc 	.word	0x200000bc
 8000788:	20000008 	.word	0x20000008
 800078c:	200000c0 	.word	0x200000c0
 8000790:	20000178 	.word	0x20000178
 8000794:	20000240 	.word	0x20000240

08000798 <fsm_turning_run>:

#include "main.h"



void fsm_turning_run(int turn_state) {
 8000798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800079a:	b093      	sub	sp, #76	; 0x4c
 800079c:	af10      	add	r7, sp, #64	; 0x40
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b1f      	subs	r3, #31
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	f200 810d 	bhi.w	80009c4 <fsm_turning_run+0x22c>
 80007aa:	a201      	add	r2, pc, #4	; (adr r2, 80007b0 <fsm_turning_run+0x18>)
 80007ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b0:	080007c1 	.word	0x080007c1
 80007b4:	0800082d 	.word	0x0800082d
 80007b8:	080008c5 	.word	0x080008c5
 80007bc:	0800092f 	.word	0x0800092f
	switch(turn_state){

	case AUTO_AMBER:
		

		if (timer_flag[3] == 1) {
 80007c0:	4b87      	ldr	r3, [pc, #540]	; (80009e0 <fsm_turning_run+0x248>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d107      	bne.n	80007d8 <fsm_turning_run+0x40>
			setTimer(3, 500);
 80007c8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007cc:	2003      	movs	r0, #3
 80007ce:	f000 fb81 	bl	8000ed4 <setTimer>
            set_blinky(AUTO_AMBER);
 80007d2:	201f      	movs	r0, #31
 80007d4:	f7ff fd8c 	bl	80002f0 <set_blinky>
		}
		if(isButtonPressed(1)){
 80007d8:	2001      	movs	r0, #1
 80007da:	f000 f90b 	bl	80009f4 <isButtonPressed>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	f000 80f1 	beq.w	80009c8 <fsm_turning_run+0x230>
			turn_state = ADJ_AMBER;
 80007e6:	2320      	movs	r3, #32
 80007e8:	607b      	str	r3, [r7, #4]
            AMBER++;
 80007ea:	4b7e      	ldr	r3, [pc, #504]	; (80009e4 <fsm_turning_run+0x24c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	3301      	adds	r3, #1
 80007f0:	4a7c      	ldr	r2, [pc, #496]	; (80009e4 <fsm_turning_run+0x24c>)
 80007f2:	6013      	str	r3, [r2, #0]
            RED++;
 80007f4:	4b7c      	ldr	r3, [pc, #496]	; (80009e8 <fsm_turning_run+0x250>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a7b      	ldr	r2, [pc, #492]	; (80009e8 <fsm_turning_run+0x250>)
 80007fc:	6013      	str	r3, [r2, #0]
            displayUART(AMBER, huart2);
 80007fe:	4b79      	ldr	r3, [pc, #484]	; (80009e4 <fsm_turning_run+0x24c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	4e79      	ldr	r6, [pc, #484]	; (80009ec <fsm_turning_run+0x254>)
 8000806:	466d      	mov	r5, sp
 8000808:	f106 040c 	add.w	r4, r6, #12
 800080c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800080e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000818:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800081c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000820:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000824:	6838      	ldr	r0, [r7, #0]
 8000826:	f7ff fc91 	bl	800014c <displayUART>
		}
		break;
 800082a:	e0cd      	b.n	80009c8 <fsm_turning_run+0x230>

	case ADJ_AMBER:
		if (timer_flag[3] == 1) {
 800082c:	4b6c      	ldr	r3, [pc, #432]	; (80009e0 <fsm_turning_run+0x248>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d107      	bne.n	8000844 <fsm_turning_run+0xac>
			setTimer(3, 500);
 8000834:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000838:	2003      	movs	r0, #3
 800083a:	f000 fb4b 	bl	8000ed4 <setTimer>
            set_blinky(AUTO_AMBER);
 800083e:	201f      	movs	r0, #31
 8000840:	f7ff fd56 	bl	80002f0 <set_blinky>
		}
		if(isButtonPressed(1)){
 8000844:	2001      	movs	r0, #1
 8000846:	f000 f8d5 	bl	80009f4 <isButtonPressed>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d02f      	beq.n	80008b0 <fsm_turning_run+0x118>
			turn_state = ADJ_AMBER;
 8000850:	2320      	movs	r3, #32
 8000852:	607b      	str	r3, [r7, #4]
            AMBER++;
 8000854:	4b63      	ldr	r3, [pc, #396]	; (80009e4 <fsm_turning_run+0x24c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	4a62      	ldr	r2, [pc, #392]	; (80009e4 <fsm_turning_run+0x24c>)
 800085c:	6013      	str	r3, [r2, #0]
            RED++;
 800085e:	4b62      	ldr	r3, [pc, #392]	; (80009e8 <fsm_turning_run+0x250>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	4a60      	ldr	r2, [pc, #384]	; (80009e8 <fsm_turning_run+0x250>)
 8000866:	6013      	str	r3, [r2, #0]
            if(AMBER == 100){
 8000868:	4b5e      	ldr	r3, [pc, #376]	; (80009e4 <fsm_turning_run+0x24c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b64      	cmp	r3, #100	; 0x64
 800086e:	d109      	bne.n	8000884 <fsm_turning_run+0xec>
                AMBER = 1;
 8000870:	4b5c      	ldr	r3, [pc, #368]	; (80009e4 <fsm_turning_run+0x24c>)
 8000872:	2201      	movs	r2, #1
 8000874:	601a      	str	r2, [r3, #0]
                RED = AMBER + GREEN;
 8000876:	4b5b      	ldr	r3, [pc, #364]	; (80009e4 <fsm_turning_run+0x24c>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <fsm_turning_run+0x258>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4413      	add	r3, r2
 8000880:	4a59      	ldr	r2, [pc, #356]	; (80009e8 <fsm_turning_run+0x250>)
 8000882:	6013      	str	r3, [r2, #0]
            }
            displayUART(AMBER, huart2);
 8000884:	4b57      	ldr	r3, [pc, #348]	; (80009e4 <fsm_turning_run+0x24c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4e58      	ldr	r6, [pc, #352]	; (80009ec <fsm_turning_run+0x254>)
 800088c:	466d      	mov	r5, sp
 800088e:	f106 040c 	add.w	r4, r6, #12
 8000892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800089a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800089c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800089e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80008a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80008a6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80008aa:	6838      	ldr	r0, [r7, #0]
 80008ac:	f7ff fc4e 	bl	800014c <displayUART>
		}
		if(isButtonPressed(2)){
 80008b0:	2002      	movs	r0, #2
 80008b2:	f000 f89f 	bl	80009f4 <isButtonPressed>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	f000 8087 	beq.w	80009cc <fsm_turning_run+0x234>
			turn_state = AUTO_AMBER;
 80008be:	231f      	movs	r3, #31
 80008c0:	607b      	str	r3, [r7, #4]
		}
        break;
 80008c2:	e083      	b.n	80009cc <fsm_turning_run+0x234>

	case AUTO_GREEN:
		if (timer_flag[3] == 1) {
 80008c4:	4b46      	ldr	r3, [pc, #280]	; (80009e0 <fsm_turning_run+0x248>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d107      	bne.n	80008dc <fsm_turning_run+0x144>
			setTimer(3, 500);
 80008cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008d0:	2003      	movs	r0, #3
 80008d2:	f000 faff 	bl	8000ed4 <setTimer>
            set_blinky(AUTO_GREEN);
 80008d6:	2021      	movs	r0, #33	; 0x21
 80008d8:	f7ff fd0a 	bl	80002f0 <set_blinky>
		}
		if(isButtonPressed(1)){
 80008dc:	2001      	movs	r0, #1
 80008de:	f000 f889 	bl	80009f4 <isButtonPressed>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d073      	beq.n	80009d0 <fsm_turning_run+0x238>
			turn_state = ADJ_GREEN;
 80008e8:	2322      	movs	r3, #34	; 0x22
 80008ea:	607b      	str	r3, [r7, #4]
            GREEN++;
 80008ec:	4b40      	ldr	r3, [pc, #256]	; (80009f0 <fsm_turning_run+0x258>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	4a3f      	ldr	r2, [pc, #252]	; (80009f0 <fsm_turning_run+0x258>)
 80008f4:	6013      	str	r3, [r2, #0]
            RED++;
 80008f6:	4b3c      	ldr	r3, [pc, #240]	; (80009e8 <fsm_turning_run+0x250>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	4a3a      	ldr	r2, [pc, #232]	; (80009e8 <fsm_turning_run+0x250>)
 80008fe:	6013      	str	r3, [r2, #0]
            displayUART(GREEN, huart2);
 8000900:	4b3b      	ldr	r3, [pc, #236]	; (80009f0 <fsm_turning_run+0x258>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4e39      	ldr	r6, [pc, #228]	; (80009ec <fsm_turning_run+0x254>)
 8000908:	466d      	mov	r5, sp
 800090a:	f106 040c 	add.w	r4, r6, #12
 800090e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800091a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800091e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000922:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000926:	6838      	ldr	r0, [r7, #0]
 8000928:	f7ff fc10 	bl	800014c <displayUART>
		}
		break;
 800092c:	e050      	b.n	80009d0 <fsm_turning_run+0x238>

	case ADJ_GREEN:
		if (timer_flag[3] == 1) {
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <fsm_turning_run+0x248>)
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d107      	bne.n	8000946 <fsm_turning_run+0x1ae>
			setTimer(3, 500);
 8000936:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800093a:	2003      	movs	r0, #3
 800093c:	f000 faca 	bl	8000ed4 <setTimer>
            set_blinky(AUTO_AMBER);
 8000940:	201f      	movs	r0, #31
 8000942:	f7ff fcd5 	bl	80002f0 <set_blinky>
		}
		if(isButtonPressed(1)){
 8000946:	2001      	movs	r0, #1
 8000948:	f000 f854 	bl	80009f4 <isButtonPressed>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d02f      	beq.n	80009b2 <fsm_turning_run+0x21a>
			turn_state = ADJ_AMBER;
 8000952:	2320      	movs	r3, #32
 8000954:	607b      	str	r3, [r7, #4]
            AMBER++;
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <fsm_turning_run+0x24c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	4a21      	ldr	r2, [pc, #132]	; (80009e4 <fsm_turning_run+0x24c>)
 800095e:	6013      	str	r3, [r2, #0]
            RED++;
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <fsm_turning_run+0x250>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	4a20      	ldr	r2, [pc, #128]	; (80009e8 <fsm_turning_run+0x250>)
 8000968:	6013      	str	r3, [r2, #0]
            if(AMBER == 100){
 800096a:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <fsm_turning_run+0x24c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b64      	cmp	r3, #100	; 0x64
 8000970:	d109      	bne.n	8000986 <fsm_turning_run+0x1ee>
                AMBER = 1;
 8000972:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <fsm_turning_run+0x24c>)
 8000974:	2201      	movs	r2, #1
 8000976:	601a      	str	r2, [r3, #0]
                RED = AMBER + GREEN;
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <fsm_turning_run+0x24c>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <fsm_turning_run+0x258>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4413      	add	r3, r2
 8000982:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <fsm_turning_run+0x250>)
 8000984:	6013      	str	r3, [r2, #0]
            }
            displayUART(AMBER, huart2);
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <fsm_turning_run+0x24c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	4e17      	ldr	r6, [pc, #92]	; (80009ec <fsm_turning_run+0x254>)
 800098e:	466d      	mov	r5, sp
 8000990:	f106 040c 	add.w	r4, r6, #12
 8000994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800099a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800099c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800099e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80009a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80009a8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80009ac:	6838      	ldr	r0, [r7, #0]
 80009ae:	f7ff fbcd 	bl	800014c <displayUART>
		}
		if(isButtonPressed(2)){
 80009b2:	2002      	movs	r0, #2
 80009b4:	f000 f81e 	bl	80009f4 <isButtonPressed>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d00a      	beq.n	80009d4 <fsm_turning_run+0x23c>
			turn_state = AUTO_GREEN;
 80009be:	2321      	movs	r3, #33	; 0x21
 80009c0:	607b      	str	r3, [r7, #4]
		}
        break;
 80009c2:	e007      	b.n	80009d4 <fsm_turning_run+0x23c>

	default:
		break;
 80009c4:	bf00      	nop
 80009c6:	e006      	b.n	80009d6 <fsm_turning_run+0x23e>
		break;
 80009c8:	bf00      	nop
 80009ca:	e004      	b.n	80009d6 <fsm_turning_run+0x23e>
        break;
 80009cc:	bf00      	nop
 80009ce:	e002      	b.n	80009d6 <fsm_turning_run+0x23e>
		break;
 80009d0:	bf00      	nop
 80009d2:	e000      	b.n	80009d6 <fsm_turning_run+0x23e>
        break;
 80009d4:	bf00      	nop
	}
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000148 	.word	0x20000148
 80009e4:	20000004 	.word	0x20000004
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000240 	.word	0x20000240
 80009f0:	20000008 	.word	0x20000008

080009f4 <isButtonPressed>:
		TimeOutForKeyPress[i] =  500;
		button_flag[i] = 0;
	}
}

int isButtonPressed(int index){
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	if(index >= NO_OF_BUTTONS){
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	dd01      	ble.n	8000a06 <isButtonPressed+0x12>
		return 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e00d      	b.n	8000a22 <isButtonPressed+0x2e>
	}
	if(button_flag[index] == 1){
 8000a06:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <isButtonPressed+0x38>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d106      	bne.n	8000a20 <isButtonPressed+0x2c>
		button_flag[index] = 0;
 8000a12:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <isButtonPressed+0x38>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2100      	movs	r1, #0
 8000a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e000      	b.n	8000a22 <isButtonPressed+0x2e>
	}
	return 0;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	20000114 	.word	0x20000114

08000a30 <subKeyProcess>:

void subKeyProcess(int index){
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <subKeyProcess+0x1c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	20000114 	.word	0x20000114

08000a50 <getKeyInput>:

void getKeyInput(){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	e070      	b.n	8000b3e <getKeyInput+0xee>
		KeyReg2[i] = KeyReg1[i];
 8000a5c:	4a3c      	ldr	r2, [pc, #240]	; (8000b50 <getKeyInput+0x100>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a64:	493b      	ldr	r1, [pc, #236]	; (8000b54 <getKeyInput+0x104>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000a6c:	4a3a      	ldr	r2, [pc, #232]	; (8000b58 <getKeyInput+0x108>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a74:	4936      	ldr	r1, [pc, #216]	; (8000b50 <getKeyInput+0x100>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON_PORT[i], BUTTON_PIN[i]);
 8000a7c:	4a37      	ldr	r2, [pc, #220]	; (8000b5c <getKeyInput+0x10c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a84:	4936      	ldr	r1, [pc, #216]	; (8000b60 <getKeyInput+0x110>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4610      	mov	r0, r2
 8000a90:	f000 febc 	bl	800180c <HAL_GPIO_ReadPin>
 8000a94:	4603      	mov	r3, r0
 8000a96:	4619      	mov	r1, r3
 8000a98:	4a2f      	ldr	r2, [pc, #188]	; (8000b58 <getKeyInput+0x108>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000aa0:	4a2b      	ldr	r2, [pc, #172]	; (8000b50 <getKeyInput+0x100>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aa8:	492b      	ldr	r1, [pc, #172]	; (8000b58 <getKeyInput+0x108>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d141      	bne.n	8000b38 <getKeyInput+0xe8>
 8000ab4:	4a26      	ldr	r2, [pc, #152]	; (8000b50 <getKeyInput+0x100>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000abc:	4925      	ldr	r1, [pc, #148]	; (8000b54 <getKeyInput+0x104>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d137      	bne.n	8000b38 <getKeyInput+0xe8>
		if (KeyReg2[i] != KeyReg3[i]){
 8000ac8:	4a22      	ldr	r2, [pc, #136]	; (8000b54 <getKeyInput+0x104>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ad0:	4924      	ldr	r1, [pc, #144]	; (8000b64 <getKeyInput+0x114>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d016      	beq.n	8000b0a <getKeyInput+0xba>
		  KeyReg3[i] = KeyReg2[i];
 8000adc:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <getKeyInput+0x104>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ae4:	491f      	ldr	r1, [pc, #124]	; (8000b64 <getKeyInput+0x114>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  if (KeyReg3[i] == PRESSED_STATE){
 8000aec:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <getKeyInput+0x114>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d11f      	bne.n	8000b38 <getKeyInput+0xe8>
			TimeOutForKeyPress[i] = DURATION_FOR_AUTO_INCREASING;
 8000af8:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <getKeyInput+0x118>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2164      	movs	r1, #100	; 0x64
 8000afe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			subKeyProcess(i);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ff94 	bl	8000a30 <subKeyProcess>
 8000b08:	e016      	b.n	8000b38 <getKeyInput+0xe8>
		  }
		}else{
		   TimeOutForKeyPress[i] --;
 8000b0a:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <getKeyInput+0x118>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b12:	1e5a      	subs	r2, r3, #1
 8000b14:	4914      	ldr	r1, [pc, #80]	; (8000b68 <getKeyInput+0x118>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimeOutForKeyPress[i] == 0){
 8000b1c:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <getKeyInput+0x118>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d107      	bne.n	8000b38 <getKeyInput+0xe8>
				TimeOutForKeyPress[i] = DURATION_FOR_AUTO_INCREASING;
 8000b28:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <getKeyInput+0x118>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2164      	movs	r1, #100	; 0x64
 8000b2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				subKeyProcess(i);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff ff7c 	bl	8000a30 <subKeyProcess>
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	dd8b      	ble.n	8000a5c <getKeyInput+0xc>
			}
		}
		}
	}

}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000d4 	.word	0x200000d4
 8000b54:	200000e4 	.word	0x200000e4
 8000b58:	200000c4 	.word	0x200000c4
 8000b5c:	2000000c 	.word	0x2000000c
 8000b60:	2000001c 	.word	0x2000001c
 8000b64:	200000f4 	.word	0x200000f4
 8000b68:	20000104 	.word	0x20000104

08000b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b70:	f000 fb58 	bl	8001224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b74:	f000 f82a 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b78:	f000 f928 	bl	8000dcc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b7c:	f000 f862 	bl	8000c44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b80:	f000 f8ac 	bl	8000cdc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000b84:	f000 f8f8 	bl	8000d78 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  current_state = GREEN2;
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <main+0x54>)
 8000b8a:	2235      	movs	r2, #53	; 0x35
 8000b8c:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 8000b8e:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <main+0x58>)
 8000b90:	f001 fae2 	bl	8002158 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <main+0x5c>)
 8000b96:	f001 fadf 	bl	8002158 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
    setTimer(0, 5000);	// Timer RED1_GREEN2
 8000b9a:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f000 f998 	bl	8000ed4 <setTimer>
//    		setTimer(2, 1000);			// Timer UART
//    		clearTimer(3);				// Timer blinking LED
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
setTimer(2, 1000);
 8000ba4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f000 f993 	bl	8000ed4 <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_automatic_run();
 8000bae:	f7ff fc1b 	bl	80003e8 <fsm_automatic_run>
	  fsm_turning_run(current_state);
 8000bb2:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <main+0x54>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fdee 	bl	8000798 <fsm_turning_run>
  {
 8000bbc:	e7f7      	b.n	8000bae <main+0x42>
 8000bbe:	bf00      	nop
 8000bc0:	20000178 	.word	0x20000178
 8000bc4:	200001f8 	.word	0x200001f8
 8000bc8:	200001b0 	.word	0x200001b0

08000bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b090      	sub	sp, #64	; 0x40
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 0318 	add.w	r3, r7, #24
 8000bd6:	2228      	movs	r2, #40	; 0x28
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 f864 	bl	8002ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf6:	2310      	movs	r3, #16
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfe:	f107 0318 	add.w	r3, r7, #24
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 fe4a 	bl	800189c <HAL_RCC_OscConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c0e:	f000 f95c 	bl	8000eca <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	230f      	movs	r3, #15
 8000c14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 f8b6 	bl	8001d9c <HAL_RCC_ClockConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c36:	f000 f948 	bl	8000eca <Error_Handler>
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3740      	adds	r7, #64	; 0x40
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c6a:	223f      	movs	r2, #63	; 0x3f
 8000c6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c76:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c88:	4813      	ldr	r0, [pc, #76]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c8a:	f001 fa15 	bl	80020b8 <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c94:	f000 f919 	bl	8000eca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000ca6:	f001 fbb1 	bl	800240c <HAL_TIM_ConfigClockSource>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cb0:	f000 f90b 	bl	8000eca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000cc2:	f001 fd87 	bl	80027d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ccc:	f000 f8fd 	bl	8000eca <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200001f8 	.word	0x200001f8

08000cdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000cfa:	4a1e      	ldr	r2, [pc, #120]	; (8000d74 <MX_TIM3_Init+0x98>)
 8000cfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000d00:	223f      	movs	r2, #63	; 0x3f
 8000d02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000d0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d1e:	4814      	ldr	r0, [pc, #80]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000d20:	f001 f9ca 	bl	80020b8 <HAL_TIM_Base_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d2a:	f000 f8ce 	bl	8000eca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000d3c:	f001 fb66 	bl	800240c <HAL_TIM_ConfigClockSource>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000d46:	f000 f8c0 	bl	8000eca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000d58:	f001 fd3c 	bl	80027d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000d62:	f000 f8b2 	bl	8000eca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200001b0 	.word	0x200001b0
 8000d74:	40000400 	.word	0x40000400

08000d78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <MX_USART2_UART_Init+0x50>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000db0:	f001 fd80 	bl	80028b4 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dba:	f000 f886 	bl	8000eca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000240 	.word	0x20000240
 8000dc8:	40004400 	.word	0x40004400

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <MX_GPIO_Init+0xd0>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4a2d      	ldr	r2, [pc, #180]	; (8000e9c <MX_GPIO_Init+0xd0>)
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <MX_GPIO_Init+0xd0>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <MX_GPIO_Init+0xd0>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a27      	ldr	r2, [pc, #156]	; (8000e9c <MX_GPIO_Init+0xd0>)
 8000dfe:	f043 0308 	orr.w	r3, r3, #8
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <MX_GPIO_Init+0xd0>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0308 	and.w	r3, r3, #8
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZ_Pin|PLIGHT2_Pin|TLIGHT11_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 8000e16:	4822      	ldr	r0, [pc, #136]	; (8000ea0 <MX_GPIO_Init+0xd4>)
 8000e18:	f000 fd0f 	bl	800183a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLIGHT1_Pin|TLIGHT12_Pin|TLIGHT22_Pin|TLIGHT21_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000e22:	4820      	ldr	r0, [pc, #128]	; (8000ea4 <MX_GPIO_Init+0xd8>)
 8000e24:	f000 fd09 	bl	800183a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BT3_Pin BT0_Pin BT1_Pin */
  GPIO_InitStruct.Pin = BT3_Pin|BT0_Pin|BT1_Pin;
 8000e28:	2313      	movs	r3, #19
 8000e2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4819      	ldr	r0, [pc, #100]	; (8000ea0 <MX_GPIO_Init+0xd4>)
 8000e3c:	f000 fb62 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZ_Pin PLIGHT2_Pin TLIGHT11_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|PLIGHT2_Pin|TLIGHT11_Pin;
 8000e40:	f44f 63a8 	mov.w	r3, #1344	; 0x540
 8000e44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	4619      	mov	r1, r3
 8000e58:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <MX_GPIO_Init+0xd4>)
 8000e5a:	f000 fb53 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT2_Pin */
  GPIO_InitStruct.Pin = BT2_Pin;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BT2_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <MX_GPIO_Init+0xd8>)
 8000e72:	f000 fb47 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLIGHT1_Pin TLIGHT12_Pin TLIGHT22_Pin TLIGHT21_Pin */
  GPIO_InitStruct.Pin = PLIGHT1_Pin|TLIGHT12_Pin|TLIGHT22_Pin|TLIGHT21_Pin;
 8000e76:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000e7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2302      	movs	r3, #2
 8000e86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_GPIO_Init+0xd8>)
 8000e90:	f000 fb38 	bl	8001504 <HAL_GPIO_Init>

}
 8000e94:	bf00      	nop
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010800 	.word	0x40010800
 8000ea4:	40010c00 	.word	0x40010c00

08000ea8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb8:	d103      	bne.n	8000ec2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		getKeyInput();
 8000eba:	f7ff fdc9 	bl	8000a50 <getKeyInput>
		timerRun();
 8000ebe:	f000 f827 	bl	8000f10 <timerRun>
	}else if(htim->Instance == TIM3){

	}
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ece:	b672      	cpsid	i
}
 8000ed0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <Error_Handler+0x8>

08000ed4 <setTimer>:
int TIME_CYCLE = 10; // Time cycle

int timer_counter[NUM_OF_TIMERS] = {0};
int timer_flag[NUM_OF_TIMERS] = {0};

void setTimer(int index, int duration) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIME_CYCLE;
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <setTimer+0x30>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ee8:	4907      	ldr	r1, [pc, #28]	; (8000f08 <setTimer+0x34>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <setTimer+0x38>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	20000024 	.word	0x20000024
 8000f08:	20000124 	.word	0x20000124
 8000f0c:	20000148 	.word	0x20000148

08000f10 <timerRun>:
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
		clearTimer(i);
	}
}

void timerRun(){
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	e01c      	b.n	8000f56 <timerRun+0x46>
		if (timer_counter[i] > 0){
 8000f1c:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <timerRun+0x58>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	dd13      	ble.n	8000f50 <timerRun+0x40>
			timer_counter[i]--;
 8000f28:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <timerRun+0x58>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f30:	1e5a      	subs	r2, r3, #1
 8000f32:	490d      	ldr	r1, [pc, #52]	; (8000f68 <timerRun+0x58>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <timerRun+0x58>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	dc04      	bgt.n	8000f50 <timerRun+0x40>
				timer_flag[i] = 1;
 8000f46:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <timerRun+0x5c>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3301      	adds	r3, #1
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	dddf      	ble.n	8000f1c <timerRun+0xc>
			}
		}
	}
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	20000124 	.word	0x20000124
 8000f6c:	20000148 	.word	0x20000148

08000f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6193      	str	r3, [r2, #24]
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_MspInit+0x60>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <HAL_MspInit+0x60>)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40010000 	.word	0x40010000

08000fd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe4:	d114      	bne.n	8001010 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_TIM_Base_MspInit+0x78>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4a18      	ldr	r2, [pc, #96]	; (800104c <HAL_TIM_Base_MspInit+0x78>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	61d3      	str	r3, [r2, #28]
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_TIM_Base_MspInit+0x78>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	201c      	movs	r0, #28
 8001004:	f000 fa47 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001008:	201c      	movs	r0, #28
 800100a:	f000 fa60 	bl	80014ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800100e:	e018      	b.n	8001042 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_TIM_Base_MspInit+0x7c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d113      	bne.n	8001042 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_TIM_Base_MspInit+0x78>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <HAL_TIM_Base_MspInit+0x78>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_TIM_Base_MspInit+0x78>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	201d      	movs	r0, #29
 8001038:	f000 fa2d 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800103c:	201d      	movs	r0, #29
 800103e:	f000 fa46 	bl	80014ce <HAL_NVIC_EnableIRQ>
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000
 8001050:	40000400 	.word	0x40000400

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <HAL_UART_MspInit+0x88>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d12f      	bne.n	80010d4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <HAL_UART_MspInit+0x8c>)
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <HAL_UART_MspInit+0x8c>)
 800107a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107e:	61d3      	str	r3, [r2, #28]
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_UART_MspInit+0x8c>)
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_UART_MspInit+0x8c>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <HAL_UART_MspInit+0x8c>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_UART_MspInit+0x8c>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010a4:	2304      	movs	r3, #4
 80010a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4619      	mov	r1, r3
 80010b6:	480b      	ldr	r0, [pc, #44]	; (80010e4 <HAL_UART_MspInit+0x90>)
 80010b8:	f000 fa24 	bl	8001504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010bc:	2308      	movs	r3, #8
 80010be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <HAL_UART_MspInit+0x90>)
 80010d0:	f000 fa18 	bl	8001504 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40004400 	.word	0x40004400
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010800 	.word	0x40010800

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112e:	f000 f8bf 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <TIM2_IRQHandler+0x10>)
 800113e:	f001 f85d 	bl	80021fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200001f8 	.word	0x200001f8

0800114c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <TIM3_IRQHandler+0x10>)
 8001152:	f001 f853 	bl	80021fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200001b0 	.word	0x200001b0

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001190:	f001 fd60 	bl	8002c54 <__errno>
 8001194:	4603      	mov	r3, r0
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20005000 	.word	0x20005000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	2000016c 	.word	0x2000016c
 80011c8:	200002a0 	.word	0x200002a0

080011cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d8:	f7ff fff8 	bl	80011cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011dc:	480b      	ldr	r0, [pc, #44]	; (800120c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011de:	490c      	ldr	r1, [pc, #48]	; (8001210 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011e0:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011f4:	4c09      	ldr	r4, [pc, #36]	; (800121c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001202:	f001 fd2d 	bl	8002c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001206:	f7ff fcb1 	bl	8000b6c <main>
  bx lr
 800120a:	4770      	bx	lr
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001214:	080035bc 	.word	0x080035bc
  ldr r2, =_sbss
 8001218:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800121c:	2000029c 	.word	0x2000029c

08001220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC1_2_IRQHandler>
	...

08001224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_Init+0x28>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <HAL_Init+0x28>)
 800122e:	f043 0310 	orr.w	r3, r3, #16
 8001232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001234:	2003      	movs	r0, #3
 8001236:	f000 f923 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123a:	200f      	movs	r0, #15
 800123c:	f000 f808 	bl	8001250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001240:	f7ff fe96 	bl	8000f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40022000 	.word	0x40022000

08001250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_InitTick+0x54>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_InitTick+0x58>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	fbb3 f3f1 	udiv	r3, r3, r1
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f93b 	bl	80014ea <HAL_SYSTICK_Config>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e00e      	b.n	800129c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0f      	cmp	r3, #15
 8001282:	d80a      	bhi.n	800129a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001284:	2200      	movs	r2, #0
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f000 f903 	bl	8001496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001290:	4a06      	ldr	r2, [pc, #24]	; (80012ac <HAL_InitTick+0x5c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000028 	.word	0x20000028
 80012a8:	20000030 	.word	0x20000030
 80012ac:	2000002c 	.word	0x2000002c

080012b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_IncTick+0x1c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_IncTick+0x20>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <HAL_IncTick+0x20>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	20000030 	.word	0x20000030
 80012d0:	20000288 	.word	0x20000288

080012d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b02      	ldr	r3, [pc, #8]	; (80012e4 <HAL_GetTick+0x10>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	20000288 	.word	0x20000288

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db0b      	blt.n	8001376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	4906      	ldr	r1, [pc, #24]	; (8001380 <__NVIC_EnableIRQ+0x34>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	; (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800144c:	d301      	bcc.n	8001452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144e:	2301      	movs	r3, #1
 8001450:	e00f      	b.n	8001472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <SysTick_Config+0x40>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145a:	210f      	movs	r1, #15
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f7ff ff90 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <SysTick_Config+0x40>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <SysTick_Config+0x40>)
 800146c:	2207      	movs	r2, #7
 800146e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	e000e010 	.word	0xe000e010

08001480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff2d 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a8:	f7ff ff42 	bl	8001330 <__NVIC_GetPriorityGrouping>
 80014ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff ff90 	bl	80013d8 <NVIC_EncodePriority>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff5f 	bl	8001384 <__NVIC_SetPriority>
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff35 	bl	800134c <__NVIC_EnableIRQ>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffa2 	bl	800143c <SysTick_Config>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001504:	b480      	push	{r7}
 8001506:	b08b      	sub	sp, #44	; 0x2c
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001516:	e169      	b.n	80017ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001518:	2201      	movs	r2, #1
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	429a      	cmp	r2, r3
 8001532:	f040 8158 	bne.w	80017e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4a9a      	ldr	r2, [pc, #616]	; (80017a4 <HAL_GPIO_Init+0x2a0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d05e      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 8001540:	4a98      	ldr	r2, [pc, #608]	; (80017a4 <HAL_GPIO_Init+0x2a0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d875      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 8001546:	4a98      	ldr	r2, [pc, #608]	; (80017a8 <HAL_GPIO_Init+0x2a4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d058      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 800154c:	4a96      	ldr	r2, [pc, #600]	; (80017a8 <HAL_GPIO_Init+0x2a4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d86f      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 8001552:	4a96      	ldr	r2, [pc, #600]	; (80017ac <HAL_GPIO_Init+0x2a8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d052      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 8001558:	4a94      	ldr	r2, [pc, #592]	; (80017ac <HAL_GPIO_Init+0x2a8>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d869      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 800155e:	4a94      	ldr	r2, [pc, #592]	; (80017b0 <HAL_GPIO_Init+0x2ac>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d04c      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 8001564:	4a92      	ldr	r2, [pc, #584]	; (80017b0 <HAL_GPIO_Init+0x2ac>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d863      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 800156a:	4a92      	ldr	r2, [pc, #584]	; (80017b4 <HAL_GPIO_Init+0x2b0>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d046      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 8001570:	4a90      	ldr	r2, [pc, #576]	; (80017b4 <HAL_GPIO_Init+0x2b0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d85d      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 8001576:	2b12      	cmp	r3, #18
 8001578:	d82a      	bhi.n	80015d0 <HAL_GPIO_Init+0xcc>
 800157a:	2b12      	cmp	r3, #18
 800157c:	d859      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 800157e:	a201      	add	r2, pc, #4	; (adr r2, 8001584 <HAL_GPIO_Init+0x80>)
 8001580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001584:	080015ff 	.word	0x080015ff
 8001588:	080015d9 	.word	0x080015d9
 800158c:	080015eb 	.word	0x080015eb
 8001590:	0800162d 	.word	0x0800162d
 8001594:	08001633 	.word	0x08001633
 8001598:	08001633 	.word	0x08001633
 800159c:	08001633 	.word	0x08001633
 80015a0:	08001633 	.word	0x08001633
 80015a4:	08001633 	.word	0x08001633
 80015a8:	08001633 	.word	0x08001633
 80015ac:	08001633 	.word	0x08001633
 80015b0:	08001633 	.word	0x08001633
 80015b4:	08001633 	.word	0x08001633
 80015b8:	08001633 	.word	0x08001633
 80015bc:	08001633 	.word	0x08001633
 80015c0:	08001633 	.word	0x08001633
 80015c4:	08001633 	.word	0x08001633
 80015c8:	080015e1 	.word	0x080015e1
 80015cc:	080015f5 	.word	0x080015f5
 80015d0:	4a79      	ldr	r2, [pc, #484]	; (80017b8 <HAL_GPIO_Init+0x2b4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d013      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015d6:	e02c      	b.n	8001632 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	623b      	str	r3, [r7, #32]
          break;
 80015de:	e029      	b.n	8001634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	3304      	adds	r3, #4
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	e024      	b.n	8001634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	3308      	adds	r3, #8
 80015f0:	623b      	str	r3, [r7, #32]
          break;
 80015f2:	e01f      	b.n	8001634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	330c      	adds	r3, #12
 80015fa:	623b      	str	r3, [r7, #32]
          break;
 80015fc:	e01a      	b.n	8001634 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001606:	2304      	movs	r3, #4
 8001608:	623b      	str	r3, [r7, #32]
          break;
 800160a:	e013      	b.n	8001634 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d105      	bne.n	8001620 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001614:	2308      	movs	r3, #8
 8001616:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	611a      	str	r2, [r3, #16]
          break;
 800161e:	e009      	b.n	8001634 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001620:	2308      	movs	r3, #8
 8001622:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	615a      	str	r2, [r3, #20]
          break;
 800162a:	e003      	b.n	8001634 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
          break;
 8001630:	e000      	b.n	8001634 <HAL_GPIO_Init+0x130>
          break;
 8001632:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2bff      	cmp	r3, #255	; 0xff
 8001638:	d801      	bhi.n	800163e <HAL_GPIO_Init+0x13a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	e001      	b.n	8001642 <HAL_GPIO_Init+0x13e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3304      	adds	r3, #4
 8001642:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2bff      	cmp	r3, #255	; 0xff
 8001648:	d802      	bhi.n	8001650 <HAL_GPIO_Init+0x14c>
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	e002      	b.n	8001656 <HAL_GPIO_Init+0x152>
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	3b08      	subs	r3, #8
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	210f      	movs	r1, #15
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	fa01 f303 	lsl.w	r3, r1, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	401a      	ands	r2, r3
 8001668:	6a39      	ldr	r1, [r7, #32]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	fa01 f303 	lsl.w	r3, r1, r3
 8001670:	431a      	orrs	r2, r3
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 80b1 	beq.w	80017e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001684:	4b4d      	ldr	r3, [pc, #308]	; (80017bc <HAL_GPIO_Init+0x2b8>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a4c      	ldr	r2, [pc, #304]	; (80017bc <HAL_GPIO_Init+0x2b8>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b4a      	ldr	r3, [pc, #296]	; (80017bc <HAL_GPIO_Init+0x2b8>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800169c:	4a48      	ldr	r2, [pc, #288]	; (80017c0 <HAL_GPIO_Init+0x2bc>)
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	3302      	adds	r3, #2
 80016a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	220f      	movs	r2, #15
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a40      	ldr	r2, [pc, #256]	; (80017c4 <HAL_GPIO_Init+0x2c0>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d013      	beq.n	80016f0 <HAL_GPIO_Init+0x1ec>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a3f      	ldr	r2, [pc, #252]	; (80017c8 <HAL_GPIO_Init+0x2c4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d00d      	beq.n	80016ec <HAL_GPIO_Init+0x1e8>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a3e      	ldr	r2, [pc, #248]	; (80017cc <HAL_GPIO_Init+0x2c8>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d007      	beq.n	80016e8 <HAL_GPIO_Init+0x1e4>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a3d      	ldr	r2, [pc, #244]	; (80017d0 <HAL_GPIO_Init+0x2cc>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d101      	bne.n	80016e4 <HAL_GPIO_Init+0x1e0>
 80016e0:	2303      	movs	r3, #3
 80016e2:	e006      	b.n	80016f2 <HAL_GPIO_Init+0x1ee>
 80016e4:	2304      	movs	r3, #4
 80016e6:	e004      	b.n	80016f2 <HAL_GPIO_Init+0x1ee>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e002      	b.n	80016f2 <HAL_GPIO_Init+0x1ee>
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <HAL_GPIO_Init+0x1ee>
 80016f0:	2300      	movs	r3, #0
 80016f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f4:	f002 0203 	and.w	r2, r2, #3
 80016f8:	0092      	lsls	r2, r2, #2
 80016fa:	4093      	lsls	r3, r2
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	4313      	orrs	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001702:	492f      	ldr	r1, [pc, #188]	; (80017c0 <HAL_GPIO_Init+0x2bc>)
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3302      	adds	r3, #2
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800171c:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	492c      	ldr	r1, [pc, #176]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	608b      	str	r3, [r1, #8]
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	43db      	mvns	r3, r3
 8001732:	4928      	ldr	r1, [pc, #160]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001734:	4013      	ands	r3, r2
 8001736:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001744:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	4922      	ldr	r1, [pc, #136]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	60cb      	str	r3, [r1, #12]
 8001750:	e006      	b.n	8001760 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	43db      	mvns	r3, r3
 800175a:	491e      	ldr	r1, [pc, #120]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 800175c:	4013      	ands	r3, r2
 800175e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d006      	beq.n	800177a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4918      	ldr	r1, [pc, #96]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	43db      	mvns	r3, r3
 8001782:	4914      	ldr	r1, [pc, #80]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001784:	4013      	ands	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d021      	beq.n	80017d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	490e      	ldr	r1, [pc, #56]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]
 80017a0:	e021      	b.n	80017e6 <HAL_GPIO_Init+0x2e2>
 80017a2:	bf00      	nop
 80017a4:	10320000 	.word	0x10320000
 80017a8:	10310000 	.word	0x10310000
 80017ac:	10220000 	.word	0x10220000
 80017b0:	10210000 	.word	0x10210000
 80017b4:	10120000 	.word	0x10120000
 80017b8:	10110000 	.word	0x10110000
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40010000 	.word	0x40010000
 80017c4:	40010800 	.word	0x40010800
 80017c8:	40010c00 	.word	0x40010c00
 80017cc:	40011000 	.word	0x40011000
 80017d0:	40011400 	.word	0x40011400
 80017d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_GPIO_Init+0x304>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	43db      	mvns	r3, r3
 80017e0:	4909      	ldr	r1, [pc, #36]	; (8001808 <HAL_GPIO_Init+0x304>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	3301      	adds	r3, #1
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	fa22 f303 	lsr.w	r3, r2, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f47f ae8e 	bne.w	8001518 <HAL_GPIO_Init+0x14>
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	372c      	adds	r7, #44	; 0x2c
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	40010400 	.word	0x40010400

0800180c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	887b      	ldrh	r3, [r7, #2]
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e001      	b.n	800182e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	460b      	mov	r3, r1
 8001844:	807b      	strh	r3, [r7, #2]
 8001846:	4613      	mov	r3, r2
 8001848:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800184a:	787b      	ldrb	r3, [r7, #1]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001850:	887a      	ldrh	r2, [r7, #2]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001856:	e003      	b.n	8001860 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	041a      	lsls	r2, r3, #16
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	611a      	str	r2, [r3, #16]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800186a:	b480      	push	{r7}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800187c:	887a      	ldrh	r2, [r7, #2]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4013      	ands	r3, r2
 8001882:	041a      	lsls	r2, r3, #16
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	43d9      	mvns	r1, r3
 8001888:	887b      	ldrh	r3, [r7, #2]
 800188a:	400b      	ands	r3, r1
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	611a      	str	r2, [r3, #16]
}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e26c      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8087 	beq.w	80019ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018bc:	4b92      	ldr	r3, [pc, #584]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d00c      	beq.n	80018e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018c8:	4b8f      	ldr	r3, [pc, #572]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d112      	bne.n	80018fa <HAL_RCC_OscConfig+0x5e>
 80018d4:	4b8c      	ldr	r3, [pc, #560]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e0:	d10b      	bne.n	80018fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e2:	4b89      	ldr	r3, [pc, #548]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d06c      	beq.n	80019c8 <HAL_RCC_OscConfig+0x12c>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d168      	bne.n	80019c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e246      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001902:	d106      	bne.n	8001912 <HAL_RCC_OscConfig+0x76>
 8001904:	4b80      	ldr	r3, [pc, #512]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a7f      	ldr	r2, [pc, #508]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 800190a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	e02e      	b.n	8001970 <HAL_RCC_OscConfig+0xd4>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0x98>
 800191a:	4b7b      	ldr	r3, [pc, #492]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a7a      	ldr	r2, [pc, #488]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b78      	ldr	r3, [pc, #480]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a77      	ldr	r2, [pc, #476]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 800192c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e01d      	b.n	8001970 <HAL_RCC_OscConfig+0xd4>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0xbc>
 800193e:	4b72      	ldr	r3, [pc, #456]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a71      	ldr	r2, [pc, #452]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b6f      	ldr	r3, [pc, #444]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a6e      	ldr	r2, [pc, #440]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0xd4>
 8001958:	4b6b      	ldr	r3, [pc, #428]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a6a      	ldr	r2, [pc, #424]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 800195e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a67      	ldr	r2, [pc, #412]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 800196a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d013      	beq.n	80019a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fcac 	bl	80012d4 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff fca8 	bl	80012d4 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e1fa      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0xe4>
 800199e:	e014      	b.n	80019ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7ff fc98 	bl	80012d4 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a8:	f7ff fc94 	bl	80012d4 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e1e6      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ba:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x10c>
 80019c6:	e000      	b.n	80019ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d063      	beq.n	8001a9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019d6:	4b4c      	ldr	r3, [pc, #304]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00b      	beq.n	80019fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019e2:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d11c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x18c>
 80019ee:	4b46      	ldr	r3, [pc, #280]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d116      	bne.n	8001a28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fa:	4b43      	ldr	r3, [pc, #268]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <HAL_RCC_OscConfig+0x176>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e1ba      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4939      	ldr	r1, [pc, #228]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a26:	e03a      	b.n	8001a9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d020      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a30:	4b36      	ldr	r3, [pc, #216]	; (8001b0c <HAL_RCC_OscConfig+0x270>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff fc4d 	bl	80012d4 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fc49 	bl	80012d4 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e19b      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a50:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4927      	ldr	r1, [pc, #156]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
 8001a70:	e015      	b.n	8001a9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a72:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <HAL_RCC_OscConfig+0x270>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff fc2c 	bl	80012d4 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a80:	f7ff fc28 	bl	80012d4 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e17a      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a92:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d03a      	beq.n	8001b20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d019      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab8:	f7ff fc0c 	bl	80012d4 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7ff fc08 	bl	80012d4 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e15a      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f000 facc 	bl	800207c <RCC_Delay>
 8001ae4:	e01c      	b.n	8001b20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aec:	f7ff fbf2 	bl	80012d4 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af2:	e00f      	b.n	8001b14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af4:	f7ff fbee 	bl	80012d4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d908      	bls.n	8001b14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e140      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	42420000 	.word	0x42420000
 8001b10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b14:	4b9e      	ldr	r3, [pc, #632]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1e9      	bne.n	8001af4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80a6 	beq.w	8001c7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b32:	4b97      	ldr	r3, [pc, #604]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10d      	bne.n	8001b5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	4b94      	ldr	r3, [pc, #592]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a93      	ldr	r2, [pc, #588]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	61d3      	str	r3, [r2, #28]
 8001b4a:	4b91      	ldr	r3, [pc, #580]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b56:	2301      	movs	r3, #1
 8001b58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5a:	4b8e      	ldr	r3, [pc, #568]	; (8001d94 <HAL_RCC_OscConfig+0x4f8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d118      	bne.n	8001b98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b66:	4b8b      	ldr	r3, [pc, #556]	; (8001d94 <HAL_RCC_OscConfig+0x4f8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a8a      	ldr	r2, [pc, #552]	; (8001d94 <HAL_RCC_OscConfig+0x4f8>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b72:	f7ff fbaf 	bl	80012d4 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7a:	f7ff fbab 	bl	80012d4 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b64      	cmp	r3, #100	; 0x64
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0fd      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8c:	4b81      	ldr	r3, [pc, #516]	; (8001d94 <HAL_RCC_OscConfig+0x4f8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x312>
 8001ba0:	4b7b      	ldr	r3, [pc, #492]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a7a      	ldr	r2, [pc, #488]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	e02d      	b.n	8001c0a <HAL_RCC_OscConfig+0x36e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x334>
 8001bb6:	4b76      	ldr	r3, [pc, #472]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a75      	ldr	r2, [pc, #468]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	6213      	str	r3, [r2, #32]
 8001bc2:	4b73      	ldr	r3, [pc, #460]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4a72      	ldr	r2, [pc, #456]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	f023 0304 	bic.w	r3, r3, #4
 8001bcc:	6213      	str	r3, [r2, #32]
 8001bce:	e01c      	b.n	8001c0a <HAL_RCC_OscConfig+0x36e>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	d10c      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x356>
 8001bd8:	4b6d      	ldr	r3, [pc, #436]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4a6c      	ldr	r2, [pc, #432]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	f043 0304 	orr.w	r3, r3, #4
 8001be2:	6213      	str	r3, [r2, #32]
 8001be4:	4b6a      	ldr	r3, [pc, #424]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4a69      	ldr	r2, [pc, #420]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6213      	str	r3, [r2, #32]
 8001bf0:	e00b      	b.n	8001c0a <HAL_RCC_OscConfig+0x36e>
 8001bf2:	4b67      	ldr	r3, [pc, #412]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4a66      	ldr	r2, [pc, #408]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	6213      	str	r3, [r2, #32]
 8001bfe:	4b64      	ldr	r3, [pc, #400]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	4a63      	ldr	r2, [pc, #396]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	f023 0304 	bic.w	r3, r3, #4
 8001c08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d015      	beq.n	8001c3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c12:	f7ff fb5f 	bl	80012d4 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7ff fb5b 	bl	80012d4 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0ab      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c30:	4b57      	ldr	r3, [pc, #348]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0ee      	beq.n	8001c1a <HAL_RCC_OscConfig+0x37e>
 8001c3c:	e014      	b.n	8001c68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff fb49 	bl	80012d4 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c44:	e00a      	b.n	8001c5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c46:	f7ff fb45 	bl	80012d4 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e095      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5c:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1ee      	bne.n	8001c46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d105      	bne.n	8001c7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6e:	4b48      	ldr	r3, [pc, #288]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	4a47      	ldr	r2, [pc, #284]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8081 	beq.w	8001d86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c84:	4b42      	ldr	r3, [pc, #264]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d061      	beq.n	8001d54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d146      	bne.n	8001d26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c98:	4b3f      	ldr	r3, [pc, #252]	; (8001d98 <HAL_RCC_OscConfig+0x4fc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7ff fb19 	bl	80012d4 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7ff fb15 	bl	80012d4 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e067      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb8:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f0      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ccc:	d108      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cce:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	492d      	ldr	r1, [pc, #180]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a19      	ldr	r1, [r3, #32]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	4927      	ldr	r1, [pc, #156]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <HAL_RCC_OscConfig+0x4fc>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fae9 	bl	80012d4 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d06:	f7ff fae5 	bl	80012d4 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e037      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x46a>
 8001d24:	e02f      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <HAL_RCC_OscConfig+0x4fc>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fad2 	bl	80012d4 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d34:	f7ff face 	bl	80012d4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e020      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x498>
 8001d52:	e018      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e013      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_RCC_OscConfig+0x4f4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d106      	bne.n	8001d82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40007000 	.word	0x40007000
 8001d98:	42420060 	.word	0x42420060

08001d9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0d0      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001db0:	4b6a      	ldr	r3, [pc, #424]	; (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d910      	bls.n	8001de0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b67      	ldr	r3, [pc, #412]	; (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 0207 	bic.w	r2, r3, #7
 8001dc6:	4965      	ldr	r1, [pc, #404]	; (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dce:	4b63      	ldr	r3, [pc, #396]	; (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0b8      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d020      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df8:	4b59      	ldr	r3, [pc, #356]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4a58      	ldr	r2, [pc, #352]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e10:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4a52      	ldr	r2, [pc, #328]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e1c:	4b50      	ldr	r3, [pc, #320]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	494d      	ldr	r1, [pc, #308]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d040      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d115      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e07f      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5a:	4b41      	ldr	r3, [pc, #260]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e073      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6a:	4b3d      	ldr	r3, [pc, #244]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e06b      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e7a:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f023 0203 	bic.w	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4936      	ldr	r1, [pc, #216]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e8c:	f7ff fa22 	bl	80012d4 <HAL_GetTick>
 8001e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e94:	f7ff fa1e 	bl	80012d4 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e053      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 020c 	and.w	r2, r3, #12
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d1eb      	bne.n	8001e94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d210      	bcs.n	8001eec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 0207 	bic.w	r2, r3, #7
 8001ed2:	4922      	ldr	r1, [pc, #136]	; (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e032      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4916      	ldr	r1, [pc, #88]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	490e      	ldr	r1, [pc, #56]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f2a:	f000 f821 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	490a      	ldr	r1, [pc, #40]	; (8001f64 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3c:	5ccb      	ldrb	r3, [r1, r3]
 8001f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f42:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <HAL_RCC_ClockConfig+0x1cc>)
 8001f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x1d0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff f980 	bl	8001250 <HAL_InitTick>

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	40021000 	.word	0x40021000
 8001f64:	08003554 	.word	0x08003554
 8001f68:	20000028 	.word	0x20000028
 8001f6c:	2000002c 	.word	0x2000002c

08001f70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f8a:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d002      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x30>
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d003      	beq.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x36>
 8001f9e:	e027      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fa2:	613b      	str	r3, [r7, #16]
      break;
 8001fa4:	e027      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	0c9b      	lsrs	r3, r3, #18
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	4a17      	ldr	r2, [pc, #92]	; (800200c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fb0:	5cd3      	ldrb	r3, [r2, r3]
 8001fb2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d010      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	0c5b      	lsrs	r3, r3, #17
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	4a11      	ldr	r2, [pc, #68]	; (8002010 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fca:	5cd3      	ldrb	r3, [r2, r3]
 8001fcc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fd2:	fb02 f203 	mul.w	r2, r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	e004      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a0c      	ldr	r2, [pc, #48]	; (8002014 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fe4:	fb02 f303 	mul.w	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	613b      	str	r3, [r7, #16]
      break;
 8001fee:	e002      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ff2:	613b      	str	r3, [r7, #16]
      break;
 8001ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ff6:	693b      	ldr	r3, [r7, #16]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	007a1200 	.word	0x007a1200
 800200c:	0800356c 	.word	0x0800356c
 8002010:	0800357c 	.word	0x0800357c
 8002014:	003d0900 	.word	0x003d0900

08002018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800201c:	4b02      	ldr	r3, [pc, #8]	; (8002028 <HAL_RCC_GetHCLKFreq+0x10>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	20000028 	.word	0x20000028

0800202c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002030:	f7ff fff2 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4903      	ldr	r1, [pc, #12]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	08003564 	.word	0x08003564

08002054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002058:	f7ff ffde 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	0adb      	lsrs	r3, r3, #11
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	4903      	ldr	r1, [pc, #12]	; (8002078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	08003564 	.word	0x08003564

0800207c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <RCC_Delay+0x34>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <RCC_Delay+0x38>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0a5b      	lsrs	r3, r3, #9
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002098:	bf00      	nop
  }
  while (Delay --);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1e5a      	subs	r2, r3, #1
 800209e:	60fa      	str	r2, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f9      	bne.n	8002098 <RCC_Delay+0x1c>
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	20000028 	.word	0x20000028
 80020b4:	10624dd3 	.word	0x10624dd3

080020b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e041      	b.n	800214e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe ff78 	bl	8000fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3304      	adds	r3, #4
 80020f4:	4619      	mov	r1, r3
 80020f6:	4610      	mov	r0, r2
 80020f8:	f000 fa74 	bl	80025e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	d001      	beq.n	8002170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e03a      	b.n	80021e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <HAL_TIM_Base_Start_IT+0x98>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00e      	beq.n	80021b0 <HAL_TIM_Base_Start_IT+0x58>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219a:	d009      	beq.n	80021b0 <HAL_TIM_Base_Start_IT+0x58>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d004      	beq.n	80021b0 <HAL_TIM_Base_Start_IT+0x58>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d111      	bne.n	80021d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d010      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0201 	orr.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d2:	e007      	b.n	80021e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	40012c00 	.word	0x40012c00
 80021f4:	40000400 	.word	0x40000400
 80021f8:	40000800 	.word	0x40000800

080021fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b02      	cmp	r3, #2
 8002210:	d122      	bne.n	8002258 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b02      	cmp	r3, #2
 800221e:	d11b      	bne.n	8002258 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0202 	mvn.w	r2, #2
 8002228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f9b4 	bl	80025ac <HAL_TIM_IC_CaptureCallback>
 8002244:	e005      	b.n	8002252 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f9a7 	bl	800259a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f9b6 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b04      	cmp	r3, #4
 8002264:	d122      	bne.n	80022ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b04      	cmp	r3, #4
 8002272:	d11b      	bne.n	80022ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0204 	mvn.w	r2, #4
 800227c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f98a 	bl	80025ac <HAL_TIM_IC_CaptureCallback>
 8002298:	e005      	b.n	80022a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f97d 	bl	800259a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f98c 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d122      	bne.n	8002300 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d11b      	bne.n	8002300 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0208 	mvn.w	r2, #8
 80022d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2204      	movs	r2, #4
 80022d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f960 	bl	80025ac <HAL_TIM_IC_CaptureCallback>
 80022ec:	e005      	b.n	80022fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f953 	bl	800259a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f962 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b10      	cmp	r3, #16
 800230c:	d122      	bne.n	8002354 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b10      	cmp	r3, #16
 800231a:	d11b      	bne.n	8002354 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0210 	mvn.w	r2, #16
 8002324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2208      	movs	r2, #8
 800232a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f936 	bl	80025ac <HAL_TIM_IC_CaptureCallback>
 8002340:	e005      	b.n	800234e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f929 	bl	800259a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f938 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b01      	cmp	r3, #1
 8002360:	d10e      	bne.n	8002380 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b01      	cmp	r3, #1
 800236e:	d107      	bne.n	8002380 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0201 	mvn.w	r2, #1
 8002378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fd94 	bl	8000ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238a:	2b80      	cmp	r3, #128	; 0x80
 800238c:	d10e      	bne.n	80023ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002398:	2b80      	cmp	r3, #128	; 0x80
 800239a:	d107      	bne.n	80023ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fa7b 	bl	80028a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b40      	cmp	r3, #64	; 0x40
 80023b8:	d10e      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d107      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f8fc 	bl	80025d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d10e      	bne.n	8002404 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d107      	bne.n	8002404 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0220 	mvn.w	r2, #32
 80023fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fa46 	bl	8002890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_TIM_ConfigClockSource+0x1c>
 8002424:	2302      	movs	r3, #2
 8002426:	e0b4      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x186>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800244e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002460:	d03e      	beq.n	80024e0 <HAL_TIM_ConfigClockSource+0xd4>
 8002462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002466:	f200 8087 	bhi.w	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 800246a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246e:	f000 8086 	beq.w	800257e <HAL_TIM_ConfigClockSource+0x172>
 8002472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002476:	d87f      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b70      	cmp	r3, #112	; 0x70
 800247a:	d01a      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0xa6>
 800247c:	2b70      	cmp	r3, #112	; 0x70
 800247e:	d87b      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002480:	2b60      	cmp	r3, #96	; 0x60
 8002482:	d050      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0x11a>
 8002484:	2b60      	cmp	r3, #96	; 0x60
 8002486:	d877      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002488:	2b50      	cmp	r3, #80	; 0x50
 800248a:	d03c      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0xfa>
 800248c:	2b50      	cmp	r3, #80	; 0x50
 800248e:	d873      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	d058      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x13a>
 8002494:	2b40      	cmp	r3, #64	; 0x40
 8002496:	d86f      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002498:	2b30      	cmp	r3, #48	; 0x30
 800249a:	d064      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x15a>
 800249c:	2b30      	cmp	r3, #48	; 0x30
 800249e:	d86b      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d060      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x15a>
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d867      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d05c      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x15a>
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d05a      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x15a>
 80024b0:	e062      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6899      	ldr	r1, [r3, #8]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f000 f968 	bl	8002796 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	609a      	str	r2, [r3, #8]
      break;
 80024de:	e04f      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6899      	ldr	r1, [r3, #8]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f000 f951 	bl	8002796 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002502:	609a      	str	r2, [r3, #8]
      break;
 8002504:	e03c      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6859      	ldr	r1, [r3, #4]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	461a      	mov	r2, r3
 8002514:	f000 f8c8 	bl	80026a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2150      	movs	r1, #80	; 0x50
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f91f 	bl	8002762 <TIM_ITRx_SetConfig>
      break;
 8002524:	e02c      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6859      	ldr	r1, [r3, #4]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	461a      	mov	r2, r3
 8002534:	f000 f8e6 	bl	8002704 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2160      	movs	r1, #96	; 0x60
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f90f 	bl	8002762 <TIM_ITRx_SetConfig>
      break;
 8002544:	e01c      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6859      	ldr	r1, [r3, #4]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	461a      	mov	r2, r3
 8002554:	f000 f8a8 	bl	80026a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2140      	movs	r1, #64	; 0x40
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f8ff 	bl	8002762 <TIM_ITRx_SetConfig>
      break;
 8002564:	e00c      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	4610      	mov	r0, r2
 8002572:	f000 f8f6 	bl	8002762 <TIM_ITRx_SetConfig>
      break;
 8002576:	e003      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
      break;
 800257c:	e000      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800257e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
	...

080025e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a29      	ldr	r2, [pc, #164]	; (800269c <TIM_Base_SetConfig+0xb8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00b      	beq.n	8002614 <TIM_Base_SetConfig+0x30>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002602:	d007      	beq.n	8002614 <TIM_Base_SetConfig+0x30>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a26      	ldr	r2, [pc, #152]	; (80026a0 <TIM_Base_SetConfig+0xbc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d003      	beq.n	8002614 <TIM_Base_SetConfig+0x30>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a25      	ldr	r2, [pc, #148]	; (80026a4 <TIM_Base_SetConfig+0xc0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d108      	bne.n	8002626 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a1c      	ldr	r2, [pc, #112]	; (800269c <TIM_Base_SetConfig+0xb8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00b      	beq.n	8002646 <TIM_Base_SetConfig+0x62>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002634:	d007      	beq.n	8002646 <TIM_Base_SetConfig+0x62>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <TIM_Base_SetConfig+0xbc>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d003      	beq.n	8002646 <TIM_Base_SetConfig+0x62>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a18      	ldr	r2, [pc, #96]	; (80026a4 <TIM_Base_SetConfig+0xc0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d108      	bne.n	8002658 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a07      	ldr	r2, [pc, #28]	; (800269c <TIM_Base_SetConfig+0xb8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d103      	bne.n	800268c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	615a      	str	r2, [r3, #20]
}
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	40012c00 	.word	0x40012c00
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40000800 	.word	0x40000800

080026a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	f023 0201 	bic.w	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f023 030a 	bic.w	r3, r3, #10
 80026e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	621a      	str	r2, [r3, #32]
}
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	f023 0210 	bic.w	r2, r3, #16
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800272e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	031b      	lsls	r3, r3, #12
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002740:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	621a      	str	r2, [r3, #32]
}
 8002758:	bf00      	nop
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002762:	b480      	push	{r7}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	f043 0307 	orr.w	r3, r3, #7
 8002784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	609a      	str	r2, [r3, #8]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002796:	b480      	push	{r7}
 8002798:	b087      	sub	sp, #28
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	021a      	lsls	r2, r3, #8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	431a      	orrs	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4313      	orrs	r3, r2
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	609a      	str	r2, [r3, #8]
}
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e046      	b.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a16      	ldr	r2, [pc, #88]	; (8002884 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00e      	beq.n	800284e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002838:	d009      	beq.n	800284e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d004      	beq.n	800284e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a10      	ldr	r2, [pc, #64]	; (800288c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10c      	bne.n	8002868 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	4313      	orrs	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40000400 	.word	0x40000400
 800288c:	40000800 	.word	0x40000800

08002890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e042      	b.n	800294c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe fbba 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2224      	movs	r2, #36	; 0x24
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f91d 	bl	8002b38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800290c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800291c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800292c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	; 0x28
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	4613      	mov	r3, r2
 8002962:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b20      	cmp	r3, #32
 8002972:	d16d      	bne.n	8002a50 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_UART_Transmit+0x2c>
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e066      	b.n	8002a52 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2221      	movs	r2, #33	; 0x21
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002992:	f7fe fc9f 	bl	80012d4 <HAL_GetTick>
 8002996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	88fa      	ldrh	r2, [r7, #6]
 800299c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	88fa      	ldrh	r2, [r7, #6]
 80029a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ac:	d108      	bne.n	80029c0 <HAL_UART_Transmit+0x6c>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d104      	bne.n	80029c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	e003      	b.n	80029c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029c8:	e02a      	b.n	8002a20 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2200      	movs	r2, #0
 80029d2:	2180      	movs	r1, #128	; 0x80
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f840 	bl	8002a5a <UART_WaitOnFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e036      	b.n	8002a52 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10b      	bne.n	8002a02 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	3302      	adds	r3, #2
 80029fe:	61bb      	str	r3, [r7, #24]
 8002a00:	e007      	b.n	8002a12 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	781a      	ldrb	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1cf      	bne.n	80029ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2140      	movs	r1, #64	; 0x40
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f810 	bl	8002a5a <UART_WaitOnFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e006      	b.n	8002a52 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e000      	b.n	8002a52 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3720      	adds	r7, #32
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b090      	sub	sp, #64	; 0x40
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a6a:	e050      	b.n	8002b0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a72:	d04c      	beq.n	8002b0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d007      	beq.n	8002a8a <UART_WaitOnFlagUntilTimeout+0x30>
 8002a7a:	f7fe fc2b 	bl	80012d4 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d241      	bcs.n	8002b0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	330c      	adds	r3, #12
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	e853 3f00 	ldrex	r3, [r3]
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	330c      	adds	r3, #12
 8002aa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aaa:	637a      	str	r2, [r7, #52]	; 0x34
 8002aac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ab2:	e841 2300 	strex	r3, r2, [r1]
 8002ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e5      	bne.n	8002a8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3314      	adds	r3, #20
 8002ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	e853 3f00 	ldrex	r3, [r3]
 8002acc:	613b      	str	r3, [r7, #16]
   return(result);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3314      	adds	r3, #20
 8002adc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ade:	623a      	str	r2, [r7, #32]
 8002ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae2:	69f9      	ldr	r1, [r7, #28]
 8002ae4:	6a3a      	ldr	r2, [r7, #32]
 8002ae6:	e841 2300 	strex	r3, r2, [r1]
 8002aea:	61bb      	str	r3, [r7, #24]
   return(result);
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1e5      	bne.n	8002abe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e00f      	b.n	8002b2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4013      	ands	r3, r2
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d09f      	beq.n	8002a6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3740      	adds	r7, #64	; 0x40
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b72:	f023 030c 	bic.w	r3, r3, #12
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699a      	ldr	r2, [r3, #24]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a2c      	ldr	r2, [pc, #176]	; (8002c4c <UART_SetConfig+0x114>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d103      	bne.n	8002ba8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ba0:	f7ff fa58 	bl	8002054 <HAL_RCC_GetPCLK2Freq>
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	e002      	b.n	8002bae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ba8:	f7ff fa40 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 8002bac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009a      	lsls	r2, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	4a22      	ldr	r2, [pc, #136]	; (8002c50 <UART_SetConfig+0x118>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	0119      	lsls	r1, r3, #4
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009a      	lsls	r2, r3, #2
 8002bd8:	441a      	add	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002be4:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <UART_SetConfig+0x118>)
 8002be6:	fba3 0302 	umull	r0, r3, r3, r2
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	2064      	movs	r0, #100	; 0x64
 8002bee:	fb00 f303 	mul.w	r3, r0, r3
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	3332      	adds	r3, #50	; 0x32
 8002bf8:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <UART_SetConfig+0x118>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c04:	4419      	add	r1, r3
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009a      	lsls	r2, r3, #2
 8002c10:	441a      	add	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <UART_SetConfig+0x118>)
 8002c1e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2064      	movs	r0, #100	; 0x64
 8002c26:	fb00 f303 	mul.w	r3, r0, r3
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	3332      	adds	r3, #50	; 0x32
 8002c30:	4a07      	ldr	r2, [pc, #28]	; (8002c50 <UART_SetConfig+0x118>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	f003 020f 	and.w	r2, r3, #15
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	440a      	add	r2, r1
 8002c42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	51eb851f 	.word	0x51eb851f

08002c54 <__errno>:
 8002c54:	4b01      	ldr	r3, [pc, #4]	; (8002c5c <__errno+0x8>)
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000034 	.word	0x20000034

08002c60 <__libc_init_array>:
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	2600      	movs	r6, #0
 8002c64:	4d0c      	ldr	r5, [pc, #48]	; (8002c98 <__libc_init_array+0x38>)
 8002c66:	4c0d      	ldr	r4, [pc, #52]	; (8002c9c <__libc_init_array+0x3c>)
 8002c68:	1b64      	subs	r4, r4, r5
 8002c6a:	10a4      	asrs	r4, r4, #2
 8002c6c:	42a6      	cmp	r6, r4
 8002c6e:	d109      	bne.n	8002c84 <__libc_init_array+0x24>
 8002c70:	f000 fc5c 	bl	800352c <_init>
 8002c74:	2600      	movs	r6, #0
 8002c76:	4d0a      	ldr	r5, [pc, #40]	; (8002ca0 <__libc_init_array+0x40>)
 8002c78:	4c0a      	ldr	r4, [pc, #40]	; (8002ca4 <__libc_init_array+0x44>)
 8002c7a:	1b64      	subs	r4, r4, r5
 8002c7c:	10a4      	asrs	r4, r4, #2
 8002c7e:	42a6      	cmp	r6, r4
 8002c80:	d105      	bne.n	8002c8e <__libc_init_array+0x2e>
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c88:	4798      	blx	r3
 8002c8a:	3601      	adds	r6, #1
 8002c8c:	e7ee      	b.n	8002c6c <__libc_init_array+0xc>
 8002c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c92:	4798      	blx	r3
 8002c94:	3601      	adds	r6, #1
 8002c96:	e7f2      	b.n	8002c7e <__libc_init_array+0x1e>
 8002c98:	080035b4 	.word	0x080035b4
 8002c9c:	080035b4 	.word	0x080035b4
 8002ca0:	080035b4 	.word	0x080035b4
 8002ca4:	080035b8 	.word	0x080035b8

08002ca8 <memset>:
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4402      	add	r2, r0
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d100      	bne.n	8002cb2 <memset+0xa>
 8002cb0:	4770      	bx	lr
 8002cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cb6:	e7f9      	b.n	8002cac <memset+0x4>

08002cb8 <siprintf>:
 8002cb8:	b40e      	push	{r1, r2, r3}
 8002cba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002cbe:	b500      	push	{lr}
 8002cc0:	b09c      	sub	sp, #112	; 0x70
 8002cc2:	ab1d      	add	r3, sp, #116	; 0x74
 8002cc4:	9002      	str	r0, [sp, #8]
 8002cc6:	9006      	str	r0, [sp, #24]
 8002cc8:	9107      	str	r1, [sp, #28]
 8002cca:	9104      	str	r1, [sp, #16]
 8002ccc:	4808      	ldr	r0, [pc, #32]	; (8002cf0 <siprintf+0x38>)
 8002cce:	4909      	ldr	r1, [pc, #36]	; (8002cf4 <siprintf+0x3c>)
 8002cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cd4:	9105      	str	r1, [sp, #20]
 8002cd6:	6800      	ldr	r0, [r0, #0]
 8002cd8:	a902      	add	r1, sp, #8
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	f000 f868 	bl	8002db0 <_svfiprintf_r>
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	9b02      	ldr	r3, [sp, #8]
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	b01c      	add	sp, #112	; 0x70
 8002ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cec:	b003      	add	sp, #12
 8002cee:	4770      	bx	lr
 8002cf0:	20000034 	.word	0x20000034
 8002cf4:	ffff0208 	.word	0xffff0208

08002cf8 <__ssputs_r>:
 8002cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cfc:	688e      	ldr	r6, [r1, #8]
 8002cfe:	4682      	mov	sl, r0
 8002d00:	429e      	cmp	r6, r3
 8002d02:	460c      	mov	r4, r1
 8002d04:	4690      	mov	r8, r2
 8002d06:	461f      	mov	r7, r3
 8002d08:	d838      	bhi.n	8002d7c <__ssputs_r+0x84>
 8002d0a:	898a      	ldrh	r2, [r1, #12]
 8002d0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d10:	d032      	beq.n	8002d78 <__ssputs_r+0x80>
 8002d12:	6825      	ldr	r5, [r4, #0]
 8002d14:	6909      	ldr	r1, [r1, #16]
 8002d16:	3301      	adds	r3, #1
 8002d18:	eba5 0901 	sub.w	r9, r5, r1
 8002d1c:	6965      	ldr	r5, [r4, #20]
 8002d1e:	444b      	add	r3, r9
 8002d20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d28:	106d      	asrs	r5, r5, #1
 8002d2a:	429d      	cmp	r5, r3
 8002d2c:	bf38      	it	cc
 8002d2e:	461d      	movcc	r5, r3
 8002d30:	0553      	lsls	r3, r2, #21
 8002d32:	d531      	bpl.n	8002d98 <__ssputs_r+0xa0>
 8002d34:	4629      	mov	r1, r5
 8002d36:	f000 fb53 	bl	80033e0 <_malloc_r>
 8002d3a:	4606      	mov	r6, r0
 8002d3c:	b950      	cbnz	r0, 8002d54 <__ssputs_r+0x5c>
 8002d3e:	230c      	movs	r3, #12
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	f8ca 3000 	str.w	r3, [sl]
 8002d48:	89a3      	ldrh	r3, [r4, #12]
 8002d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d4e:	81a3      	strh	r3, [r4, #12]
 8002d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d54:	464a      	mov	r2, r9
 8002d56:	6921      	ldr	r1, [r4, #16]
 8002d58:	f000 face 	bl	80032f8 <memcpy>
 8002d5c:	89a3      	ldrh	r3, [r4, #12]
 8002d5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d66:	81a3      	strh	r3, [r4, #12]
 8002d68:	6126      	str	r6, [r4, #16]
 8002d6a:	444e      	add	r6, r9
 8002d6c:	6026      	str	r6, [r4, #0]
 8002d6e:	463e      	mov	r6, r7
 8002d70:	6165      	str	r5, [r4, #20]
 8002d72:	eba5 0509 	sub.w	r5, r5, r9
 8002d76:	60a5      	str	r5, [r4, #8]
 8002d78:	42be      	cmp	r6, r7
 8002d7a:	d900      	bls.n	8002d7e <__ssputs_r+0x86>
 8002d7c:	463e      	mov	r6, r7
 8002d7e:	4632      	mov	r2, r6
 8002d80:	4641      	mov	r1, r8
 8002d82:	6820      	ldr	r0, [r4, #0]
 8002d84:	f000 fac6 	bl	8003314 <memmove>
 8002d88:	68a3      	ldr	r3, [r4, #8]
 8002d8a:	6822      	ldr	r2, [r4, #0]
 8002d8c:	1b9b      	subs	r3, r3, r6
 8002d8e:	4432      	add	r2, r6
 8002d90:	2000      	movs	r0, #0
 8002d92:	60a3      	str	r3, [r4, #8]
 8002d94:	6022      	str	r2, [r4, #0]
 8002d96:	e7db      	b.n	8002d50 <__ssputs_r+0x58>
 8002d98:	462a      	mov	r2, r5
 8002d9a:	f000 fb7b 	bl	8003494 <_realloc_r>
 8002d9e:	4606      	mov	r6, r0
 8002da0:	2800      	cmp	r0, #0
 8002da2:	d1e1      	bne.n	8002d68 <__ssputs_r+0x70>
 8002da4:	4650      	mov	r0, sl
 8002da6:	6921      	ldr	r1, [r4, #16]
 8002da8:	f000 face 	bl	8003348 <_free_r>
 8002dac:	e7c7      	b.n	8002d3e <__ssputs_r+0x46>
	...

08002db0 <_svfiprintf_r>:
 8002db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db4:	4698      	mov	r8, r3
 8002db6:	898b      	ldrh	r3, [r1, #12]
 8002db8:	4607      	mov	r7, r0
 8002dba:	061b      	lsls	r3, r3, #24
 8002dbc:	460d      	mov	r5, r1
 8002dbe:	4614      	mov	r4, r2
 8002dc0:	b09d      	sub	sp, #116	; 0x74
 8002dc2:	d50e      	bpl.n	8002de2 <_svfiprintf_r+0x32>
 8002dc4:	690b      	ldr	r3, [r1, #16]
 8002dc6:	b963      	cbnz	r3, 8002de2 <_svfiprintf_r+0x32>
 8002dc8:	2140      	movs	r1, #64	; 0x40
 8002dca:	f000 fb09 	bl	80033e0 <_malloc_r>
 8002dce:	6028      	str	r0, [r5, #0]
 8002dd0:	6128      	str	r0, [r5, #16]
 8002dd2:	b920      	cbnz	r0, 8002dde <_svfiprintf_r+0x2e>
 8002dd4:	230c      	movs	r3, #12
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ddc:	e0d1      	b.n	8002f82 <_svfiprintf_r+0x1d2>
 8002dde:	2340      	movs	r3, #64	; 0x40
 8002de0:	616b      	str	r3, [r5, #20]
 8002de2:	2300      	movs	r3, #0
 8002de4:	9309      	str	r3, [sp, #36]	; 0x24
 8002de6:	2320      	movs	r3, #32
 8002de8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002dec:	2330      	movs	r3, #48	; 0x30
 8002dee:	f04f 0901 	mov.w	r9, #1
 8002df2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002df6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002f9c <_svfiprintf_r+0x1ec>
 8002dfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002dfe:	4623      	mov	r3, r4
 8002e00:	469a      	mov	sl, r3
 8002e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e06:	b10a      	cbz	r2, 8002e0c <_svfiprintf_r+0x5c>
 8002e08:	2a25      	cmp	r2, #37	; 0x25
 8002e0a:	d1f9      	bne.n	8002e00 <_svfiprintf_r+0x50>
 8002e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8002e10:	d00b      	beq.n	8002e2a <_svfiprintf_r+0x7a>
 8002e12:	465b      	mov	r3, fp
 8002e14:	4622      	mov	r2, r4
 8002e16:	4629      	mov	r1, r5
 8002e18:	4638      	mov	r0, r7
 8002e1a:	f7ff ff6d 	bl	8002cf8 <__ssputs_r>
 8002e1e:	3001      	adds	r0, #1
 8002e20:	f000 80aa 	beq.w	8002f78 <_svfiprintf_r+0x1c8>
 8002e24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e26:	445a      	add	r2, fp
 8002e28:	9209      	str	r2, [sp, #36]	; 0x24
 8002e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80a2 	beq.w	8002f78 <_svfiprintf_r+0x1c8>
 8002e34:	2300      	movs	r3, #0
 8002e36:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e3e:	f10a 0a01 	add.w	sl, sl, #1
 8002e42:	9304      	str	r3, [sp, #16]
 8002e44:	9307      	str	r3, [sp, #28]
 8002e46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e4a:	931a      	str	r3, [sp, #104]	; 0x68
 8002e4c:	4654      	mov	r4, sl
 8002e4e:	2205      	movs	r2, #5
 8002e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e54:	4851      	ldr	r0, [pc, #324]	; (8002f9c <_svfiprintf_r+0x1ec>)
 8002e56:	f000 fa41 	bl	80032dc <memchr>
 8002e5a:	9a04      	ldr	r2, [sp, #16]
 8002e5c:	b9d8      	cbnz	r0, 8002e96 <_svfiprintf_r+0xe6>
 8002e5e:	06d0      	lsls	r0, r2, #27
 8002e60:	bf44      	itt	mi
 8002e62:	2320      	movmi	r3, #32
 8002e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e68:	0711      	lsls	r1, r2, #28
 8002e6a:	bf44      	itt	mi
 8002e6c:	232b      	movmi	r3, #43	; 0x2b
 8002e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e72:	f89a 3000 	ldrb.w	r3, [sl]
 8002e76:	2b2a      	cmp	r3, #42	; 0x2a
 8002e78:	d015      	beq.n	8002ea6 <_svfiprintf_r+0xf6>
 8002e7a:	4654      	mov	r4, sl
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f04f 0c0a 	mov.w	ip, #10
 8002e82:	9a07      	ldr	r2, [sp, #28]
 8002e84:	4621      	mov	r1, r4
 8002e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e8a:	3b30      	subs	r3, #48	; 0x30
 8002e8c:	2b09      	cmp	r3, #9
 8002e8e:	d94e      	bls.n	8002f2e <_svfiprintf_r+0x17e>
 8002e90:	b1b0      	cbz	r0, 8002ec0 <_svfiprintf_r+0x110>
 8002e92:	9207      	str	r2, [sp, #28]
 8002e94:	e014      	b.n	8002ec0 <_svfiprintf_r+0x110>
 8002e96:	eba0 0308 	sub.w	r3, r0, r8
 8002e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	46a2      	mov	sl, r4
 8002ea2:	9304      	str	r3, [sp, #16]
 8002ea4:	e7d2      	b.n	8002e4c <_svfiprintf_r+0x9c>
 8002ea6:	9b03      	ldr	r3, [sp, #12]
 8002ea8:	1d19      	adds	r1, r3, #4
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	9103      	str	r1, [sp, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	bfbb      	ittet	lt
 8002eb2:	425b      	neglt	r3, r3
 8002eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8002eb8:	9307      	strge	r3, [sp, #28]
 8002eba:	9307      	strlt	r3, [sp, #28]
 8002ebc:	bfb8      	it	lt
 8002ebe:	9204      	strlt	r2, [sp, #16]
 8002ec0:	7823      	ldrb	r3, [r4, #0]
 8002ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8002ec4:	d10c      	bne.n	8002ee0 <_svfiprintf_r+0x130>
 8002ec6:	7863      	ldrb	r3, [r4, #1]
 8002ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8002eca:	d135      	bne.n	8002f38 <_svfiprintf_r+0x188>
 8002ecc:	9b03      	ldr	r3, [sp, #12]
 8002ece:	3402      	adds	r4, #2
 8002ed0:	1d1a      	adds	r2, r3, #4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	9203      	str	r2, [sp, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	bfb8      	it	lt
 8002eda:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ede:	9305      	str	r3, [sp, #20]
 8002ee0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002fac <_svfiprintf_r+0x1fc>
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	4650      	mov	r0, sl
 8002ee8:	7821      	ldrb	r1, [r4, #0]
 8002eea:	f000 f9f7 	bl	80032dc <memchr>
 8002eee:	b140      	cbz	r0, 8002f02 <_svfiprintf_r+0x152>
 8002ef0:	2340      	movs	r3, #64	; 0x40
 8002ef2:	eba0 000a 	sub.w	r0, r0, sl
 8002ef6:	fa03 f000 	lsl.w	r0, r3, r0
 8002efa:	9b04      	ldr	r3, [sp, #16]
 8002efc:	3401      	adds	r4, #1
 8002efe:	4303      	orrs	r3, r0
 8002f00:	9304      	str	r3, [sp, #16]
 8002f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f06:	2206      	movs	r2, #6
 8002f08:	4825      	ldr	r0, [pc, #148]	; (8002fa0 <_svfiprintf_r+0x1f0>)
 8002f0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f0e:	f000 f9e5 	bl	80032dc <memchr>
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d038      	beq.n	8002f88 <_svfiprintf_r+0x1d8>
 8002f16:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <_svfiprintf_r+0x1f4>)
 8002f18:	bb1b      	cbnz	r3, 8002f62 <_svfiprintf_r+0x1b2>
 8002f1a:	9b03      	ldr	r3, [sp, #12]
 8002f1c:	3307      	adds	r3, #7
 8002f1e:	f023 0307 	bic.w	r3, r3, #7
 8002f22:	3308      	adds	r3, #8
 8002f24:	9303      	str	r3, [sp, #12]
 8002f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f28:	4433      	add	r3, r6
 8002f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f2c:	e767      	b.n	8002dfe <_svfiprintf_r+0x4e>
 8002f2e:	460c      	mov	r4, r1
 8002f30:	2001      	movs	r0, #1
 8002f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f36:	e7a5      	b.n	8002e84 <_svfiprintf_r+0xd4>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f04f 0c0a 	mov.w	ip, #10
 8002f3e:	4619      	mov	r1, r3
 8002f40:	3401      	adds	r4, #1
 8002f42:	9305      	str	r3, [sp, #20]
 8002f44:	4620      	mov	r0, r4
 8002f46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f4a:	3a30      	subs	r2, #48	; 0x30
 8002f4c:	2a09      	cmp	r2, #9
 8002f4e:	d903      	bls.n	8002f58 <_svfiprintf_r+0x1a8>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0c5      	beq.n	8002ee0 <_svfiprintf_r+0x130>
 8002f54:	9105      	str	r1, [sp, #20]
 8002f56:	e7c3      	b.n	8002ee0 <_svfiprintf_r+0x130>
 8002f58:	4604      	mov	r4, r0
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f60:	e7f0      	b.n	8002f44 <_svfiprintf_r+0x194>
 8002f62:	ab03      	add	r3, sp, #12
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	462a      	mov	r2, r5
 8002f68:	4638      	mov	r0, r7
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <_svfiprintf_r+0x1f8>)
 8002f6c:	a904      	add	r1, sp, #16
 8002f6e:	f3af 8000 	nop.w
 8002f72:	1c42      	adds	r2, r0, #1
 8002f74:	4606      	mov	r6, r0
 8002f76:	d1d6      	bne.n	8002f26 <_svfiprintf_r+0x176>
 8002f78:	89ab      	ldrh	r3, [r5, #12]
 8002f7a:	065b      	lsls	r3, r3, #25
 8002f7c:	f53f af2c 	bmi.w	8002dd8 <_svfiprintf_r+0x28>
 8002f80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f82:	b01d      	add	sp, #116	; 0x74
 8002f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f88:	ab03      	add	r3, sp, #12
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	462a      	mov	r2, r5
 8002f8e:	4638      	mov	r0, r7
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <_svfiprintf_r+0x1f8>)
 8002f92:	a904      	add	r1, sp, #16
 8002f94:	f000 f87c 	bl	8003090 <_printf_i>
 8002f98:	e7eb      	b.n	8002f72 <_svfiprintf_r+0x1c2>
 8002f9a:	bf00      	nop
 8002f9c:	0800357e 	.word	0x0800357e
 8002fa0:	08003588 	.word	0x08003588
 8002fa4:	00000000 	.word	0x00000000
 8002fa8:	08002cf9 	.word	0x08002cf9
 8002fac:	08003584 	.word	0x08003584

08002fb0 <_printf_common>:
 8002fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fb4:	4616      	mov	r6, r2
 8002fb6:	4699      	mov	r9, r3
 8002fb8:	688a      	ldr	r2, [r1, #8]
 8002fba:	690b      	ldr	r3, [r1, #16]
 8002fbc:	4607      	mov	r7, r0
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	bfb8      	it	lt
 8002fc2:	4613      	movlt	r3, r2
 8002fc4:	6033      	str	r3, [r6, #0]
 8002fc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fca:	460c      	mov	r4, r1
 8002fcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fd0:	b10a      	cbz	r2, 8002fd6 <_printf_common+0x26>
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	6033      	str	r3, [r6, #0]
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	0699      	lsls	r1, r3, #26
 8002fda:	bf42      	ittt	mi
 8002fdc:	6833      	ldrmi	r3, [r6, #0]
 8002fde:	3302      	addmi	r3, #2
 8002fe0:	6033      	strmi	r3, [r6, #0]
 8002fe2:	6825      	ldr	r5, [r4, #0]
 8002fe4:	f015 0506 	ands.w	r5, r5, #6
 8002fe8:	d106      	bne.n	8002ff8 <_printf_common+0x48>
 8002fea:	f104 0a19 	add.w	sl, r4, #25
 8002fee:	68e3      	ldr	r3, [r4, #12]
 8002ff0:	6832      	ldr	r2, [r6, #0]
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	42ab      	cmp	r3, r5
 8002ff6:	dc28      	bgt.n	800304a <_printf_common+0x9a>
 8002ff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ffc:	1e13      	subs	r3, r2, #0
 8002ffe:	6822      	ldr	r2, [r4, #0]
 8003000:	bf18      	it	ne
 8003002:	2301      	movne	r3, #1
 8003004:	0692      	lsls	r2, r2, #26
 8003006:	d42d      	bmi.n	8003064 <_printf_common+0xb4>
 8003008:	4649      	mov	r1, r9
 800300a:	4638      	mov	r0, r7
 800300c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003010:	47c0      	blx	r8
 8003012:	3001      	adds	r0, #1
 8003014:	d020      	beq.n	8003058 <_printf_common+0xa8>
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	68e5      	ldr	r5, [r4, #12]
 800301a:	f003 0306 	and.w	r3, r3, #6
 800301e:	2b04      	cmp	r3, #4
 8003020:	bf18      	it	ne
 8003022:	2500      	movne	r5, #0
 8003024:	6832      	ldr	r2, [r6, #0]
 8003026:	f04f 0600 	mov.w	r6, #0
 800302a:	68a3      	ldr	r3, [r4, #8]
 800302c:	bf08      	it	eq
 800302e:	1aad      	subeq	r5, r5, r2
 8003030:	6922      	ldr	r2, [r4, #16]
 8003032:	bf08      	it	eq
 8003034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003038:	4293      	cmp	r3, r2
 800303a:	bfc4      	itt	gt
 800303c:	1a9b      	subgt	r3, r3, r2
 800303e:	18ed      	addgt	r5, r5, r3
 8003040:	341a      	adds	r4, #26
 8003042:	42b5      	cmp	r5, r6
 8003044:	d11a      	bne.n	800307c <_printf_common+0xcc>
 8003046:	2000      	movs	r0, #0
 8003048:	e008      	b.n	800305c <_printf_common+0xac>
 800304a:	2301      	movs	r3, #1
 800304c:	4652      	mov	r2, sl
 800304e:	4649      	mov	r1, r9
 8003050:	4638      	mov	r0, r7
 8003052:	47c0      	blx	r8
 8003054:	3001      	adds	r0, #1
 8003056:	d103      	bne.n	8003060 <_printf_common+0xb0>
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003060:	3501      	adds	r5, #1
 8003062:	e7c4      	b.n	8002fee <_printf_common+0x3e>
 8003064:	2030      	movs	r0, #48	; 0x30
 8003066:	18e1      	adds	r1, r4, r3
 8003068:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003072:	4422      	add	r2, r4
 8003074:	3302      	adds	r3, #2
 8003076:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800307a:	e7c5      	b.n	8003008 <_printf_common+0x58>
 800307c:	2301      	movs	r3, #1
 800307e:	4622      	mov	r2, r4
 8003080:	4649      	mov	r1, r9
 8003082:	4638      	mov	r0, r7
 8003084:	47c0      	blx	r8
 8003086:	3001      	adds	r0, #1
 8003088:	d0e6      	beq.n	8003058 <_printf_common+0xa8>
 800308a:	3601      	adds	r6, #1
 800308c:	e7d9      	b.n	8003042 <_printf_common+0x92>
	...

08003090 <_printf_i>:
 8003090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003094:	460c      	mov	r4, r1
 8003096:	7e27      	ldrb	r7, [r4, #24]
 8003098:	4691      	mov	r9, r2
 800309a:	2f78      	cmp	r7, #120	; 0x78
 800309c:	4680      	mov	r8, r0
 800309e:	469a      	mov	sl, r3
 80030a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030a6:	d807      	bhi.n	80030b8 <_printf_i+0x28>
 80030a8:	2f62      	cmp	r7, #98	; 0x62
 80030aa:	d80a      	bhi.n	80030c2 <_printf_i+0x32>
 80030ac:	2f00      	cmp	r7, #0
 80030ae:	f000 80d9 	beq.w	8003264 <_printf_i+0x1d4>
 80030b2:	2f58      	cmp	r7, #88	; 0x58
 80030b4:	f000 80a4 	beq.w	8003200 <_printf_i+0x170>
 80030b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80030bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030c0:	e03a      	b.n	8003138 <_printf_i+0xa8>
 80030c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030c6:	2b15      	cmp	r3, #21
 80030c8:	d8f6      	bhi.n	80030b8 <_printf_i+0x28>
 80030ca:	a001      	add	r0, pc, #4	; (adr r0, 80030d0 <_printf_i+0x40>)
 80030cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80030d0:	08003129 	.word	0x08003129
 80030d4:	0800313d 	.word	0x0800313d
 80030d8:	080030b9 	.word	0x080030b9
 80030dc:	080030b9 	.word	0x080030b9
 80030e0:	080030b9 	.word	0x080030b9
 80030e4:	080030b9 	.word	0x080030b9
 80030e8:	0800313d 	.word	0x0800313d
 80030ec:	080030b9 	.word	0x080030b9
 80030f0:	080030b9 	.word	0x080030b9
 80030f4:	080030b9 	.word	0x080030b9
 80030f8:	080030b9 	.word	0x080030b9
 80030fc:	0800324b 	.word	0x0800324b
 8003100:	0800316d 	.word	0x0800316d
 8003104:	0800322d 	.word	0x0800322d
 8003108:	080030b9 	.word	0x080030b9
 800310c:	080030b9 	.word	0x080030b9
 8003110:	0800326d 	.word	0x0800326d
 8003114:	080030b9 	.word	0x080030b9
 8003118:	0800316d 	.word	0x0800316d
 800311c:	080030b9 	.word	0x080030b9
 8003120:	080030b9 	.word	0x080030b9
 8003124:	08003235 	.word	0x08003235
 8003128:	680b      	ldr	r3, [r1, #0]
 800312a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800312e:	1d1a      	adds	r2, r3, #4
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	600a      	str	r2, [r1, #0]
 8003134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003138:	2301      	movs	r3, #1
 800313a:	e0a4      	b.n	8003286 <_printf_i+0x1f6>
 800313c:	6825      	ldr	r5, [r4, #0]
 800313e:	6808      	ldr	r0, [r1, #0]
 8003140:	062e      	lsls	r6, r5, #24
 8003142:	f100 0304 	add.w	r3, r0, #4
 8003146:	d50a      	bpl.n	800315e <_printf_i+0xce>
 8003148:	6805      	ldr	r5, [r0, #0]
 800314a:	600b      	str	r3, [r1, #0]
 800314c:	2d00      	cmp	r5, #0
 800314e:	da03      	bge.n	8003158 <_printf_i+0xc8>
 8003150:	232d      	movs	r3, #45	; 0x2d
 8003152:	426d      	negs	r5, r5
 8003154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003158:	230a      	movs	r3, #10
 800315a:	485e      	ldr	r0, [pc, #376]	; (80032d4 <_printf_i+0x244>)
 800315c:	e019      	b.n	8003192 <_printf_i+0x102>
 800315e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003162:	6805      	ldr	r5, [r0, #0]
 8003164:	600b      	str	r3, [r1, #0]
 8003166:	bf18      	it	ne
 8003168:	b22d      	sxthne	r5, r5
 800316a:	e7ef      	b.n	800314c <_printf_i+0xbc>
 800316c:	680b      	ldr	r3, [r1, #0]
 800316e:	6825      	ldr	r5, [r4, #0]
 8003170:	1d18      	adds	r0, r3, #4
 8003172:	6008      	str	r0, [r1, #0]
 8003174:	0628      	lsls	r0, r5, #24
 8003176:	d501      	bpl.n	800317c <_printf_i+0xec>
 8003178:	681d      	ldr	r5, [r3, #0]
 800317a:	e002      	b.n	8003182 <_printf_i+0xf2>
 800317c:	0669      	lsls	r1, r5, #25
 800317e:	d5fb      	bpl.n	8003178 <_printf_i+0xe8>
 8003180:	881d      	ldrh	r5, [r3, #0]
 8003182:	2f6f      	cmp	r7, #111	; 0x6f
 8003184:	bf0c      	ite	eq
 8003186:	2308      	moveq	r3, #8
 8003188:	230a      	movne	r3, #10
 800318a:	4852      	ldr	r0, [pc, #328]	; (80032d4 <_printf_i+0x244>)
 800318c:	2100      	movs	r1, #0
 800318e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003192:	6866      	ldr	r6, [r4, #4]
 8003194:	2e00      	cmp	r6, #0
 8003196:	bfa8      	it	ge
 8003198:	6821      	ldrge	r1, [r4, #0]
 800319a:	60a6      	str	r6, [r4, #8]
 800319c:	bfa4      	itt	ge
 800319e:	f021 0104 	bicge.w	r1, r1, #4
 80031a2:	6021      	strge	r1, [r4, #0]
 80031a4:	b90d      	cbnz	r5, 80031aa <_printf_i+0x11a>
 80031a6:	2e00      	cmp	r6, #0
 80031a8:	d04d      	beq.n	8003246 <_printf_i+0x1b6>
 80031aa:	4616      	mov	r6, r2
 80031ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80031b0:	fb03 5711 	mls	r7, r3, r1, r5
 80031b4:	5dc7      	ldrb	r7, [r0, r7]
 80031b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031ba:	462f      	mov	r7, r5
 80031bc:	42bb      	cmp	r3, r7
 80031be:	460d      	mov	r5, r1
 80031c0:	d9f4      	bls.n	80031ac <_printf_i+0x11c>
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d10b      	bne.n	80031de <_printf_i+0x14e>
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	07df      	lsls	r7, r3, #31
 80031ca:	d508      	bpl.n	80031de <_printf_i+0x14e>
 80031cc:	6923      	ldr	r3, [r4, #16]
 80031ce:	6861      	ldr	r1, [r4, #4]
 80031d0:	4299      	cmp	r1, r3
 80031d2:	bfde      	ittt	le
 80031d4:	2330      	movle	r3, #48	; 0x30
 80031d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031de:	1b92      	subs	r2, r2, r6
 80031e0:	6122      	str	r2, [r4, #16]
 80031e2:	464b      	mov	r3, r9
 80031e4:	4621      	mov	r1, r4
 80031e6:	4640      	mov	r0, r8
 80031e8:	f8cd a000 	str.w	sl, [sp]
 80031ec:	aa03      	add	r2, sp, #12
 80031ee:	f7ff fedf 	bl	8002fb0 <_printf_common>
 80031f2:	3001      	adds	r0, #1
 80031f4:	d14c      	bne.n	8003290 <_printf_i+0x200>
 80031f6:	f04f 30ff 	mov.w	r0, #4294967295
 80031fa:	b004      	add	sp, #16
 80031fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003200:	4834      	ldr	r0, [pc, #208]	; (80032d4 <_printf_i+0x244>)
 8003202:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003206:	680e      	ldr	r6, [r1, #0]
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	f856 5b04 	ldr.w	r5, [r6], #4
 800320e:	061f      	lsls	r7, r3, #24
 8003210:	600e      	str	r6, [r1, #0]
 8003212:	d514      	bpl.n	800323e <_printf_i+0x1ae>
 8003214:	07d9      	lsls	r1, r3, #31
 8003216:	bf44      	itt	mi
 8003218:	f043 0320 	orrmi.w	r3, r3, #32
 800321c:	6023      	strmi	r3, [r4, #0]
 800321e:	b91d      	cbnz	r5, 8003228 <_printf_i+0x198>
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	f023 0320 	bic.w	r3, r3, #32
 8003226:	6023      	str	r3, [r4, #0]
 8003228:	2310      	movs	r3, #16
 800322a:	e7af      	b.n	800318c <_printf_i+0xfc>
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	f043 0320 	orr.w	r3, r3, #32
 8003232:	6023      	str	r3, [r4, #0]
 8003234:	2378      	movs	r3, #120	; 0x78
 8003236:	4828      	ldr	r0, [pc, #160]	; (80032d8 <_printf_i+0x248>)
 8003238:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800323c:	e7e3      	b.n	8003206 <_printf_i+0x176>
 800323e:	065e      	lsls	r6, r3, #25
 8003240:	bf48      	it	mi
 8003242:	b2ad      	uxthmi	r5, r5
 8003244:	e7e6      	b.n	8003214 <_printf_i+0x184>
 8003246:	4616      	mov	r6, r2
 8003248:	e7bb      	b.n	80031c2 <_printf_i+0x132>
 800324a:	680b      	ldr	r3, [r1, #0]
 800324c:	6826      	ldr	r6, [r4, #0]
 800324e:	1d1d      	adds	r5, r3, #4
 8003250:	6960      	ldr	r0, [r4, #20]
 8003252:	600d      	str	r5, [r1, #0]
 8003254:	0635      	lsls	r5, r6, #24
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	d501      	bpl.n	800325e <_printf_i+0x1ce>
 800325a:	6018      	str	r0, [r3, #0]
 800325c:	e002      	b.n	8003264 <_printf_i+0x1d4>
 800325e:	0671      	lsls	r1, r6, #25
 8003260:	d5fb      	bpl.n	800325a <_printf_i+0x1ca>
 8003262:	8018      	strh	r0, [r3, #0]
 8003264:	2300      	movs	r3, #0
 8003266:	4616      	mov	r6, r2
 8003268:	6123      	str	r3, [r4, #16]
 800326a:	e7ba      	b.n	80031e2 <_printf_i+0x152>
 800326c:	680b      	ldr	r3, [r1, #0]
 800326e:	1d1a      	adds	r2, r3, #4
 8003270:	600a      	str	r2, [r1, #0]
 8003272:	681e      	ldr	r6, [r3, #0]
 8003274:	2100      	movs	r1, #0
 8003276:	4630      	mov	r0, r6
 8003278:	6862      	ldr	r2, [r4, #4]
 800327a:	f000 f82f 	bl	80032dc <memchr>
 800327e:	b108      	cbz	r0, 8003284 <_printf_i+0x1f4>
 8003280:	1b80      	subs	r0, r0, r6
 8003282:	6060      	str	r0, [r4, #4]
 8003284:	6863      	ldr	r3, [r4, #4]
 8003286:	6123      	str	r3, [r4, #16]
 8003288:	2300      	movs	r3, #0
 800328a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800328e:	e7a8      	b.n	80031e2 <_printf_i+0x152>
 8003290:	4632      	mov	r2, r6
 8003292:	4649      	mov	r1, r9
 8003294:	4640      	mov	r0, r8
 8003296:	6923      	ldr	r3, [r4, #16]
 8003298:	47d0      	blx	sl
 800329a:	3001      	adds	r0, #1
 800329c:	d0ab      	beq.n	80031f6 <_printf_i+0x166>
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	079b      	lsls	r3, r3, #30
 80032a2:	d413      	bmi.n	80032cc <_printf_i+0x23c>
 80032a4:	68e0      	ldr	r0, [r4, #12]
 80032a6:	9b03      	ldr	r3, [sp, #12]
 80032a8:	4298      	cmp	r0, r3
 80032aa:	bfb8      	it	lt
 80032ac:	4618      	movlt	r0, r3
 80032ae:	e7a4      	b.n	80031fa <_printf_i+0x16a>
 80032b0:	2301      	movs	r3, #1
 80032b2:	4632      	mov	r2, r6
 80032b4:	4649      	mov	r1, r9
 80032b6:	4640      	mov	r0, r8
 80032b8:	47d0      	blx	sl
 80032ba:	3001      	adds	r0, #1
 80032bc:	d09b      	beq.n	80031f6 <_printf_i+0x166>
 80032be:	3501      	adds	r5, #1
 80032c0:	68e3      	ldr	r3, [r4, #12]
 80032c2:	9903      	ldr	r1, [sp, #12]
 80032c4:	1a5b      	subs	r3, r3, r1
 80032c6:	42ab      	cmp	r3, r5
 80032c8:	dcf2      	bgt.n	80032b0 <_printf_i+0x220>
 80032ca:	e7eb      	b.n	80032a4 <_printf_i+0x214>
 80032cc:	2500      	movs	r5, #0
 80032ce:	f104 0619 	add.w	r6, r4, #25
 80032d2:	e7f5      	b.n	80032c0 <_printf_i+0x230>
 80032d4:	0800358f 	.word	0x0800358f
 80032d8:	080035a0 	.word	0x080035a0

080032dc <memchr>:
 80032dc:	4603      	mov	r3, r0
 80032de:	b510      	push	{r4, lr}
 80032e0:	b2c9      	uxtb	r1, r1
 80032e2:	4402      	add	r2, r0
 80032e4:	4293      	cmp	r3, r2
 80032e6:	4618      	mov	r0, r3
 80032e8:	d101      	bne.n	80032ee <memchr+0x12>
 80032ea:	2000      	movs	r0, #0
 80032ec:	e003      	b.n	80032f6 <memchr+0x1a>
 80032ee:	7804      	ldrb	r4, [r0, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	428c      	cmp	r4, r1
 80032f4:	d1f6      	bne.n	80032e4 <memchr+0x8>
 80032f6:	bd10      	pop	{r4, pc}

080032f8 <memcpy>:
 80032f8:	440a      	add	r2, r1
 80032fa:	4291      	cmp	r1, r2
 80032fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003300:	d100      	bne.n	8003304 <memcpy+0xc>
 8003302:	4770      	bx	lr
 8003304:	b510      	push	{r4, lr}
 8003306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800330a:	4291      	cmp	r1, r2
 800330c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003310:	d1f9      	bne.n	8003306 <memcpy+0xe>
 8003312:	bd10      	pop	{r4, pc}

08003314 <memmove>:
 8003314:	4288      	cmp	r0, r1
 8003316:	b510      	push	{r4, lr}
 8003318:	eb01 0402 	add.w	r4, r1, r2
 800331c:	d902      	bls.n	8003324 <memmove+0x10>
 800331e:	4284      	cmp	r4, r0
 8003320:	4623      	mov	r3, r4
 8003322:	d807      	bhi.n	8003334 <memmove+0x20>
 8003324:	1e43      	subs	r3, r0, #1
 8003326:	42a1      	cmp	r1, r4
 8003328:	d008      	beq.n	800333c <memmove+0x28>
 800332a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800332e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003332:	e7f8      	b.n	8003326 <memmove+0x12>
 8003334:	4601      	mov	r1, r0
 8003336:	4402      	add	r2, r0
 8003338:	428a      	cmp	r2, r1
 800333a:	d100      	bne.n	800333e <memmove+0x2a>
 800333c:	bd10      	pop	{r4, pc}
 800333e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003346:	e7f7      	b.n	8003338 <memmove+0x24>

08003348 <_free_r>:
 8003348:	b538      	push	{r3, r4, r5, lr}
 800334a:	4605      	mov	r5, r0
 800334c:	2900      	cmp	r1, #0
 800334e:	d043      	beq.n	80033d8 <_free_r+0x90>
 8003350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003354:	1f0c      	subs	r4, r1, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	bfb8      	it	lt
 800335a:	18e4      	addlt	r4, r4, r3
 800335c:	f000 f8d0 	bl	8003500 <__malloc_lock>
 8003360:	4a1e      	ldr	r2, [pc, #120]	; (80033dc <_free_r+0x94>)
 8003362:	6813      	ldr	r3, [r2, #0]
 8003364:	4610      	mov	r0, r2
 8003366:	b933      	cbnz	r3, 8003376 <_free_r+0x2e>
 8003368:	6063      	str	r3, [r4, #4]
 800336a:	6014      	str	r4, [r2, #0]
 800336c:	4628      	mov	r0, r5
 800336e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003372:	f000 b8cb 	b.w	800350c <__malloc_unlock>
 8003376:	42a3      	cmp	r3, r4
 8003378:	d90a      	bls.n	8003390 <_free_r+0x48>
 800337a:	6821      	ldr	r1, [r4, #0]
 800337c:	1862      	adds	r2, r4, r1
 800337e:	4293      	cmp	r3, r2
 8003380:	bf01      	itttt	eq
 8003382:	681a      	ldreq	r2, [r3, #0]
 8003384:	685b      	ldreq	r3, [r3, #4]
 8003386:	1852      	addeq	r2, r2, r1
 8003388:	6022      	streq	r2, [r4, #0]
 800338a:	6063      	str	r3, [r4, #4]
 800338c:	6004      	str	r4, [r0, #0]
 800338e:	e7ed      	b.n	800336c <_free_r+0x24>
 8003390:	461a      	mov	r2, r3
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	b10b      	cbz	r3, 800339a <_free_r+0x52>
 8003396:	42a3      	cmp	r3, r4
 8003398:	d9fa      	bls.n	8003390 <_free_r+0x48>
 800339a:	6811      	ldr	r1, [r2, #0]
 800339c:	1850      	adds	r0, r2, r1
 800339e:	42a0      	cmp	r0, r4
 80033a0:	d10b      	bne.n	80033ba <_free_r+0x72>
 80033a2:	6820      	ldr	r0, [r4, #0]
 80033a4:	4401      	add	r1, r0
 80033a6:	1850      	adds	r0, r2, r1
 80033a8:	4283      	cmp	r3, r0
 80033aa:	6011      	str	r1, [r2, #0]
 80033ac:	d1de      	bne.n	800336c <_free_r+0x24>
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4401      	add	r1, r0
 80033b4:	6011      	str	r1, [r2, #0]
 80033b6:	6053      	str	r3, [r2, #4]
 80033b8:	e7d8      	b.n	800336c <_free_r+0x24>
 80033ba:	d902      	bls.n	80033c2 <_free_r+0x7a>
 80033bc:	230c      	movs	r3, #12
 80033be:	602b      	str	r3, [r5, #0]
 80033c0:	e7d4      	b.n	800336c <_free_r+0x24>
 80033c2:	6820      	ldr	r0, [r4, #0]
 80033c4:	1821      	adds	r1, r4, r0
 80033c6:	428b      	cmp	r3, r1
 80033c8:	bf01      	itttt	eq
 80033ca:	6819      	ldreq	r1, [r3, #0]
 80033cc:	685b      	ldreq	r3, [r3, #4]
 80033ce:	1809      	addeq	r1, r1, r0
 80033d0:	6021      	streq	r1, [r4, #0]
 80033d2:	6063      	str	r3, [r4, #4]
 80033d4:	6054      	str	r4, [r2, #4]
 80033d6:	e7c9      	b.n	800336c <_free_r+0x24>
 80033d8:	bd38      	pop	{r3, r4, r5, pc}
 80033da:	bf00      	nop
 80033dc:	20000170 	.word	0x20000170

080033e0 <_malloc_r>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	1ccd      	adds	r5, r1, #3
 80033e4:	f025 0503 	bic.w	r5, r5, #3
 80033e8:	3508      	adds	r5, #8
 80033ea:	2d0c      	cmp	r5, #12
 80033ec:	bf38      	it	cc
 80033ee:	250c      	movcc	r5, #12
 80033f0:	2d00      	cmp	r5, #0
 80033f2:	4606      	mov	r6, r0
 80033f4:	db01      	blt.n	80033fa <_malloc_r+0x1a>
 80033f6:	42a9      	cmp	r1, r5
 80033f8:	d903      	bls.n	8003402 <_malloc_r+0x22>
 80033fa:	230c      	movs	r3, #12
 80033fc:	6033      	str	r3, [r6, #0]
 80033fe:	2000      	movs	r0, #0
 8003400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003402:	f000 f87d 	bl	8003500 <__malloc_lock>
 8003406:	4921      	ldr	r1, [pc, #132]	; (800348c <_malloc_r+0xac>)
 8003408:	680a      	ldr	r2, [r1, #0]
 800340a:	4614      	mov	r4, r2
 800340c:	b99c      	cbnz	r4, 8003436 <_malloc_r+0x56>
 800340e:	4f20      	ldr	r7, [pc, #128]	; (8003490 <_malloc_r+0xb0>)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	b923      	cbnz	r3, 800341e <_malloc_r+0x3e>
 8003414:	4621      	mov	r1, r4
 8003416:	4630      	mov	r0, r6
 8003418:	f000 f862 	bl	80034e0 <_sbrk_r>
 800341c:	6038      	str	r0, [r7, #0]
 800341e:	4629      	mov	r1, r5
 8003420:	4630      	mov	r0, r6
 8003422:	f000 f85d 	bl	80034e0 <_sbrk_r>
 8003426:	1c43      	adds	r3, r0, #1
 8003428:	d123      	bne.n	8003472 <_malloc_r+0x92>
 800342a:	230c      	movs	r3, #12
 800342c:	4630      	mov	r0, r6
 800342e:	6033      	str	r3, [r6, #0]
 8003430:	f000 f86c 	bl	800350c <__malloc_unlock>
 8003434:	e7e3      	b.n	80033fe <_malloc_r+0x1e>
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	1b5b      	subs	r3, r3, r5
 800343a:	d417      	bmi.n	800346c <_malloc_r+0x8c>
 800343c:	2b0b      	cmp	r3, #11
 800343e:	d903      	bls.n	8003448 <_malloc_r+0x68>
 8003440:	6023      	str	r3, [r4, #0]
 8003442:	441c      	add	r4, r3
 8003444:	6025      	str	r5, [r4, #0]
 8003446:	e004      	b.n	8003452 <_malloc_r+0x72>
 8003448:	6863      	ldr	r3, [r4, #4]
 800344a:	42a2      	cmp	r2, r4
 800344c:	bf0c      	ite	eq
 800344e:	600b      	streq	r3, [r1, #0]
 8003450:	6053      	strne	r3, [r2, #4]
 8003452:	4630      	mov	r0, r6
 8003454:	f000 f85a 	bl	800350c <__malloc_unlock>
 8003458:	f104 000b 	add.w	r0, r4, #11
 800345c:	1d23      	adds	r3, r4, #4
 800345e:	f020 0007 	bic.w	r0, r0, #7
 8003462:	1ac2      	subs	r2, r0, r3
 8003464:	d0cc      	beq.n	8003400 <_malloc_r+0x20>
 8003466:	1a1b      	subs	r3, r3, r0
 8003468:	50a3      	str	r3, [r4, r2]
 800346a:	e7c9      	b.n	8003400 <_malloc_r+0x20>
 800346c:	4622      	mov	r2, r4
 800346e:	6864      	ldr	r4, [r4, #4]
 8003470:	e7cc      	b.n	800340c <_malloc_r+0x2c>
 8003472:	1cc4      	adds	r4, r0, #3
 8003474:	f024 0403 	bic.w	r4, r4, #3
 8003478:	42a0      	cmp	r0, r4
 800347a:	d0e3      	beq.n	8003444 <_malloc_r+0x64>
 800347c:	1a21      	subs	r1, r4, r0
 800347e:	4630      	mov	r0, r6
 8003480:	f000 f82e 	bl	80034e0 <_sbrk_r>
 8003484:	3001      	adds	r0, #1
 8003486:	d1dd      	bne.n	8003444 <_malloc_r+0x64>
 8003488:	e7cf      	b.n	800342a <_malloc_r+0x4a>
 800348a:	bf00      	nop
 800348c:	20000170 	.word	0x20000170
 8003490:	20000174 	.word	0x20000174

08003494 <_realloc_r>:
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	4607      	mov	r7, r0
 8003498:	4614      	mov	r4, r2
 800349a:	460e      	mov	r6, r1
 800349c:	b921      	cbnz	r1, 80034a8 <_realloc_r+0x14>
 800349e:	4611      	mov	r1, r2
 80034a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80034a4:	f7ff bf9c 	b.w	80033e0 <_malloc_r>
 80034a8:	b922      	cbnz	r2, 80034b4 <_realloc_r+0x20>
 80034aa:	f7ff ff4d 	bl	8003348 <_free_r>
 80034ae:	4625      	mov	r5, r4
 80034b0:	4628      	mov	r0, r5
 80034b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034b4:	f000 f830 	bl	8003518 <_malloc_usable_size_r>
 80034b8:	42a0      	cmp	r0, r4
 80034ba:	d20f      	bcs.n	80034dc <_realloc_r+0x48>
 80034bc:	4621      	mov	r1, r4
 80034be:	4638      	mov	r0, r7
 80034c0:	f7ff ff8e 	bl	80033e0 <_malloc_r>
 80034c4:	4605      	mov	r5, r0
 80034c6:	2800      	cmp	r0, #0
 80034c8:	d0f2      	beq.n	80034b0 <_realloc_r+0x1c>
 80034ca:	4631      	mov	r1, r6
 80034cc:	4622      	mov	r2, r4
 80034ce:	f7ff ff13 	bl	80032f8 <memcpy>
 80034d2:	4631      	mov	r1, r6
 80034d4:	4638      	mov	r0, r7
 80034d6:	f7ff ff37 	bl	8003348 <_free_r>
 80034da:	e7e9      	b.n	80034b0 <_realloc_r+0x1c>
 80034dc:	4635      	mov	r5, r6
 80034de:	e7e7      	b.n	80034b0 <_realloc_r+0x1c>

080034e0 <_sbrk_r>:
 80034e0:	b538      	push	{r3, r4, r5, lr}
 80034e2:	2300      	movs	r3, #0
 80034e4:	4d05      	ldr	r5, [pc, #20]	; (80034fc <_sbrk_r+0x1c>)
 80034e6:	4604      	mov	r4, r0
 80034e8:	4608      	mov	r0, r1
 80034ea:	602b      	str	r3, [r5, #0]
 80034ec:	f7fd fe38 	bl	8001160 <_sbrk>
 80034f0:	1c43      	adds	r3, r0, #1
 80034f2:	d102      	bne.n	80034fa <_sbrk_r+0x1a>
 80034f4:	682b      	ldr	r3, [r5, #0]
 80034f6:	b103      	cbz	r3, 80034fa <_sbrk_r+0x1a>
 80034f8:	6023      	str	r3, [r4, #0]
 80034fa:	bd38      	pop	{r3, r4, r5, pc}
 80034fc:	2000028c 	.word	0x2000028c

08003500 <__malloc_lock>:
 8003500:	4801      	ldr	r0, [pc, #4]	; (8003508 <__malloc_lock+0x8>)
 8003502:	f000 b811 	b.w	8003528 <__retarget_lock_acquire_recursive>
 8003506:	bf00      	nop
 8003508:	20000294 	.word	0x20000294

0800350c <__malloc_unlock>:
 800350c:	4801      	ldr	r0, [pc, #4]	; (8003514 <__malloc_unlock+0x8>)
 800350e:	f000 b80c 	b.w	800352a <__retarget_lock_release_recursive>
 8003512:	bf00      	nop
 8003514:	20000294 	.word	0x20000294

08003518 <_malloc_usable_size_r>:
 8003518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800351c:	1f18      	subs	r0, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	bfbc      	itt	lt
 8003522:	580b      	ldrlt	r3, [r1, r0]
 8003524:	18c0      	addlt	r0, r0, r3
 8003526:	4770      	bx	lr

08003528 <__retarget_lock_acquire_recursive>:
 8003528:	4770      	bx	lr

0800352a <__retarget_lock_release_recursive>:
 800352a:	4770      	bx	lr

0800352c <_init>:
 800352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352e:	bf00      	nop
 8003530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003532:	bc08      	pop	{r3}
 8003534:	469e      	mov	lr, r3
 8003536:	4770      	bx	lr

08003538 <_fini>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	bf00      	nop
 800353c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353e:	bc08      	pop	{r3}
 8003540:	469e      	mov	lr, r3
 8003542:	4770      	bx	lr
