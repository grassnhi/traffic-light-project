
traffic-light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003278  08003278  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08003278  08003278  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003278  08003278  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003278  08003278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08003280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000094  08003314  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08003314  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe74  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002361  00000000  00000000  0002ff31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00032298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00032f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f16  00000000  00000000  00033aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edfe  00000000  00000000  0004b9be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b03b  00000000  00000000  0005a7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e57f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a8  00000000  00000000  000e584c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	080031e0 	.word	0x080031e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	080031e0 	.word	0x080031e0

0800014c <traffic_light>:
#include "main.h"

void toggle_red() {
	
}
void traffic_light(int color) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch (color) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d018      	beq.n	800018c <traffic_light+0x40>
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2b00      	cmp	r3, #0
 800015e:	f2c0 8083 	blt.w	8000268 <traffic_light+0x11c>
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2b36      	cmp	r3, #54	; 0x36
 8000166:	dc7f      	bgt.n	8000268 <traffic_light+0x11c>
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2b33      	cmp	r3, #51	; 0x33
 800016c:	db7c      	blt.n	8000268 <traffic_light+0x11c>
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	3b33      	subs	r3, #51	; 0x33
 8000172:	2b03      	cmp	r3, #3
 8000174:	d878      	bhi.n	8000268 <traffic_light+0x11c>
 8000176:	a201      	add	r2, pc, #4	; (adr r2, 800017c <traffic_light+0x30>)
 8000178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800017c:	08000211 	.word	0x08000211
 8000180:	0800023d 	.word	0x0800023d
 8000184:	080001b9 	.word	0x080001b9
 8000188:	080001e5 	.word	0x080001e5
		case INIT:
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000192:	4838      	ldr	r0, [pc, #224]	; (8000274 <traffic_light+0x128>)
 8000194:	f001 f9c3 	bl	800151e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	2108      	movs	r1, #8
 800019c:	4836      	ldr	r0, [pc, #216]	; (8000278 <traffic_light+0x12c>)
 800019e:	f001 f9be 	bl	800151e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 80001a2:	2200      	movs	r2, #0
 80001a4:	2120      	movs	r1, #32
 80001a6:	4834      	ldr	r0, [pc, #208]	; (8000278 <traffic_light+0x12c>)
 80001a8:	f001 f9b9 	bl	800151e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 80001ac:	2200      	movs	r2, #0
 80001ae:	2110      	movs	r1, #16
 80001b0:	4831      	ldr	r0, [pc, #196]	; (8000278 <traffic_light+0x12c>)
 80001b2:	f001 f9b4 	bl	800151e <HAL_GPIO_WritePin>
			break;
 80001b6:	e058      	b.n	800026a <traffic_light+0x11e>
		case GREEN2:
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, SET);
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001be:	482d      	ldr	r0, [pc, #180]	; (8000274 <traffic_light+0x128>)
 80001c0:	f001 f9ad 	bl	800151e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 80001c4:	2200      	movs	r2, #0
 80001c6:	2108      	movs	r1, #8
 80001c8:	482b      	ldr	r0, [pc, #172]	; (8000278 <traffic_light+0x12c>)
 80001ca:	f001 f9a8 	bl	800151e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 80001ce:	2200      	movs	r2, #0
 80001d0:	2120      	movs	r1, #32
 80001d2:	4829      	ldr	r0, [pc, #164]	; (8000278 <traffic_light+0x12c>)
 80001d4:	f001 f9a3 	bl	800151e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	2110      	movs	r1, #16
 80001dc:	4826      	ldr	r0, [pc, #152]	; (8000278 <traffic_light+0x12c>)
 80001de:	f001 f99e 	bl	800151e <HAL_GPIO_WritePin>
			break;
 80001e2:	e042      	b.n	800026a <traffic_light+0x11e>
		case AMBER2:
            HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, SET);
 80001e4:	2201      	movs	r2, #1
 80001e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ea:	4822      	ldr	r0, [pc, #136]	; (8000274 <traffic_light+0x128>)
 80001ec:	f001 f997 	bl	800151e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 80001f0:	2200      	movs	r2, #0
 80001f2:	2108      	movs	r1, #8
 80001f4:	4820      	ldr	r0, [pc, #128]	; (8000278 <traffic_light+0x12c>)
 80001f6:	f001 f992 	bl	800151e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	2120      	movs	r1, #32
 80001fe:	481e      	ldr	r0, [pc, #120]	; (8000278 <traffic_light+0x12c>)
 8000200:	f001 f98d 	bl	800151e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, SET);
 8000204:	2201      	movs	r2, #1
 8000206:	2110      	movs	r1, #16
 8000208:	481b      	ldr	r0, [pc, #108]	; (8000278 <traffic_light+0x12c>)
 800020a:	f001 f988 	bl	800151e <HAL_GPIO_WritePin>
			break;
 800020e:	e02c      	b.n	800026a <traffic_light+0x11e>
		case GREEN1:
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000216:	4817      	ldr	r0, [pc, #92]	; (8000274 <traffic_light+0x128>)
 8000218:	f001 f981 	bl	800151e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2108      	movs	r1, #8
 8000220:	4815      	ldr	r0, [pc, #84]	; (8000278 <traffic_light+0x12c>)
 8000222:	f001 f97c 	bl	800151e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, SET);
 8000226:	2201      	movs	r2, #1
 8000228:	2120      	movs	r1, #32
 800022a:	4813      	ldr	r0, [pc, #76]	; (8000278 <traffic_light+0x12c>)
 800022c:	f001 f977 	bl	800151e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	2110      	movs	r1, #16
 8000234:	4810      	ldr	r0, [pc, #64]	; (8000278 <traffic_light+0x12c>)
 8000236:	f001 f972 	bl	800151e <HAL_GPIO_WritePin>
			break;
 800023a:	e016      	b.n	800026a <traffic_light+0x11e>
        case AMBER1:
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, SET);
 800023c:	2201      	movs	r2, #1
 800023e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000242:	480c      	ldr	r0, [pc, #48]	; (8000274 <traffic_light+0x128>)
 8000244:	f001 f96b 	bl	800151e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, SET);
 8000248:	2201      	movs	r2, #1
 800024a:	2108      	movs	r1, #8
 800024c:	480a      	ldr	r0, [pc, #40]	; (8000278 <traffic_light+0x12c>)
 800024e:	f001 f966 	bl	800151e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, SET);
 8000252:	2201      	movs	r2, #1
 8000254:	2120      	movs	r1, #32
 8000256:	4808      	ldr	r0, [pc, #32]	; (8000278 <traffic_light+0x12c>)
 8000258:	f001 f961 	bl	800151e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	2110      	movs	r1, #16
 8000260:	4805      	ldr	r0, [pc, #20]	; (8000278 <traffic_light+0x12c>)
 8000262:	f001 f95c 	bl	800151e <HAL_GPIO_WritePin>
			break;
 8000266:	e000      	b.n	800026a <traffic_light+0x11e>
		default:
			break;
 8000268:	bf00      	nop
	}
}
 800026a:	bf00      	nop
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40010800 	.word	0x40010800
 8000278:	40010c00 	.word	0x40010c00

0800027c <fsm_automatic_run>:
 *      Author: PC
 */

#include "main.h"

void fsm_automatic_run() {
 800027c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800027e:	b093      	sub	sp, #76	; 0x4c
 8000280:	af10      	add	r7, sp, #64	; 0x40
	switch(current_state){
 8000282:	4b98      	ldr	r3, [pc, #608]	; (80004e4 <fsm_automatic_run+0x268>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	3b33      	subs	r3, #51	; 0x33
 8000288:	2b03      	cmp	r3, #3
 800028a:	f200 819d 	bhi.w	80005c8 <fsm_automatic_run+0x34c>
 800028e:	a201      	add	r2, pc, #4	; (adr r2, 8000294 <fsm_automatic_run+0x18>)
 8000290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000294:	08000423 	.word	0x08000423
 8000298:	08000505 	.word	0x08000505
 800029c:	080002a5 	.word	0x080002a5
 80002a0:	08000363 	.word	0x08000363

	case GREEN2:
		traffic_light(GREEN2);
 80002a4:	2035      	movs	r0, #53	; 0x35
 80002a6:	f7ff ff51 	bl	800014c <traffic_light>

		if (timer_flag[0] == 1) {
 80002aa:	4b8f      	ldr	r3, [pc, #572]	; (80004e8 <fsm_automatic_run+0x26c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d113      	bne.n	80002da <fsm_automatic_run+0x5e>
			counter2 = RED - GREEN;
 80002b2:	4b8e      	ldr	r3, [pc, #568]	; (80004ec <fsm_automatic_run+0x270>)
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	4b8e      	ldr	r3, [pc, #568]	; (80004f0 <fsm_automatic_run+0x274>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	1ad3      	subs	r3, r2, r3
 80002bc:	4a8d      	ldr	r2, [pc, #564]	; (80004f4 <fsm_automatic_run+0x278>)
 80002be:	6013      	str	r3, [r2, #0]
			current_state = AMBER2;
 80002c0:	4b88      	ldr	r3, [pc, #544]	; (80004e4 <fsm_automatic_run+0x268>)
 80002c2:	2236      	movs	r2, #54	; 0x36
 80002c4:	601a      	str	r2, [r3, #0]
			setTimer(0, counter2 * 1000);
 80002c6:	4b8b      	ldr	r3, [pc, #556]	; (80004f4 <fsm_automatic_run+0x278>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002ce:	fb02 f303 	mul.w	r3, r2, r3
 80002d2:	4619      	mov	r1, r3
 80002d4:	2000      	movs	r0, #0
 80002d6:	f000 fbfb 	bl	8000ad0 <setTimer>
		}
		if (timer_flag[2] == 1) {
 80002da:	4b83      	ldr	r3, [pc, #524]	; (80004e8 <fsm_automatic_run+0x26c>)
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d12b      	bne.n	800033a <fsm_automatic_run+0xbe>
			displayUART1(counter1, huart2);
 80002e2:	4b85      	ldr	r3, [pc, #532]	; (80004f8 <fsm_automatic_run+0x27c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	4e84      	ldr	r6, [pc, #528]	; (80004fc <fsm_automatic_run+0x280>)
 80002ea:	466d      	mov	r5, sp
 80002ec:	f106 040c 	add.w	r4, r6, #12
 80002f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000300:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000304:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f000 fd63 	bl	8000dd4 <displayUART1>
			displayUART2(counter2, huart2);
 800030e:	4b79      	ldr	r3, [pc, #484]	; (80004f4 <fsm_automatic_run+0x278>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	4e79      	ldr	r6, [pc, #484]	; (80004fc <fsm_automatic_run+0x280>)
 8000316:	466d      	mov	r5, sp
 8000318:	f106 040c 	add.w	r4, r6, #12
 800031c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800031e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000328:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800032c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000330:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f000 fd87 	bl	8000e48 <displayUART2>
		}
		if(isButtonPressed(0)){
 800033a:	2000      	movs	r0, #0
 800033c:	f000 f962 	bl	8000604 <isButtonPressed>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d002      	beq.n	800034c <fsm_automatic_run+0xd0>
			current_state = GREEN2;
 8000346:	4b67      	ldr	r3, [pc, #412]	; (80004e4 <fsm_automatic_run+0x268>)
 8000348:	2235      	movs	r2, #53	; 0x35
 800034a:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(3)){
 800034c:	2003      	movs	r0, #3
 800034e:	f000 f959 	bl	8000604 <isButtonPressed>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	f000 8139 	beq.w	80005cc <fsm_automatic_run+0x350>
			current_state = PED_RED;
 800035a:	4b62      	ldr	r3, [pc, #392]	; (80004e4 <fsm_automatic_run+0x268>)
 800035c:	222b      	movs	r2, #43	; 0x2b
 800035e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000360:	e134      	b.n	80005cc <fsm_automatic_run+0x350>

	case AMBER2:
		traffic_light(AMBER2);
 8000362:	2036      	movs	r0, #54	; 0x36
 8000364:	f7ff fef2 	bl	800014c <traffic_light>

		if (timer_flag[0] == 1) {
 8000368:	4b5f      	ldr	r3, [pc, #380]	; (80004e8 <fsm_automatic_run+0x26c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d114      	bne.n	800039a <fsm_automatic_run+0x11e>
			counter1 = GREEN;
 8000370:	4b5f      	ldr	r3, [pc, #380]	; (80004f0 <fsm_automatic_run+0x274>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a60      	ldr	r2, [pc, #384]	; (80004f8 <fsm_automatic_run+0x27c>)
 8000376:	6013      	str	r3, [r2, #0]
			counter2 = RED;
 8000378:	4b5c      	ldr	r3, [pc, #368]	; (80004ec <fsm_automatic_run+0x270>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a5d      	ldr	r2, [pc, #372]	; (80004f4 <fsm_automatic_run+0x278>)
 800037e:	6013      	str	r3, [r2, #0]
			current_state = GREEN1;
 8000380:	4b58      	ldr	r3, [pc, #352]	; (80004e4 <fsm_automatic_run+0x268>)
 8000382:	2233      	movs	r2, #51	; 0x33
 8000384:	601a      	str	r2, [r3, #0]
			setTimer(0, counter1 * 1000);
 8000386:	4b5c      	ldr	r3, [pc, #368]	; (80004f8 <fsm_automatic_run+0x27c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800038e:	fb02 f303 	mul.w	r3, r2, r3
 8000392:	4619      	mov	r1, r3
 8000394:	2000      	movs	r0, #0
 8000396:	f000 fb9b 	bl	8000ad0 <setTimer>
		}
		if (timer_flag[2] == 1) {
 800039a:	4b53      	ldr	r3, [pc, #332]	; (80004e8 <fsm_automatic_run+0x26c>)
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d12b      	bne.n	80003fa <fsm_automatic_run+0x17e>
			displayUART1(counter1, huart2);
 80003a2:	4b55      	ldr	r3, [pc, #340]	; (80004f8 <fsm_automatic_run+0x27c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	4e54      	ldr	r6, [pc, #336]	; (80004fc <fsm_automatic_run+0x280>)
 80003aa:	466d      	mov	r5, sp
 80003ac:	f106 040c 	add.w	r4, r6, #12
 80003b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003bc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80003c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80003c4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f000 fd03 	bl	8000dd4 <displayUART1>
			displayUART2(counter2, huart2);
 80003ce:	4b49      	ldr	r3, [pc, #292]	; (80004f4 <fsm_automatic_run+0x278>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	4e49      	ldr	r6, [pc, #292]	; (80004fc <fsm_automatic_run+0x280>)
 80003d6:	466d      	mov	r5, sp
 80003d8:	f106 040c 	add.w	r4, r6, #12
 80003dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80003ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80003f0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f000 fd27 	bl	8000e48 <displayUART2>
		}
		if(isButtonPressed(0)){
 80003fa:	2000      	movs	r0, #0
 80003fc:	f000 f902 	bl	8000604 <isButtonPressed>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d002      	beq.n	800040c <fsm_automatic_run+0x190>
			current_state = AMBER2;
 8000406:	4b37      	ldr	r3, [pc, #220]	; (80004e4 <fsm_automatic_run+0x268>)
 8000408:	2236      	movs	r2, #54	; 0x36
 800040a:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(3)){
 800040c:	2003      	movs	r0, #3
 800040e:	f000 f8f9 	bl	8000604 <isButtonPressed>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	f000 80db 	beq.w	80005d0 <fsm_automatic_run+0x354>
			current_state = PED_RED;
 800041a:	4b32      	ldr	r3, [pc, #200]	; (80004e4 <fsm_automatic_run+0x268>)
 800041c:	222b      	movs	r2, #43	; 0x2b
 800041e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000420:	e0d6      	b.n	80005d0 <fsm_automatic_run+0x354>

	case GREEN1:
		traffic_light(GREEN1);
 8000422:	2033      	movs	r0, #51	; 0x33
 8000424:	f7ff fe92 	bl	800014c <traffic_light>

		if (timer_flag[0] == 1) {
 8000428:	4b2f      	ldr	r3, [pc, #188]	; (80004e8 <fsm_automatic_run+0x26c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2b01      	cmp	r3, #1
 800042e:	d116      	bne.n	800045e <fsm_automatic_run+0x1e2>
			status = AMBER1;
 8000430:	4b33      	ldr	r3, [pc, #204]	; (8000500 <fsm_automatic_run+0x284>)
 8000432:	2234      	movs	r2, #52	; 0x34
 8000434:	601a      	str	r2, [r3, #0]
			counter1 = RED - GREEN;
 8000436:	4b2d      	ldr	r3, [pc, #180]	; (80004ec <fsm_automatic_run+0x270>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	4b2d      	ldr	r3, [pc, #180]	; (80004f0 <fsm_automatic_run+0x274>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	4a2d      	ldr	r2, [pc, #180]	; (80004f8 <fsm_automatic_run+0x27c>)
 8000442:	6013      	str	r3, [r2, #0]
			current_state = AMBER1;
 8000444:	4b27      	ldr	r3, [pc, #156]	; (80004e4 <fsm_automatic_run+0x268>)
 8000446:	2234      	movs	r2, #52	; 0x34
 8000448:	601a      	str	r2, [r3, #0]
			setTimer(0, counter1 * 1000);
 800044a:	4b2b      	ldr	r3, [pc, #172]	; (80004f8 <fsm_automatic_run+0x27c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000452:	fb02 f303 	mul.w	r3, r2, r3
 8000456:	4619      	mov	r1, r3
 8000458:	2000      	movs	r0, #0
 800045a:	f000 fb39 	bl	8000ad0 <setTimer>
		}
		if (timer_flag[2] == 1) {
 800045e:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <fsm_automatic_run+0x26c>)
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d12b      	bne.n	80004be <fsm_automatic_run+0x242>
			displayUART1(counter1, huart2);
 8000466:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <fsm_automatic_run+0x27c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	4e23      	ldr	r6, [pc, #140]	; (80004fc <fsm_automatic_run+0x280>)
 800046e:	466d      	mov	r5, sp
 8000470:	f106 040c 	add.w	r4, r6, #12
 8000474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800047a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800047c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800047e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000480:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000484:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000488:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f000 fca1 	bl	8000dd4 <displayUART1>
			displayUART2(counter2, huart2);
 8000492:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <fsm_automatic_run+0x278>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	4e18      	ldr	r6, [pc, #96]	; (80004fc <fsm_automatic_run+0x280>)
 800049a:	466d      	mov	r5, sp
 800049c:	f106 040c 	add.w	r4, r6, #12
 80004a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004ac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80004b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80004b4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f000 fcc5 	bl	8000e48 <displayUART2>
		}
		if(isButtonPressed(0)){
 80004be:	2000      	movs	r0, #0
 80004c0:	f000 f8a0 	bl	8000604 <isButtonPressed>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d002      	beq.n	80004d0 <fsm_automatic_run+0x254>
			current_state = GREEN1;
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <fsm_automatic_run+0x268>)
 80004cc:	2233      	movs	r2, #51	; 0x33
 80004ce:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(3)){
 80004d0:	2003      	movs	r0, #3
 80004d2:	f000 f897 	bl	8000604 <isButtonPressed>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d07b      	beq.n	80005d4 <fsm_automatic_run+0x358>
			current_state = PED_GREEN;
 80004dc:	4b01      	ldr	r3, [pc, #4]	; (80004e4 <fsm_automatic_run+0x268>)
 80004de:	222a      	movs	r2, #42	; 0x2a
 80004e0:	601a      	str	r2, [r3, #0]
		}
		break;
 80004e2:	e077      	b.n	80005d4 <fsm_automatic_run+0x358>
 80004e4:	20000170 	.word	0x20000170
 80004e8:	20000140 	.word	0x20000140
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000004 	.word	0x20000004
 80004f4:	200000b8 	.word	0x200000b8
 80004f8:	200000b4 	.word	0x200000b4
 80004fc:	20000238 	.word	0x20000238
 8000500:	200000b0 	.word	0x200000b0

	case AMBER1:
		traffic_light(AMBER1);
 8000504:	2034      	movs	r0, #52	; 0x34
 8000506:	f7ff fe21 	bl	800014c <traffic_light>

		if (timer_flag[0] == 1) {
 800050a:	4b36      	ldr	r3, [pc, #216]	; (80005e4 <fsm_automatic_run+0x368>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d117      	bne.n	8000542 <fsm_automatic_run+0x2c6>
			status = GREEN2;
 8000512:	4b35      	ldr	r3, [pc, #212]	; (80005e8 <fsm_automatic_run+0x36c>)
 8000514:	2235      	movs	r2, #53	; 0x35
 8000516:	601a      	str	r2, [r3, #0]
			counter1 = RED;
 8000518:	4b34      	ldr	r3, [pc, #208]	; (80005ec <fsm_automatic_run+0x370>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a34      	ldr	r2, [pc, #208]	; (80005f0 <fsm_automatic_run+0x374>)
 800051e:	6013      	str	r3, [r2, #0]
			counter2 = GREEN;
 8000520:	4b34      	ldr	r3, [pc, #208]	; (80005f4 <fsm_automatic_run+0x378>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a34      	ldr	r2, [pc, #208]	; (80005f8 <fsm_automatic_run+0x37c>)
 8000526:	6013      	str	r3, [r2, #0]
			current_state = GREEN2;
 8000528:	4b34      	ldr	r3, [pc, #208]	; (80005fc <fsm_automatic_run+0x380>)
 800052a:	2235      	movs	r2, #53	; 0x35
 800052c:	601a      	str	r2, [r3, #0]
			setTimer(0, counter2 * 1000);
 800052e:	4b32      	ldr	r3, [pc, #200]	; (80005f8 <fsm_automatic_run+0x37c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000536:	fb02 f303 	mul.w	r3, r2, r3
 800053a:	4619      	mov	r1, r3
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fac7 	bl	8000ad0 <setTimer>
		}
		if (timer_flag[2] == 1) {
 8000542:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <fsm_automatic_run+0x368>)
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d12b      	bne.n	80005a2 <fsm_automatic_run+0x326>
			displayUART1(counter1, huart2);
 800054a:	4b29      	ldr	r3, [pc, #164]	; (80005f0 <fsm_automatic_run+0x374>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4e2b      	ldr	r6, [pc, #172]	; (8000600 <fsm_automatic_run+0x384>)
 8000552:	466d      	mov	r5, sp
 8000554:	f106 040c 	add.w	r4, r6, #12
 8000558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800055a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800055c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800055e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000564:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000568:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800056c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f000 fc2f 	bl	8000dd4 <displayUART1>
			displayUART2(counter2, huart2);
 8000576:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <fsm_automatic_run+0x37c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4e20      	ldr	r6, [pc, #128]	; (8000600 <fsm_automatic_run+0x384>)
 800057e:	466d      	mov	r5, sp
 8000580:	f106 040c 	add.w	r4, r6, #12
 8000584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800058a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800058c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800058e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000590:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000594:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000598:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 fc53 	bl	8000e48 <displayUART2>
		}
		if(isButtonPressed(0)){
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 f82e 	bl	8000604 <isButtonPressed>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d002      	beq.n	80005b4 <fsm_automatic_run+0x338>
			current_state = AMBER1;
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <fsm_automatic_run+0x380>)
 80005b0:	2234      	movs	r2, #52	; 0x34
 80005b2:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(3)){
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f825 	bl	8000604 <isButtonPressed>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d00b      	beq.n	80005d8 <fsm_automatic_run+0x35c>
			current_state = PED_GREEN;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <fsm_automatic_run+0x380>)
 80005c2:	222a      	movs	r2, #42	; 0x2a
 80005c4:	601a      	str	r2, [r3, #0]
		}
		break;
 80005c6:	e007      	b.n	80005d8 <fsm_automatic_run+0x35c>

	default:
		break;
 80005c8:	bf00      	nop
 80005ca:	e006      	b.n	80005da <fsm_automatic_run+0x35e>
		break;
 80005cc:	bf00      	nop
 80005ce:	e004      	b.n	80005da <fsm_automatic_run+0x35e>
		break;
 80005d0:	bf00      	nop
 80005d2:	e002      	b.n	80005da <fsm_automatic_run+0x35e>
		break;
 80005d4:	bf00      	nop
 80005d6:	e000      	b.n	80005da <fsm_automatic_run+0x35e>
		break;
 80005d8:	bf00      	nop
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000140 	.word	0x20000140
 80005e8:	200000b0 	.word	0x200000b0
 80005ec:	20000000 	.word	0x20000000
 80005f0:	200000b4 	.word	0x200000b4
 80005f4:	20000004 	.word	0x20000004
 80005f8:	200000b8 	.word	0x200000b8
 80005fc:	20000170 	.word	0x20000170
 8000600:	20000238 	.word	0x20000238

08000604 <isButtonPressed>:
		TimeOutForKeyPress[i] =  500;
		button_flag[i] = 0;
	}
}

int isButtonPressed(int index){
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	if(index >= NO_OF_BUTTONS){
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b03      	cmp	r3, #3
 8000610:	dd01      	ble.n	8000616 <isButtonPressed+0x12>
		return 0;
 8000612:	2300      	movs	r3, #0
 8000614:	e00d      	b.n	8000632 <isButtonPressed+0x2e>
	}
	if(button_flag[index] == 1){
 8000616:	4a09      	ldr	r2, [pc, #36]	; (800063c <isButtonPressed+0x38>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d106      	bne.n	8000630 <isButtonPressed+0x2c>
		button_flag[index] = 0;
 8000622:	4a06      	ldr	r2, [pc, #24]	; (800063c <isButtonPressed+0x38>)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2100      	movs	r1, #0
 8000628:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800062c:	2301      	movs	r3, #1
 800062e:	e000      	b.n	8000632 <isButtonPressed+0x2e>
	}
	return 0;
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	2000010c 	.word	0x2000010c

08000640 <subKeyProcess>:

void subKeyProcess(int index){
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <subKeyProcess+0x1c>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2101      	movs	r1, #1
 800064e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	2000010c 	.word	0x2000010c

08000660 <getKeyInput>:

void getKeyInput(){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	e070      	b.n	800074e <getKeyInput+0xee>
		KeyReg2[i] = KeyReg1[i];
 800066c:	4a3c      	ldr	r2, [pc, #240]	; (8000760 <getKeyInput+0x100>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000674:	493b      	ldr	r1, [pc, #236]	; (8000764 <getKeyInput+0x104>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 800067c:	4a3a      	ldr	r2, [pc, #232]	; (8000768 <getKeyInput+0x108>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000684:	4936      	ldr	r1, [pc, #216]	; (8000760 <getKeyInput+0x100>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON_PORT[i], BUTTON_PIN[i]);
 800068c:	4a37      	ldr	r2, [pc, #220]	; (800076c <getKeyInput+0x10c>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000694:	4936      	ldr	r1, [pc, #216]	; (8000770 <getKeyInput+0x110>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800069c:	4619      	mov	r1, r3
 800069e:	4610      	mov	r0, r2
 80006a0:	f000 ff26 	bl	80014f0 <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4619      	mov	r1, r3
 80006a8:	4a2f      	ldr	r2, [pc, #188]	; (8000768 <getKeyInput+0x108>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80006b0:	4a2b      	ldr	r2, [pc, #172]	; (8000760 <getKeyInput+0x100>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006b8:	492b      	ldr	r1, [pc, #172]	; (8000768 <getKeyInput+0x108>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d141      	bne.n	8000748 <getKeyInput+0xe8>
 80006c4:	4a26      	ldr	r2, [pc, #152]	; (8000760 <getKeyInput+0x100>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006cc:	4925      	ldr	r1, [pc, #148]	; (8000764 <getKeyInput+0x104>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d137      	bne.n	8000748 <getKeyInput+0xe8>
		if (KeyReg2[i] != KeyReg3[i]){
 80006d8:	4a22      	ldr	r2, [pc, #136]	; (8000764 <getKeyInput+0x104>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006e0:	4924      	ldr	r1, [pc, #144]	; (8000774 <getKeyInput+0x114>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d016      	beq.n	800071a <getKeyInput+0xba>
		  KeyReg3[i] = KeyReg2[i];
 80006ec:	4a1d      	ldr	r2, [pc, #116]	; (8000764 <getKeyInput+0x104>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006f4:	491f      	ldr	r1, [pc, #124]	; (8000774 <getKeyInput+0x114>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  if (KeyReg3[i] == PRESSED_STATE){
 80006fc:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <getKeyInput+0x114>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d11f      	bne.n	8000748 <getKeyInput+0xe8>
			TimeOutForKeyPress[i] = DURATION_FOR_AUTO_INCREASING;
 8000708:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <getKeyInput+0x118>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2164      	movs	r1, #100	; 0x64
 800070e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			subKeyProcess(i);
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ff94 	bl	8000640 <subKeyProcess>
 8000718:	e016      	b.n	8000748 <getKeyInput+0xe8>
		  }
		}else{
		   TimeOutForKeyPress[i] --;
 800071a:	4a17      	ldr	r2, [pc, #92]	; (8000778 <getKeyInput+0x118>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000722:	1e5a      	subs	r2, r3, #1
 8000724:	4914      	ldr	r1, [pc, #80]	; (8000778 <getKeyInput+0x118>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimeOutForKeyPress[i] == 0){
 800072c:	4a12      	ldr	r2, [pc, #72]	; (8000778 <getKeyInput+0x118>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d107      	bne.n	8000748 <getKeyInput+0xe8>
				TimeOutForKeyPress[i] = DURATION_FOR_AUTO_INCREASING;
 8000738:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <getKeyInput+0x118>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2164      	movs	r1, #100	; 0x64
 800073e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				subKeyProcess(i);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff ff7c 	bl	8000640 <subKeyProcess>
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3301      	adds	r3, #1
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b03      	cmp	r3, #3
 8000752:	dd8b      	ble.n	800066c <getKeyInput+0xc>
			}
		}
		}
	}

}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000cc 	.word	0x200000cc
 8000764:	200000dc 	.word	0x200000dc
 8000768:	200000bc 	.word	0x200000bc
 800076c:	20000008 	.word	0x20000008
 8000770:	20000018 	.word	0x20000018
 8000774:	200000ec 	.word	0x200000ec
 8000778:	200000fc 	.word	0x200000fc

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000780:	f000 fbc2 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000784:	f000 f820 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000788:	f000 f91e 	bl	80009c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800078c:	f000 f858 	bl	8000840 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000790:	f000 f8a2 	bl	80008d8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000794:	f000 f8ee 	bl	8000974 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  current_state = GREEN2;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <main+0x40>)
 800079a:	2235      	movs	r2, #53	; 0x35
 800079c:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 800079e:	4808      	ldr	r0, [pc, #32]	; (80007c0 <main+0x44>)
 80007a0:	f001 fb34 	bl	8001e0c <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <main+0x48>)
 80007a6:	f001 fb31 	bl	8001e0c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
    setTimer(0, 5000);	// Timer RED1_GREEN2
 80007aa:	f241 3188 	movw	r1, #5000	; 0x1388
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 f98e 	bl	8000ad0 <setTimer>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_automatic_run();
 80007b4:	f7ff fd62 	bl	800027c <fsm_automatic_run>
 80007b8:	e7fc      	b.n	80007b4 <main+0x38>
 80007ba:	bf00      	nop
 80007bc:	20000170 	.word	0x20000170
 80007c0:	200001f0 	.word	0x200001f0
 80007c4:	200001a8 	.word	0x200001a8

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b090      	sub	sp, #64	; 0x40
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0318 	add.w	r3, r7, #24
 80007d2:	2228      	movs	r2, #40	; 0x28
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f002 f8c0 	bl	800295c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ea:	2302      	movs	r3, #2
 80007ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ee:	2301      	movs	r3, #1
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f2:	2310      	movs	r3, #16
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0318 	add.w	r3, r7, #24
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fea6 	bl	8001550 <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800080a:	f000 f95c 	bl	8000ac6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f001 f912 	bl	8001a50 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000832:	f000 f948 	bl	8000ac6 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3740      	adds	r7, #64	; 0x40
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_TIM2_Init+0x94>)
 800085e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000862:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_TIM2_Init+0x94>)
 8000866:	223f      	movs	r2, #63	; 0x3f
 8000868:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_TIM2_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_TIM2_Init+0x94>)
 8000872:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000876:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_TIM2_Init+0x94>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_TIM2_Init+0x94>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000884:	4813      	ldr	r0, [pc, #76]	; (80008d4 <MX_TIM2_Init+0x94>)
 8000886:	f001 fa71 	bl	8001d6c <HAL_TIM_Base_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000890:	f000 f919 	bl	8000ac6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000898:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	4619      	mov	r1, r3
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_TIM2_Init+0x94>)
 80008a2:	f001 fc0d 	bl	80020c0 <HAL_TIM_ConfigClockSource>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008ac:	f000 f90b 	bl	8000ac6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_TIM2_Init+0x94>)
 80008be:	f001 fde3 	bl	8002488 <HAL_TIMEx_MasterConfigSynchronization>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008c8:	f000 f8fd 	bl	8000ac6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200001f0 	.word	0x200001f0

080008d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	463b      	mov	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_TIM3_Init+0x94>)
 80008f6:	4a1e      	ldr	r2, [pc, #120]	; (8000970 <MX_TIM3_Init+0x98>)
 80008f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_TIM3_Init+0x94>)
 80008fc:	223f      	movs	r2, #63	; 0x3f
 80008fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_TIM3_Init+0x94>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_TIM3_Init+0x94>)
 8000908:	f240 32e7 	movw	r2, #999	; 0x3e7
 800090c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_TIM3_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_TIM3_Init+0x94>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800091a:	4814      	ldr	r0, [pc, #80]	; (800096c <MX_TIM3_Init+0x94>)
 800091c:	f001 fa26 	bl	8001d6c <HAL_TIM_Base_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000926:	f000 f8ce 	bl	8000ac6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	4619      	mov	r1, r3
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_TIM3_Init+0x94>)
 8000938:	f001 fbc2 	bl	80020c0 <HAL_TIM_ConfigClockSource>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000942:	f000 f8c0 	bl	8000ac6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <MX_TIM3_Init+0x94>)
 8000954:	f001 fd98 	bl	8002488 <HAL_TIMEx_MasterConfigSynchronization>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800095e:	f000 f8b2 	bl	8000ac6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200001a8 	.word	0x200001a8
 8000970:	40000400 	.word	0x40000400

08000974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART2_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009ac:	f001 fddc 	bl	8002568 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f000 f886 	bl	8000ac6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000238 	.word	0x20000238
 80009c4:	40004400 	.word	0x40004400

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b2e      	ldr	r3, [pc, #184]	; (8000a98 <MX_GPIO_Init+0xd0>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a2d      	ldr	r2, [pc, #180]	; (8000a98 <MX_GPIO_Init+0xd0>)
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <MX_GPIO_Init+0xd0>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <MX_GPIO_Init+0xd0>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a27      	ldr	r2, [pc, #156]	; (8000a98 <MX_GPIO_Init+0xd0>)
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0308 	and.w	r3, r3, #8
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZ_Pin|PLIGHT2_Pin|TLIGHT11_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 8000a12:	4822      	ldr	r0, [pc, #136]	; (8000a9c <MX_GPIO_Init+0xd4>)
 8000a14:	f000 fd83 	bl	800151e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLIGHT1_Pin|TLIGHT12_Pin|TLIGHT22_Pin|TLIGHT21_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000a1e:	4820      	ldr	r0, [pc, #128]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a20:	f000 fd7d 	bl	800151e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BT3_Pin BT0_Pin BT1_Pin */
  GPIO_InitStruct.Pin = BT3_Pin|BT0_Pin|BT1_Pin;
 8000a24:	2313      	movs	r3, #19
 8000a26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	4619      	mov	r1, r3
 8000a36:	4819      	ldr	r0, [pc, #100]	; (8000a9c <MX_GPIO_Init+0xd4>)
 8000a38:	f000 fbd6 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZ_Pin PLIGHT2_Pin TLIGHT11_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|PLIGHT2_Pin|TLIGHT11_Pin;
 8000a3c:	f44f 63a8 	mov.w	r3, #1344	; 0x540
 8000a40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	4619      	mov	r1, r3
 8000a54:	4811      	ldr	r0, [pc, #68]	; (8000a9c <MX_GPIO_Init+0xd4>)
 8000a56:	f000 fbc7 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT2_Pin */
  GPIO_InitStruct.Pin = BT2_Pin;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BT2_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a6e:	f000 fbbb 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLIGHT1_Pin TLIGHT12_Pin TLIGHT22_Pin TLIGHT21_Pin */
  GPIO_InitStruct.Pin = PLIGHT1_Pin|TLIGHT12_Pin|TLIGHT22_Pin|TLIGHT21_Pin;
 8000a72:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000a76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2302      	movs	r3, #2
 8000a82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a8c:	f000 fbac 	bl	80011e8 <HAL_GPIO_Init>

}
 8000a90:	bf00      	nop
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40010800 	.word	0x40010800
 8000aa0:	40010c00 	.word	0x40010c00

08000aa4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ab4:	d103      	bne.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x1a>
		getKeyInput();
 8000ab6:	f7ff fdd3 	bl	8000660 <getKeyInput>
		timerRun();
 8000aba:	f000 f827 	bl	8000b0c <timerRun>
	}else if(htim->Instance == TIM3){

	}
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aca:	b672      	cpsid	i
}
 8000acc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ace:	e7fe      	b.n	8000ace <Error_Handler+0x8>

08000ad0 <setTimer>:
int TIME_CYCLE = 10; // Time cycle

int timer_counter[NUM_OF_TIMERS] = {0};
int timer_flag[NUM_OF_TIMERS] = {0};

void setTimer(int index, int duration) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIME_CYCLE;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <setTimer+0x30>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	683a      	ldr	r2, [r7, #0]
 8000ae0:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ae4:	4907      	ldr	r1, [pc, #28]	; (8000b04 <setTimer+0x34>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000aec:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <setTimer+0x38>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2100      	movs	r1, #0
 8000af2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	20000020 	.word	0x20000020
 8000b04:	2000011c 	.word	0x2000011c
 8000b08:	20000140 	.word	0x20000140

08000b0c <timerRun>:
void clearTimer(int index) {
	timer_counter[index] = 0;
	timer_flag[index] = 0;
}

void timerRun(){
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	e01c      	b.n	8000b52 <timerRun+0x46>
		if (timer_counter[i] > 0){
 8000b18:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <timerRun+0x58>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	dd13      	ble.n	8000b4c <timerRun+0x40>
			timer_counter[i]--;
 8000b24:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <timerRun+0x58>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2c:	1e5a      	subs	r2, r3, #1
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <timerRun+0x58>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <timerRun+0x58>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	dc04      	bgt.n	8000b4c <timerRun+0x40>
				timer_flag[i] = 1;
 8000b42:	4a09      	ldr	r2, [pc, #36]	; (8000b68 <timerRun+0x5c>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2101      	movs	r1, #1
 8000b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b08      	cmp	r3, #8
 8000b56:	dddf      	ble.n	8000b18 <timerRun+0xc>
			}
		}
	}
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	2000011c 	.word	0x2000011c
 8000b68:	20000140 	.word	0x20000140

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6193      	str	r3, [r2, #24]
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_MspInit+0x60>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_MspInit+0x60>)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010000 	.word	0x40010000

08000bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be0:	d114      	bne.n	8000c0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_TIM_Base_MspInit+0x78>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <HAL_TIM_Base_MspInit+0x78>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	61d3      	str	r3, [r2, #28]
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_TIM_Base_MspInit+0x78>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	201c      	movs	r0, #28
 8000c00:	f000 fabb 	bl	800117a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c04:	201c      	movs	r0, #28
 8000c06:	f000 fad4 	bl	80011b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c0a:	e018      	b.n	8000c3e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <HAL_TIM_Base_MspInit+0x7c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d113      	bne.n	8000c3e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_TIM_Base_MspInit+0x78>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <HAL_TIM_Base_MspInit+0x78>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	61d3      	str	r3, [r2, #28]
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_TIM_Base_MspInit+0x78>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	201d      	movs	r0, #29
 8000c34:	f000 faa1 	bl	800117a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c38:	201d      	movs	r0, #29
 8000c3a:	f000 faba 	bl	80011b2 <HAL_NVIC_EnableIRQ>
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40000400 	.word	0x40000400

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <HAL_UART_MspInit+0x88>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d12f      	bne.n	8000cd0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_UART_MspInit+0x8c>)
 8000c72:	69db      	ldr	r3, [r3, #28]
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_UART_MspInit+0x8c>)
 8000c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7a:	61d3      	str	r3, [r2, #28]
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_UART_MspInit+0x8c>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_UART_MspInit+0x8c>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <HAL_UART_MspInit+0x8c>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_UART_MspInit+0x8c>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <HAL_UART_MspInit+0x90>)
 8000cb4:	f000 fa98 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_UART_MspInit+0x90>)
 8000ccc:	f000 fa8c 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40004400 	.word	0x40004400
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010800 	.word	0x40010800

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <NMI_Handler+0x4>

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2a:	f000 f933 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <TIM2_IRQHandler+0x10>)
 8000d3a:	f001 f8b9 	bl	8001eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200001f0 	.word	0x200001f0

08000d48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <TIM3_IRQHandler+0x10>)
 8000d4e:	f001 f8af 	bl	8001eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200001a8 	.word	0x200001a8

08000d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d64:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <_sbrk+0x5c>)
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <_sbrk+0x60>)
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <_sbrk+0x64>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <_sbrk+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d207      	bcs.n	8000d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d8c:	f001 fdbc 	bl	8002908 <__errno>
 8000d90:	4603      	mov	r3, r0
 8000d92:	220c      	movs	r2, #12
 8000d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9a:	e009      	b.n	8000db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <_sbrk+0x64>)
 8000dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20005000 	.word	0x20005000
 8000dbc:	00000400 	.word	0x00000400
 8000dc0:	20000164 	.word	0x20000164
 8000dc4:	20000298 	.word	0x20000298

08000dc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <displayUART1>:


#include "stdio.h"
#include "main.h"

void displayUART1(int counter, UART_HandleTypeDef huart2) {
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b084      	sub	sp, #16
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	f107 001c 	add.w	r0, r7, #28
 8000de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int t = counter / 10;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <displayUART1+0x68>)
 8000dea:	fb82 1203 	smull	r1, r2, r2, r3
 8000dee:	1092      	asrs	r2, r2, #2
 8000df0:	17db      	asrs	r3, r3, #31
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	60fb      	str	r3, [r7, #12]
	int u = counter % 10;
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <displayUART1+0x68>)
 8000dfa:	fb83 1302 	smull	r1, r3, r3, r2
 8000dfe:	1099      	asrs	r1, r3, #2
 8000e00:	17d3      	asrs	r3, r2, #31
 8000e02:	1ac9      	subs	r1, r1, r3
 8000e04:	460b      	mov	r3, r1
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	440b      	add	r3, r1
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!7SEG1=%u%u#\r\n", t, u), 1000);
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	490a      	ldr	r1, [pc, #40]	; (8000e40 <displayUART1+0x6c>)
 8000e16:	480b      	ldr	r0, [pc, #44]	; (8000e44 <displayUART1+0x70>)
 8000e18:	f001 fda8 	bl	800296c <siprintf>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	f107 001c 	add.w	r0, r7, #28
 8000e24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e28:	4906      	ldr	r1, [pc, #24]	; (8000e44 <displayUART1+0x70>)
 8000e2a:	f001 fbed 	bl	8002608 <HAL_UART_Transmit>
}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e38:	b004      	add	sp, #16
 8000e3a:	4770      	bx	lr
 8000e3c:	66666667 	.word	0x66666667
 8000e40:	080031f8 	.word	0x080031f8
 8000e44:	20000174 	.word	0x20000174

08000e48 <displayUART2>:

void displayUART2(int counter, UART_HandleTypeDef huart2) {
 8000e48:	b084      	sub	sp, #16
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	f107 001c 	add.w	r0, r7, #28
 8000e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int t = counter / 10;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <displayUART2+0x68>)
 8000e5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e62:	1092      	asrs	r2, r2, #2
 8000e64:	17db      	asrs	r3, r3, #31
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	60fb      	str	r3, [r7, #12]
	int u = counter % 10;
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <displayUART2+0x68>)
 8000e6e:	fb83 1302 	smull	r1, r3, r3, r2
 8000e72:	1099      	asrs	r1, r3, #2
 8000e74:	17d3      	asrs	r3, r2, #31
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	460b      	mov	r3, r1
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!7SEG2=%u%u#\r\n", t, u), 1000);
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	490a      	ldr	r1, [pc, #40]	; (8000eb4 <displayUART2+0x6c>)
 8000e8a:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <displayUART2+0x70>)
 8000e8c:	f001 fd6e 	bl	800296c <siprintf>
 8000e90:	4603      	mov	r3, r0
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	f107 001c 	add.w	r0, r7, #28
 8000e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9c:	4906      	ldr	r1, [pc, #24]	; (8000eb8 <displayUART2+0x70>)
 8000e9e:	f001 fbb3 	bl	8002608 <HAL_UART_Transmit>
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eac:	b004      	add	sp, #16
 8000eae:	4770      	bx	lr
 8000eb0:	66666667 	.word	0x66666667
 8000eb4:	08003208 	.word	0x08003208
 8000eb8:	20000174 	.word	0x20000174

08000ebc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ebc:	f7ff ff84 	bl	8000dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec0:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ec2:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ec4:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec8:	e002      	b.n	8000ed0 <LoopCopyDataInit>

08000eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ece:	3304      	adds	r3, #4

08000ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed4:	d3f9      	bcc.n	8000eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed6:	4a09      	ldr	r2, [pc, #36]	; (8000efc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ed8:	4c09      	ldr	r4, [pc, #36]	; (8000f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000edc:	e001      	b.n	8000ee2 <LoopFillZerobss>

08000ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee0:	3204      	adds	r2, #4

08000ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee4:	d3fb      	bcc.n	8000ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f001 fd15 	bl	8002914 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eea:	f7ff fc47 	bl	800077c <main>
  bx lr
 8000eee:	4770      	bx	lr
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000ef8:	08003280 	.word	0x08003280
  ldr r2, =_sbss
 8000efc:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000f00:	20000294 	.word	0x20000294

08000f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC1_2_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_Init+0x28>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_Init+0x28>)
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f923 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	200f      	movs	r0, #15
 8000f20:	f000 f808 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f7ff fe22 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40022000 	.word	0x40022000

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x54>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x58>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f93b 	bl	80011ce <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00e      	b.n	8000f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d80a      	bhi.n	8000f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f000 f903 	bl	800117a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_InitTick+0x5c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000024 	.word	0x20000024
 8000f8c:	2000002c 	.word	0x2000002c
 8000f90:	20000028 	.word	0x20000028

08000f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_IncTick+0x1c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_IncTick+0x20>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a03      	ldr	r2, [pc, #12]	; (8000fb4 <HAL_IncTick+0x20>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	2000002c 	.word	0x2000002c
 8000fb4:	20000280 	.word	0x20000280

08000fb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b02      	ldr	r3, [pc, #8]	; (8000fc8 <HAL_GetTick+0x10>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	20000280 	.word	0x20000280

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4906      	ldr	r1, [pc, #24]	; (8001064 <__NVIC_EnableIRQ+0x34>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001130:	d301      	bcc.n	8001136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001132:	2301      	movs	r3, #1
 8001134:	e00f      	b.n	8001156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <SysTick_Config+0x40>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113e:	210f      	movs	r1, #15
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f7ff ff90 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <SysTick_Config+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SysTick_Config+0x40>)
 8001150:	2207      	movs	r2, #7
 8001152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff2d 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff42 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff90 	bl	80010bc <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff5f 	bl	8001068 <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff35 	bl	8001030 <__NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffa2 	bl	8001120 <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b08b      	sub	sp, #44	; 0x2c
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fa:	e169      	b.n	80014d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011fc:	2201      	movs	r2, #1
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	429a      	cmp	r2, r3
 8001216:	f040 8158 	bne.w	80014ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a9a      	ldr	r2, [pc, #616]	; (8001488 <HAL_GPIO_Init+0x2a0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d05e      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001224:	4a98      	ldr	r2, [pc, #608]	; (8001488 <HAL_GPIO_Init+0x2a0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d875      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800122a:	4a98      	ldr	r2, [pc, #608]	; (800148c <HAL_GPIO_Init+0x2a4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d058      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001230:	4a96      	ldr	r2, [pc, #600]	; (800148c <HAL_GPIO_Init+0x2a4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d86f      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001236:	4a96      	ldr	r2, [pc, #600]	; (8001490 <HAL_GPIO_Init+0x2a8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d052      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 800123c:	4a94      	ldr	r2, [pc, #592]	; (8001490 <HAL_GPIO_Init+0x2a8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d869      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001242:	4a94      	ldr	r2, [pc, #592]	; (8001494 <HAL_GPIO_Init+0x2ac>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d04c      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001248:	4a92      	ldr	r2, [pc, #584]	; (8001494 <HAL_GPIO_Init+0x2ac>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d863      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800124e:	4a92      	ldr	r2, [pc, #584]	; (8001498 <HAL_GPIO_Init+0x2b0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d046      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001254:	4a90      	ldr	r2, [pc, #576]	; (8001498 <HAL_GPIO_Init+0x2b0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d85d      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800125a:	2b12      	cmp	r3, #18
 800125c:	d82a      	bhi.n	80012b4 <HAL_GPIO_Init+0xcc>
 800125e:	2b12      	cmp	r3, #18
 8001260:	d859      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001262:	a201      	add	r2, pc, #4	; (adr r2, 8001268 <HAL_GPIO_Init+0x80>)
 8001264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001268:	080012e3 	.word	0x080012e3
 800126c:	080012bd 	.word	0x080012bd
 8001270:	080012cf 	.word	0x080012cf
 8001274:	08001311 	.word	0x08001311
 8001278:	08001317 	.word	0x08001317
 800127c:	08001317 	.word	0x08001317
 8001280:	08001317 	.word	0x08001317
 8001284:	08001317 	.word	0x08001317
 8001288:	08001317 	.word	0x08001317
 800128c:	08001317 	.word	0x08001317
 8001290:	08001317 	.word	0x08001317
 8001294:	08001317 	.word	0x08001317
 8001298:	08001317 	.word	0x08001317
 800129c:	08001317 	.word	0x08001317
 80012a0:	08001317 	.word	0x08001317
 80012a4:	08001317 	.word	0x08001317
 80012a8:	08001317 	.word	0x08001317
 80012ac:	080012c5 	.word	0x080012c5
 80012b0:	080012d9 	.word	0x080012d9
 80012b4:	4a79      	ldr	r2, [pc, #484]	; (800149c <HAL_GPIO_Init+0x2b4>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ba:	e02c      	b.n	8001316 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e029      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	3304      	adds	r3, #4
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	e024      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	3308      	adds	r3, #8
 80012d4:	623b      	str	r3, [r7, #32]
          break;
 80012d6:	e01f      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	330c      	adds	r3, #12
 80012de:	623b      	str	r3, [r7, #32]
          break;
 80012e0:	e01a      	b.n	8001318 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ea:	2304      	movs	r3, #4
 80012ec:	623b      	str	r3, [r7, #32]
          break;
 80012ee:	e013      	b.n	8001318 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f8:	2308      	movs	r3, #8
 80012fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	611a      	str	r2, [r3, #16]
          break;
 8001302:	e009      	b.n	8001318 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001304:	2308      	movs	r3, #8
 8001306:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	615a      	str	r2, [r3, #20]
          break;
 800130e:	e003      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
          break;
 8001314:	e000      	b.n	8001318 <HAL_GPIO_Init+0x130>
          break;
 8001316:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2bff      	cmp	r3, #255	; 0xff
 800131c:	d801      	bhi.n	8001322 <HAL_GPIO_Init+0x13a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	e001      	b.n	8001326 <HAL_GPIO_Init+0x13e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3304      	adds	r3, #4
 8001326:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2bff      	cmp	r3, #255	; 0xff
 800132c:	d802      	bhi.n	8001334 <HAL_GPIO_Init+0x14c>
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	e002      	b.n	800133a <HAL_GPIO_Init+0x152>
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	3b08      	subs	r3, #8
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	210f      	movs	r1, #15
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	401a      	ands	r2, r3
 800134c:	6a39      	ldr	r1, [r7, #32]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	431a      	orrs	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 80b1 	beq.w	80014ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001368:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <HAL_GPIO_Init+0x2b8>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a4c      	ldr	r2, [pc, #304]	; (80014a0 <HAL_GPIO_Init+0x2b8>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <HAL_GPIO_Init+0x2b8>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001380:	4a48      	ldr	r2, [pc, #288]	; (80014a4 <HAL_GPIO_Init+0x2bc>)
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	4013      	ands	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a40      	ldr	r2, [pc, #256]	; (80014a8 <HAL_GPIO_Init+0x2c0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d013      	beq.n	80013d4 <HAL_GPIO_Init+0x1ec>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a3f      	ldr	r2, [pc, #252]	; (80014ac <HAL_GPIO_Init+0x2c4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d00d      	beq.n	80013d0 <HAL_GPIO_Init+0x1e8>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <HAL_GPIO_Init+0x2c8>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d007      	beq.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <HAL_GPIO_Init+0x2cc>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_GPIO_Init+0x1e0>
 80013c4:	2303      	movs	r3, #3
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013c8:	2304      	movs	r3, #4
 80013ca:	e004      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e002      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013d4:	2300      	movs	r3, #0
 80013d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d8:	f002 0203 	and.w	r2, r2, #3
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	4093      	lsls	r3, r2
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013e6:	492f      	ldr	r1, [pc, #188]	; (80014a4 <HAL_GPIO_Init+0x2bc>)
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	492c      	ldr	r1, [pc, #176]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	608b      	str	r3, [r1, #8]
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800140e:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	43db      	mvns	r3, r3
 8001416:	4928      	ldr	r1, [pc, #160]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001418:	4013      	ands	r3, r2
 800141a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	4922      	ldr	r1, [pc, #136]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	60cb      	str	r3, [r1, #12]
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	43db      	mvns	r3, r3
 800143e:	491e      	ldr	r1, [pc, #120]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001440:	4013      	ands	r3, r2
 8001442:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d006      	beq.n	800145e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4918      	ldr	r1, [pc, #96]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	43db      	mvns	r3, r3
 8001466:	4914      	ldr	r1, [pc, #80]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001468:	4013      	ands	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d021      	beq.n	80014bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	490e      	ldr	r1, [pc, #56]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
 8001484:	e021      	b.n	80014ca <HAL_GPIO_Init+0x2e2>
 8001486:	bf00      	nop
 8001488:	10320000 	.word	0x10320000
 800148c:	10310000 	.word	0x10310000
 8001490:	10220000 	.word	0x10220000
 8001494:	10210000 	.word	0x10210000
 8001498:	10120000 	.word	0x10120000
 800149c:	10110000 	.word	0x10110000
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010000 	.word	0x40010000
 80014a8:	40010800 	.word	0x40010800
 80014ac:	40010c00 	.word	0x40010c00
 80014b0:	40011000 	.word	0x40011000
 80014b4:	40011400 	.word	0x40011400
 80014b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_GPIO_Init+0x304>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	4909      	ldr	r1, [pc, #36]	; (80014ec <HAL_GPIO_Init+0x304>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	3301      	adds	r3, #1
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	fa22 f303 	lsr.w	r3, r2, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f47f ae8e 	bne.w	80011fc <HAL_GPIO_Init+0x14>
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	372c      	adds	r7, #44	; 0x2c
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	40010400 	.word	0x40010400

080014f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
 800150c:	e001      	b.n	8001512 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	807b      	strh	r3, [r7, #2]
 800152a:	4613      	mov	r3, r2
 800152c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800152e:	787b      	ldrb	r3, [r7, #1]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001534:	887a      	ldrh	r2, [r7, #2]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800153a:	e003      	b.n	8001544 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800153c:	887b      	ldrh	r3, [r7, #2]
 800153e:	041a      	lsls	r2, r3, #16
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	611a      	str	r2, [r3, #16]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
	...

08001550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e26c      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 8087 	beq.w	800167e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001570:	4b92      	ldr	r3, [pc, #584]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 030c 	and.w	r3, r3, #12
 8001578:	2b04      	cmp	r3, #4
 800157a:	d00c      	beq.n	8001596 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800157c:	4b8f      	ldr	r3, [pc, #572]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	2b08      	cmp	r3, #8
 8001586:	d112      	bne.n	80015ae <HAL_RCC_OscConfig+0x5e>
 8001588:	4b8c      	ldr	r3, [pc, #560]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001594:	d10b      	bne.n	80015ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001596:	4b89      	ldr	r3, [pc, #548]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d06c      	beq.n	800167c <HAL_RCC_OscConfig+0x12c>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d168      	bne.n	800167c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e246      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b6:	d106      	bne.n	80015c6 <HAL_RCC_OscConfig+0x76>
 80015b8:	4b80      	ldr	r3, [pc, #512]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a7f      	ldr	r2, [pc, #508]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e02e      	b.n	8001624 <HAL_RCC_OscConfig+0xd4>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x98>
 80015ce:	4b7b      	ldr	r3, [pc, #492]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a7a      	ldr	r2, [pc, #488]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b78      	ldr	r3, [pc, #480]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a77      	ldr	r2, [pc, #476]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e01d      	b.n	8001624 <HAL_RCC_OscConfig+0xd4>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f0:	d10c      	bne.n	800160c <HAL_RCC_OscConfig+0xbc>
 80015f2:	4b72      	ldr	r3, [pc, #456]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a71      	ldr	r2, [pc, #452]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b6f      	ldr	r3, [pc, #444]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6e      	ldr	r2, [pc, #440]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e00b      	b.n	8001624 <HAL_RCC_OscConfig+0xd4>
 800160c:	4b6b      	ldr	r3, [pc, #428]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a6a      	ldr	r2, [pc, #424]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b68      	ldr	r3, [pc, #416]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a67      	ldr	r2, [pc, #412]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800161e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001622:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d013      	beq.n	8001654 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fcc4 	bl	8000fb8 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff fcc0 	bl	8000fb8 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	; 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1fa      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	4b5d      	ldr	r3, [pc, #372]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0xe4>
 8001652:	e014      	b.n	800167e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff fcb0 	bl	8000fb8 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff fcac 	bl	8000fb8 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e1e6      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166e:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x10c>
 800167a:	e000      	b.n	800167e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d063      	beq.n	8001752 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800168a:	4b4c      	ldr	r3, [pc, #304]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00b      	beq.n	80016ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001696:	4b49      	ldr	r3, [pc, #292]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d11c      	bne.n	80016dc <HAL_RCC_OscConfig+0x18c>
 80016a2:	4b46      	ldr	r3, [pc, #280]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d116      	bne.n	80016dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ae:	4b43      	ldr	r3, [pc, #268]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <HAL_RCC_OscConfig+0x176>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e1ba      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c6:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	4939      	ldr	r1, [pc, #228]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016da:	e03a      	b.n	8001752 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d020      	beq.n	8001726 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e4:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7ff fc65 	bl	8000fb8 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f2:	f7ff fc61 	bl	8000fb8 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e19b      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001704:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001710:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4927      	ldr	r1, [pc, #156]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]
 8001724:	e015      	b.n	8001752 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fc44 	bl	8000fb8 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001734:	f7ff fc40 	bl	8000fb8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e17a      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d03a      	beq.n	80017d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d019      	beq.n	800179a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_RCC_OscConfig+0x274>)
 8001768:	2201      	movs	r2, #1
 800176a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176c:	f7ff fc24 	bl	8000fb8 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001774:	f7ff fc20 	bl	8000fb8 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e15a      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001792:	2001      	movs	r0, #1
 8001794:	f000 facc 	bl	8001d30 <RCC_Delay>
 8001798:	e01c      	b.n	80017d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_RCC_OscConfig+0x274>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a0:	f7ff fc0a 	bl	8000fb8 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a6:	e00f      	b.n	80017c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a8:	f7ff fc06 	bl	8000fb8 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d908      	bls.n	80017c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e140      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	42420000 	.word	0x42420000
 80017c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	4b9e      	ldr	r3, [pc, #632]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1e9      	bne.n	80017a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80a6 	beq.w	800192e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e6:	4b97      	ldr	r3, [pc, #604]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10d      	bne.n	800180e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	4b94      	ldr	r3, [pc, #592]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a93      	ldr	r2, [pc, #588]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fc:	61d3      	str	r3, [r2, #28]
 80017fe:	4b91      	ldr	r3, [pc, #580]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180a:	2301      	movs	r3, #1
 800180c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180e:	4b8e      	ldr	r3, [pc, #568]	; (8001a48 <HAL_RCC_OscConfig+0x4f8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d118      	bne.n	800184c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181a:	4b8b      	ldr	r3, [pc, #556]	; (8001a48 <HAL_RCC_OscConfig+0x4f8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a8a      	ldr	r2, [pc, #552]	; (8001a48 <HAL_RCC_OscConfig+0x4f8>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001826:	f7ff fbc7 	bl	8000fb8 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182e:	f7ff fbc3 	bl	8000fb8 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b64      	cmp	r3, #100	; 0x64
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0fd      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	4b81      	ldr	r3, [pc, #516]	; (8001a48 <HAL_RCC_OscConfig+0x4f8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x312>
 8001854:	4b7b      	ldr	r3, [pc, #492]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4a7a      	ldr	r2, [pc, #488]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6213      	str	r3, [r2, #32]
 8001860:	e02d      	b.n	80018be <HAL_RCC_OscConfig+0x36e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x334>
 800186a:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	4a75      	ldr	r2, [pc, #468]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	6213      	str	r3, [r2, #32]
 8001876:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	4a72      	ldr	r2, [pc, #456]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800187c:	f023 0304 	bic.w	r3, r3, #4
 8001880:	6213      	str	r3, [r2, #32]
 8001882:	e01c      	b.n	80018be <HAL_RCC_OscConfig+0x36e>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x356>
 800188c:	4b6d      	ldr	r3, [pc, #436]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4a6c      	ldr	r2, [pc, #432]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6213      	str	r3, [r2, #32]
 8001898:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4a69      	ldr	r2, [pc, #420]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6213      	str	r3, [r2, #32]
 80018a4:	e00b      	b.n	80018be <HAL_RCC_OscConfig+0x36e>
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4a66      	ldr	r2, [pc, #408]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	6213      	str	r3, [r2, #32]
 80018b2:	4b64      	ldr	r3, [pc, #400]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4a63      	ldr	r2, [pc, #396]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	f023 0304 	bic.w	r3, r3, #4
 80018bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d015      	beq.n	80018f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff fb77 	bl	8000fb8 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7ff fb73 	bl	8000fb8 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0ab      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e4:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0ee      	beq.n	80018ce <HAL_RCC_OscConfig+0x37e>
 80018f0:	e014      	b.n	800191c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7ff fb61 	bl	8000fb8 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7ff fb5d 	bl	8000fb8 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f241 3288 	movw	r2, #5000	; 0x1388
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e095      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001910:	4b4c      	ldr	r3, [pc, #304]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1ee      	bne.n	80018fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d105      	bne.n	800192e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001922:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a47      	ldr	r2, [pc, #284]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8081 	beq.w	8001a3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001938:	4b42      	ldr	r3, [pc, #264]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b08      	cmp	r3, #8
 8001942:	d061      	beq.n	8001a08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d146      	bne.n	80019da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194c:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <HAL_RCC_OscConfig+0x4fc>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7ff fb31 	bl	8000fb8 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195a:	f7ff fb2d 	bl	8000fb8 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e067      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196c:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f0      	bne.n	800195a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001980:	d108      	bne.n	8001994 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001982:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	492d      	ldr	r1, [pc, #180]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001994:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a19      	ldr	r1, [r3, #32]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	430b      	orrs	r3, r1
 80019a6:	4927      	ldr	r1, [pc, #156]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_RCC_OscConfig+0x4fc>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff fb01 	bl	8000fb8 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ba:	f7ff fafd 	bl	8000fb8 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e037      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x46a>
 80019d8:	e02f      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_RCC_OscConfig+0x4fc>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff faea 	bl	8000fb8 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff fae6 	bl	8000fb8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e020      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x498>
 8001a06:	e018      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e013      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d001      	beq.n	8001a3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	42420060 	.word	0x42420060

08001a50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0d0      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a64:	4b6a      	ldr	r3, [pc, #424]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d910      	bls.n	8001a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b67      	ldr	r3, [pc, #412]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 0207 	bic.w	r2, r3, #7
 8001a7a:	4965      	ldr	r1, [pc, #404]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b63      	ldr	r3, [pc, #396]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0b8      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d020      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aac:	4b59      	ldr	r3, [pc, #356]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	4a58      	ldr	r2, [pc, #352]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ab6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac4:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	4a52      	ldr	r2, [pc, #328]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ace:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	494d      	ldr	r1, [pc, #308]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d040      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d115      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e07f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0e:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e073      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e06b      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2e:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f023 0203 	bic.w	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4936      	ldr	r1, [pc, #216]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b40:	f7ff fa3a 	bl	8000fb8 <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b48:	f7ff fa36 	bl	8000fb8 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e053      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 020c 	and.w	r2, r3, #12
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d1eb      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d210      	bcs.n	8001ba0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 0207 	bic.w	r2, r3, #7
 8001b86:	4922      	ldr	r1, [pc, #136]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e032      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4916      	ldr	r1, [pc, #88]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	490e      	ldr	r1, [pc, #56]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bde:	f000 f821 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001be2:	4602      	mov	r2, r0
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	490a      	ldr	r1, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf0:	5ccb      	ldrb	r3, [r1, r3]
 8001bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x1cc>)
 8001bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_ClockConfig+0x1d0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f998 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40022000 	.word	0x40022000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	08003218 	.word	0x08003218
 8001c1c:	20000024 	.word	0x20000024
 8001c20:	20000028 	.word	0x20000028

08001c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d002      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x30>
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d003      	beq.n	8001c5a <HAL_RCC_GetSysClockFreq+0x36>
 8001c52:	e027      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c54:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8001c56:	613b      	str	r3, [r7, #16]
      break;
 8001c58:	e027      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	0c9b      	lsrs	r3, r3, #18
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c64:	5cd3      	ldrb	r3, [r2, r3]
 8001c66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d010      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	0c5b      	lsrs	r3, r3, #17
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	4a11      	ldr	r2, [pc, #68]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8001c86:	fb02 f203 	mul.w	r2, r2, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e004      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a0c      	ldr	r2, [pc, #48]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c98:	fb02 f303 	mul.w	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	613b      	str	r3, [r7, #16]
      break;
 8001ca2:	e002      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ca6:	613b      	str	r3, [r7, #16]
      break;
 8001ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001caa:	693b      	ldr	r3, [r7, #16]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	371c      	adds	r7, #28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	007a1200 	.word	0x007a1200
 8001cc0:	08003230 	.word	0x08003230
 8001cc4:	08003240 	.word	0x08003240
 8001cc8:	003d0900 	.word	0x003d0900

08001ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	20000024 	.word	0x20000024

08001ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ce4:	f7ff fff2 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	0a1b      	lsrs	r3, r3, #8
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	4903      	ldr	r1, [pc, #12]	; (8001d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf6:	5ccb      	ldrb	r3, [r1, r3]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	08003228 	.word	0x08003228

08001d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001d10:	4602      	mov	r2, r0
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	0adb      	lsrs	r3, r3, #11
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	4903      	ldr	r1, [pc, #12]	; (8001d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d1e:	5ccb      	ldrb	r3, [r1, r3]
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08003228 	.word	0x08003228

08001d30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <RCC_Delay+0x34>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <RCC_Delay+0x38>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	0a5b      	lsrs	r3, r3, #9
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	fb02 f303 	mul.w	r3, r2, r3
 8001d4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d4c:	bf00      	nop
  }
  while (Delay --);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1e5a      	subs	r2, r3, #1
 8001d52:	60fa      	str	r2, [r7, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f9      	bne.n	8001d4c <RCC_Delay+0x1c>
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	20000024 	.word	0x20000024
 8001d68:	10624dd3 	.word	0x10624dd3

08001d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e041      	b.n	8001e02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe ff1c 	bl	8000bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3304      	adds	r3, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4610      	mov	r0, r2
 8001dac:	f000 fa74 	bl	8002298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d001      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e03a      	b.n	8001e9a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <HAL_TIM_Base_Start_IT+0x98>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00e      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x58>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4e:	d009      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x58>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a14      	ldr	r2, [pc, #80]	; (8001ea8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d004      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x58>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a13      	ldr	r2, [pc, #76]	; (8001eac <HAL_TIM_Base_Start_IT+0xa0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d111      	bne.n	8001e88 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d010      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e86:	e007      	b.n	8001e98 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	40012c00 	.word	0x40012c00
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	40000800 	.word	0x40000800

08001eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d122      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d11b      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0202 	mvn.w	r2, #2
 8001edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f9b4 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f9a7 	bl	800224e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f9b6 	bl	8002272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d122      	bne.n	8001f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d11b      	bne.n	8001f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0204 	mvn.w	r2, #4
 8001f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2202      	movs	r2, #2
 8001f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f98a 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 8001f4c:	e005      	b.n	8001f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f97d 	bl	800224e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f98c 	bl	8002272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d122      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d11b      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0208 	mvn.w	r2, #8
 8001f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2204      	movs	r2, #4
 8001f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f960 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f953 	bl	800224e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f962 	bl	8002272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b10      	cmp	r3, #16
 8001fc0:	d122      	bne.n	8002008 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b10      	cmp	r3, #16
 8001fce:	d11b      	bne.n	8002008 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0210 	mvn.w	r2, #16
 8001fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2208      	movs	r2, #8
 8001fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f936 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e005      	b.n	8002002 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f929 	bl	800224e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f938 	bl	8002272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10e      	bne.n	8002034 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0201 	mvn.w	r2, #1
 800202c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7fe fd38 	bl	8000aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203e:	2b80      	cmp	r3, #128	; 0x80
 8002040:	d10e      	bne.n	8002060 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204c:	2b80      	cmp	r3, #128	; 0x80
 800204e:	d107      	bne.n	8002060 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fa7b 	bl	8002556 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206a:	2b40      	cmp	r3, #64	; 0x40
 800206c:	d10e      	bne.n	800208c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002078:	2b40      	cmp	r3, #64	; 0x40
 800207a:	d107      	bne.n	800208c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8fc 	bl	8002284 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b20      	cmp	r3, #32
 8002098:	d10e      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	d107      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0220 	mvn.w	r2, #32
 80020b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fa46 	bl	8002544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_TIM_ConfigClockSource+0x1c>
 80020d8:	2302      	movs	r3, #2
 80020da:	e0b4      	b.n	8002246 <HAL_TIM_ConfigClockSource+0x186>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002114:	d03e      	beq.n	8002194 <HAL_TIM_ConfigClockSource+0xd4>
 8002116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800211a:	f200 8087 	bhi.w	800222c <HAL_TIM_ConfigClockSource+0x16c>
 800211e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002122:	f000 8086 	beq.w	8002232 <HAL_TIM_ConfigClockSource+0x172>
 8002126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800212a:	d87f      	bhi.n	800222c <HAL_TIM_ConfigClockSource+0x16c>
 800212c:	2b70      	cmp	r3, #112	; 0x70
 800212e:	d01a      	beq.n	8002166 <HAL_TIM_ConfigClockSource+0xa6>
 8002130:	2b70      	cmp	r3, #112	; 0x70
 8002132:	d87b      	bhi.n	800222c <HAL_TIM_ConfigClockSource+0x16c>
 8002134:	2b60      	cmp	r3, #96	; 0x60
 8002136:	d050      	beq.n	80021da <HAL_TIM_ConfigClockSource+0x11a>
 8002138:	2b60      	cmp	r3, #96	; 0x60
 800213a:	d877      	bhi.n	800222c <HAL_TIM_ConfigClockSource+0x16c>
 800213c:	2b50      	cmp	r3, #80	; 0x50
 800213e:	d03c      	beq.n	80021ba <HAL_TIM_ConfigClockSource+0xfa>
 8002140:	2b50      	cmp	r3, #80	; 0x50
 8002142:	d873      	bhi.n	800222c <HAL_TIM_ConfigClockSource+0x16c>
 8002144:	2b40      	cmp	r3, #64	; 0x40
 8002146:	d058      	beq.n	80021fa <HAL_TIM_ConfigClockSource+0x13a>
 8002148:	2b40      	cmp	r3, #64	; 0x40
 800214a:	d86f      	bhi.n	800222c <HAL_TIM_ConfigClockSource+0x16c>
 800214c:	2b30      	cmp	r3, #48	; 0x30
 800214e:	d064      	beq.n	800221a <HAL_TIM_ConfigClockSource+0x15a>
 8002150:	2b30      	cmp	r3, #48	; 0x30
 8002152:	d86b      	bhi.n	800222c <HAL_TIM_ConfigClockSource+0x16c>
 8002154:	2b20      	cmp	r3, #32
 8002156:	d060      	beq.n	800221a <HAL_TIM_ConfigClockSource+0x15a>
 8002158:	2b20      	cmp	r3, #32
 800215a:	d867      	bhi.n	800222c <HAL_TIM_ConfigClockSource+0x16c>
 800215c:	2b00      	cmp	r3, #0
 800215e:	d05c      	beq.n	800221a <HAL_TIM_ConfigClockSource+0x15a>
 8002160:	2b10      	cmp	r3, #16
 8002162:	d05a      	beq.n	800221a <HAL_TIM_ConfigClockSource+0x15a>
 8002164:	e062      	b.n	800222c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6899      	ldr	r1, [r3, #8]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f000 f968 	bl	800244a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	609a      	str	r2, [r3, #8]
      break;
 8002192:	e04f      	b.n	8002234 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6899      	ldr	r1, [r3, #8]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f000 f951 	bl	800244a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021b6:	609a      	str	r2, [r3, #8]
      break;
 80021b8:	e03c      	b.n	8002234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6859      	ldr	r1, [r3, #4]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	461a      	mov	r2, r3
 80021c8:	f000 f8c8 	bl	800235c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2150      	movs	r1, #80	; 0x50
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f91f 	bl	8002416 <TIM_ITRx_SetConfig>
      break;
 80021d8:	e02c      	b.n	8002234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6859      	ldr	r1, [r3, #4]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	461a      	mov	r2, r3
 80021e8:	f000 f8e6 	bl	80023b8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2160      	movs	r1, #96	; 0x60
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f90f 	bl	8002416 <TIM_ITRx_SetConfig>
      break;
 80021f8:	e01c      	b.n	8002234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6859      	ldr	r1, [r3, #4]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	461a      	mov	r2, r3
 8002208:	f000 f8a8 	bl	800235c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2140      	movs	r1, #64	; 0x40
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f8ff 	bl	8002416 <TIM_ITRx_SetConfig>
      break;
 8002218:	e00c      	b.n	8002234 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4619      	mov	r1, r3
 8002224:	4610      	mov	r0, r2
 8002226:	f000 f8f6 	bl	8002416 <TIM_ITRx_SetConfig>
      break;
 800222a:	e003      	b.n	8002234 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
      break;
 8002230:	e000      	b.n	8002234 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
	...

08002298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a29      	ldr	r2, [pc, #164]	; (8002350 <TIM_Base_SetConfig+0xb8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d00b      	beq.n	80022c8 <TIM_Base_SetConfig+0x30>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b6:	d007      	beq.n	80022c8 <TIM_Base_SetConfig+0x30>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a26      	ldr	r2, [pc, #152]	; (8002354 <TIM_Base_SetConfig+0xbc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d003      	beq.n	80022c8 <TIM_Base_SetConfig+0x30>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a25      	ldr	r2, [pc, #148]	; (8002358 <TIM_Base_SetConfig+0xc0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d108      	bne.n	80022da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <TIM_Base_SetConfig+0xb8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00b      	beq.n	80022fa <TIM_Base_SetConfig+0x62>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e8:	d007      	beq.n	80022fa <TIM_Base_SetConfig+0x62>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a19      	ldr	r2, [pc, #100]	; (8002354 <TIM_Base_SetConfig+0xbc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d003      	beq.n	80022fa <TIM_Base_SetConfig+0x62>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a18      	ldr	r2, [pc, #96]	; (8002358 <TIM_Base_SetConfig+0xc0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d108      	bne.n	800230c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a07      	ldr	r2, [pc, #28]	; (8002350 <TIM_Base_SetConfig+0xb8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d103      	bne.n	8002340 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	615a      	str	r2, [r3, #20]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	40012c00 	.word	0x40012c00
 8002354:	40000400 	.word	0x40000400
 8002358:	40000800 	.word	0x40000800

0800235c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f023 0201 	bic.w	r2, r3, #1
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f023 030a 	bic.w	r3, r3, #10
 8002398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	621a      	str	r2, [r3, #32]
}
 80023ae:	bf00      	nop
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	f023 0210 	bic.w	r2, r3, #16
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	031b      	lsls	r3, r3, #12
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	621a      	str	r2, [r3, #32]
}
 800240c:	bf00      	nop
 800240e:	371c      	adds	r7, #28
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002416:	b480      	push	{r7}
 8002418:	b085      	sub	sp, #20
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	f043 0307 	orr.w	r3, r3, #7
 8002438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	609a      	str	r2, [r3, #8]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800244a:	b480      	push	{r7}
 800244c:	b087      	sub	sp, #28
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002464:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	021a      	lsls	r2, r3, #8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	431a      	orrs	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4313      	orrs	r3, r2
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	609a      	str	r2, [r3, #8]
}
 800247e:	bf00      	nop
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800249c:	2302      	movs	r3, #2
 800249e:	e046      	b.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a16      	ldr	r2, [pc, #88]	; (8002538 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00e      	beq.n	8002502 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ec:	d009      	beq.n	8002502 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a12      	ldr	r2, [pc, #72]	; (800253c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a10      	ldr	r2, [pc, #64]	; (8002540 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10c      	bne.n	800251c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	4313      	orrs	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	40012c00 	.word	0x40012c00
 800253c:	40000400 	.word	0x40000400
 8002540:	40000800 	.word	0x40000800

08002544 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e042      	b.n	8002600 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fe fb5e 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2224      	movs	r2, #36	; 0x24
 8002598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f91d 	bl	80027ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695a      	ldr	r2, [r3, #20]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	4613      	mov	r3, r2
 8002616:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b20      	cmp	r3, #32
 8002626:	d16d      	bne.n	8002704 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_UART_Transmit+0x2c>
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e066      	b.n	8002706 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2221      	movs	r2, #33	; 0x21
 8002642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002646:	f7fe fcb7 	bl	8000fb8 <HAL_GetTick>
 800264a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	88fa      	ldrh	r2, [r7, #6]
 8002650:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	88fa      	ldrh	r2, [r7, #6]
 8002656:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002660:	d108      	bne.n	8002674 <HAL_UART_Transmit+0x6c>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d104      	bne.n	8002674 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	e003      	b.n	800267c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800267c:	e02a      	b.n	80026d4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2200      	movs	r2, #0
 8002686:	2180      	movs	r1, #128	; 0x80
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f840 	bl	800270e <UART_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e036      	b.n	8002706 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10b      	bne.n	80026b6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	3302      	adds	r3, #2
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	e007      	b.n	80026c6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	3301      	adds	r3, #1
 80026c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1cf      	bne.n	800267e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2200      	movs	r2, #0
 80026e6:	2140      	movs	r1, #64	; 0x40
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f810 	bl	800270e <UART_WaitOnFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e006      	b.n	8002706 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	e000      	b.n	8002706 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002704:	2302      	movs	r3, #2
  }
}
 8002706:	4618      	mov	r0, r3
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b090      	sub	sp, #64	; 0x40
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	4613      	mov	r3, r2
 800271c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800271e:	e050      	b.n	80027c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002726:	d04c      	beq.n	80027c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800272a:	2b00      	cmp	r3, #0
 800272c:	d007      	beq.n	800273e <UART_WaitOnFlagUntilTimeout+0x30>
 800272e:	f7fe fc43 	bl	8000fb8 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800273a:	429a      	cmp	r2, r3
 800273c:	d241      	bcs.n	80027c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	330c      	adds	r3, #12
 8002744:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	e853 3f00 	ldrex	r3, [r3]
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	330c      	adds	r3, #12
 800275c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800275e:	637a      	str	r2, [r7, #52]	; 0x34
 8002760:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002766:	e841 2300 	strex	r3, r2, [r1]
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e5      	bne.n	800273e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3314      	adds	r3, #20
 8002778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	613b      	str	r3, [r7, #16]
   return(result);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f023 0301 	bic.w	r3, r3, #1
 8002788:	63bb      	str	r3, [r7, #56]	; 0x38
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3314      	adds	r3, #20
 8002790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002792:	623a      	str	r2, [r7, #32]
 8002794:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002796:	69f9      	ldr	r1, [r7, #28]
 8002798:	6a3a      	ldr	r2, [r7, #32]
 800279a:	e841 2300 	strex	r3, r2, [r1]
 800279e:	61bb      	str	r3, [r7, #24]
   return(result);
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1e5      	bne.n	8002772 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e00f      	b.n	80027e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4013      	ands	r3, r2
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	bf0c      	ite	eq
 80027d2:	2301      	moveq	r3, #1
 80027d4:	2300      	movne	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d09f      	beq.n	8002720 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3740      	adds	r7, #64	; 0x40
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002826:	f023 030c 	bic.w	r3, r3, #12
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	68b9      	ldr	r1, [r7, #8]
 8002830:	430b      	orrs	r3, r1
 8002832:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2c      	ldr	r2, [pc, #176]	; (8002900 <UART_SetConfig+0x114>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d103      	bne.n	800285c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002854:	f7ff fa58 	bl	8001d08 <HAL_RCC_GetPCLK2Freq>
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	e002      	b.n	8002862 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800285c:	f7ff fa40 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 8002860:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	009a      	lsls	r2, r3, #2
 800286c:	441a      	add	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	fbb2 f3f3 	udiv	r3, r2, r3
 8002878:	4a22      	ldr	r2, [pc, #136]	; (8002904 <UART_SetConfig+0x118>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	0119      	lsls	r1, r3, #4
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	009a      	lsls	r2, r3, #2
 800288c:	441a      	add	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	fbb2 f2f3 	udiv	r2, r2, r3
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <UART_SetConfig+0x118>)
 800289a:	fba3 0302 	umull	r0, r3, r3, r2
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	2064      	movs	r0, #100	; 0x64
 80028a2:	fb00 f303 	mul.w	r3, r0, r3
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	3332      	adds	r3, #50	; 0x32
 80028ac:	4a15      	ldr	r2, [pc, #84]	; (8002904 <UART_SetConfig+0x118>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b8:	4419      	add	r1, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	009a      	lsls	r2, r3, #2
 80028c4:	441a      	add	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <UART_SetConfig+0x118>)
 80028d2:	fba3 0302 	umull	r0, r3, r3, r2
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2064      	movs	r0, #100	; 0x64
 80028da:	fb00 f303 	mul.w	r3, r0, r3
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	3332      	adds	r3, #50	; 0x32
 80028e4:	4a07      	ldr	r2, [pc, #28]	; (8002904 <UART_SetConfig+0x118>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	f003 020f 	and.w	r2, r3, #15
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	440a      	add	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40013800 	.word	0x40013800
 8002904:	51eb851f 	.word	0x51eb851f

08002908 <__errno>:
 8002908:	4b01      	ldr	r3, [pc, #4]	; (8002910 <__errno+0x8>)
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000030 	.word	0x20000030

08002914 <__libc_init_array>:
 8002914:	b570      	push	{r4, r5, r6, lr}
 8002916:	2600      	movs	r6, #0
 8002918:	4d0c      	ldr	r5, [pc, #48]	; (800294c <__libc_init_array+0x38>)
 800291a:	4c0d      	ldr	r4, [pc, #52]	; (8002950 <__libc_init_array+0x3c>)
 800291c:	1b64      	subs	r4, r4, r5
 800291e:	10a4      	asrs	r4, r4, #2
 8002920:	42a6      	cmp	r6, r4
 8002922:	d109      	bne.n	8002938 <__libc_init_array+0x24>
 8002924:	f000 fc5c 	bl	80031e0 <_init>
 8002928:	2600      	movs	r6, #0
 800292a:	4d0a      	ldr	r5, [pc, #40]	; (8002954 <__libc_init_array+0x40>)
 800292c:	4c0a      	ldr	r4, [pc, #40]	; (8002958 <__libc_init_array+0x44>)
 800292e:	1b64      	subs	r4, r4, r5
 8002930:	10a4      	asrs	r4, r4, #2
 8002932:	42a6      	cmp	r6, r4
 8002934:	d105      	bne.n	8002942 <__libc_init_array+0x2e>
 8002936:	bd70      	pop	{r4, r5, r6, pc}
 8002938:	f855 3b04 	ldr.w	r3, [r5], #4
 800293c:	4798      	blx	r3
 800293e:	3601      	adds	r6, #1
 8002940:	e7ee      	b.n	8002920 <__libc_init_array+0xc>
 8002942:	f855 3b04 	ldr.w	r3, [r5], #4
 8002946:	4798      	blx	r3
 8002948:	3601      	adds	r6, #1
 800294a:	e7f2      	b.n	8002932 <__libc_init_array+0x1e>
 800294c:	08003278 	.word	0x08003278
 8002950:	08003278 	.word	0x08003278
 8002954:	08003278 	.word	0x08003278
 8002958:	0800327c 	.word	0x0800327c

0800295c <memset>:
 800295c:	4603      	mov	r3, r0
 800295e:	4402      	add	r2, r0
 8002960:	4293      	cmp	r3, r2
 8002962:	d100      	bne.n	8002966 <memset+0xa>
 8002964:	4770      	bx	lr
 8002966:	f803 1b01 	strb.w	r1, [r3], #1
 800296a:	e7f9      	b.n	8002960 <memset+0x4>

0800296c <siprintf>:
 800296c:	b40e      	push	{r1, r2, r3}
 800296e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002972:	b500      	push	{lr}
 8002974:	b09c      	sub	sp, #112	; 0x70
 8002976:	ab1d      	add	r3, sp, #116	; 0x74
 8002978:	9002      	str	r0, [sp, #8]
 800297a:	9006      	str	r0, [sp, #24]
 800297c:	9107      	str	r1, [sp, #28]
 800297e:	9104      	str	r1, [sp, #16]
 8002980:	4808      	ldr	r0, [pc, #32]	; (80029a4 <siprintf+0x38>)
 8002982:	4909      	ldr	r1, [pc, #36]	; (80029a8 <siprintf+0x3c>)
 8002984:	f853 2b04 	ldr.w	r2, [r3], #4
 8002988:	9105      	str	r1, [sp, #20]
 800298a:	6800      	ldr	r0, [r0, #0]
 800298c:	a902      	add	r1, sp, #8
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	f000 f868 	bl	8002a64 <_svfiprintf_r>
 8002994:	2200      	movs	r2, #0
 8002996:	9b02      	ldr	r3, [sp, #8]
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	b01c      	add	sp, #112	; 0x70
 800299c:	f85d eb04 	ldr.w	lr, [sp], #4
 80029a0:	b003      	add	sp, #12
 80029a2:	4770      	bx	lr
 80029a4:	20000030 	.word	0x20000030
 80029a8:	ffff0208 	.word	0xffff0208

080029ac <__ssputs_r>:
 80029ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b0:	688e      	ldr	r6, [r1, #8]
 80029b2:	4682      	mov	sl, r0
 80029b4:	429e      	cmp	r6, r3
 80029b6:	460c      	mov	r4, r1
 80029b8:	4690      	mov	r8, r2
 80029ba:	461f      	mov	r7, r3
 80029bc:	d838      	bhi.n	8002a30 <__ssputs_r+0x84>
 80029be:	898a      	ldrh	r2, [r1, #12]
 80029c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029c4:	d032      	beq.n	8002a2c <__ssputs_r+0x80>
 80029c6:	6825      	ldr	r5, [r4, #0]
 80029c8:	6909      	ldr	r1, [r1, #16]
 80029ca:	3301      	adds	r3, #1
 80029cc:	eba5 0901 	sub.w	r9, r5, r1
 80029d0:	6965      	ldr	r5, [r4, #20]
 80029d2:	444b      	add	r3, r9
 80029d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029dc:	106d      	asrs	r5, r5, #1
 80029de:	429d      	cmp	r5, r3
 80029e0:	bf38      	it	cc
 80029e2:	461d      	movcc	r5, r3
 80029e4:	0553      	lsls	r3, r2, #21
 80029e6:	d531      	bpl.n	8002a4c <__ssputs_r+0xa0>
 80029e8:	4629      	mov	r1, r5
 80029ea:	f000 fb53 	bl	8003094 <_malloc_r>
 80029ee:	4606      	mov	r6, r0
 80029f0:	b950      	cbnz	r0, 8002a08 <__ssputs_r+0x5c>
 80029f2:	230c      	movs	r3, #12
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	f8ca 3000 	str.w	r3, [sl]
 80029fc:	89a3      	ldrh	r3, [r4, #12]
 80029fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a02:	81a3      	strh	r3, [r4, #12]
 8002a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a08:	464a      	mov	r2, r9
 8002a0a:	6921      	ldr	r1, [r4, #16]
 8002a0c:	f000 face 	bl	8002fac <memcpy>
 8002a10:	89a3      	ldrh	r3, [r4, #12]
 8002a12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a1a:	81a3      	strh	r3, [r4, #12]
 8002a1c:	6126      	str	r6, [r4, #16]
 8002a1e:	444e      	add	r6, r9
 8002a20:	6026      	str	r6, [r4, #0]
 8002a22:	463e      	mov	r6, r7
 8002a24:	6165      	str	r5, [r4, #20]
 8002a26:	eba5 0509 	sub.w	r5, r5, r9
 8002a2a:	60a5      	str	r5, [r4, #8]
 8002a2c:	42be      	cmp	r6, r7
 8002a2e:	d900      	bls.n	8002a32 <__ssputs_r+0x86>
 8002a30:	463e      	mov	r6, r7
 8002a32:	4632      	mov	r2, r6
 8002a34:	4641      	mov	r1, r8
 8002a36:	6820      	ldr	r0, [r4, #0]
 8002a38:	f000 fac6 	bl	8002fc8 <memmove>
 8002a3c:	68a3      	ldr	r3, [r4, #8]
 8002a3e:	6822      	ldr	r2, [r4, #0]
 8002a40:	1b9b      	subs	r3, r3, r6
 8002a42:	4432      	add	r2, r6
 8002a44:	2000      	movs	r0, #0
 8002a46:	60a3      	str	r3, [r4, #8]
 8002a48:	6022      	str	r2, [r4, #0]
 8002a4a:	e7db      	b.n	8002a04 <__ssputs_r+0x58>
 8002a4c:	462a      	mov	r2, r5
 8002a4e:	f000 fb7b 	bl	8003148 <_realloc_r>
 8002a52:	4606      	mov	r6, r0
 8002a54:	2800      	cmp	r0, #0
 8002a56:	d1e1      	bne.n	8002a1c <__ssputs_r+0x70>
 8002a58:	4650      	mov	r0, sl
 8002a5a:	6921      	ldr	r1, [r4, #16]
 8002a5c:	f000 face 	bl	8002ffc <_free_r>
 8002a60:	e7c7      	b.n	80029f2 <__ssputs_r+0x46>
	...

08002a64 <_svfiprintf_r>:
 8002a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a68:	4698      	mov	r8, r3
 8002a6a:	898b      	ldrh	r3, [r1, #12]
 8002a6c:	4607      	mov	r7, r0
 8002a6e:	061b      	lsls	r3, r3, #24
 8002a70:	460d      	mov	r5, r1
 8002a72:	4614      	mov	r4, r2
 8002a74:	b09d      	sub	sp, #116	; 0x74
 8002a76:	d50e      	bpl.n	8002a96 <_svfiprintf_r+0x32>
 8002a78:	690b      	ldr	r3, [r1, #16]
 8002a7a:	b963      	cbnz	r3, 8002a96 <_svfiprintf_r+0x32>
 8002a7c:	2140      	movs	r1, #64	; 0x40
 8002a7e:	f000 fb09 	bl	8003094 <_malloc_r>
 8002a82:	6028      	str	r0, [r5, #0]
 8002a84:	6128      	str	r0, [r5, #16]
 8002a86:	b920      	cbnz	r0, 8002a92 <_svfiprintf_r+0x2e>
 8002a88:	230c      	movs	r3, #12
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a90:	e0d1      	b.n	8002c36 <_svfiprintf_r+0x1d2>
 8002a92:	2340      	movs	r3, #64	; 0x40
 8002a94:	616b      	str	r3, [r5, #20]
 8002a96:	2300      	movs	r3, #0
 8002a98:	9309      	str	r3, [sp, #36]	; 0x24
 8002a9a:	2320      	movs	r3, #32
 8002a9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002aa0:	2330      	movs	r3, #48	; 0x30
 8002aa2:	f04f 0901 	mov.w	r9, #1
 8002aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002aaa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002c50 <_svfiprintf_r+0x1ec>
 8002aae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ab2:	4623      	mov	r3, r4
 8002ab4:	469a      	mov	sl, r3
 8002ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002aba:	b10a      	cbz	r2, 8002ac0 <_svfiprintf_r+0x5c>
 8002abc:	2a25      	cmp	r2, #37	; 0x25
 8002abe:	d1f9      	bne.n	8002ab4 <_svfiprintf_r+0x50>
 8002ac0:	ebba 0b04 	subs.w	fp, sl, r4
 8002ac4:	d00b      	beq.n	8002ade <_svfiprintf_r+0x7a>
 8002ac6:	465b      	mov	r3, fp
 8002ac8:	4622      	mov	r2, r4
 8002aca:	4629      	mov	r1, r5
 8002acc:	4638      	mov	r0, r7
 8002ace:	f7ff ff6d 	bl	80029ac <__ssputs_r>
 8002ad2:	3001      	adds	r0, #1
 8002ad4:	f000 80aa 	beq.w	8002c2c <_svfiprintf_r+0x1c8>
 8002ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ada:	445a      	add	r2, fp
 8002adc:	9209      	str	r2, [sp, #36]	; 0x24
 8002ade:	f89a 3000 	ldrb.w	r3, [sl]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80a2 	beq.w	8002c2c <_svfiprintf_r+0x1c8>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f04f 32ff 	mov.w	r2, #4294967295
 8002aee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002af2:	f10a 0a01 	add.w	sl, sl, #1
 8002af6:	9304      	str	r3, [sp, #16]
 8002af8:	9307      	str	r3, [sp, #28]
 8002afa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002afe:	931a      	str	r3, [sp, #104]	; 0x68
 8002b00:	4654      	mov	r4, sl
 8002b02:	2205      	movs	r2, #5
 8002b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b08:	4851      	ldr	r0, [pc, #324]	; (8002c50 <_svfiprintf_r+0x1ec>)
 8002b0a:	f000 fa41 	bl	8002f90 <memchr>
 8002b0e:	9a04      	ldr	r2, [sp, #16]
 8002b10:	b9d8      	cbnz	r0, 8002b4a <_svfiprintf_r+0xe6>
 8002b12:	06d0      	lsls	r0, r2, #27
 8002b14:	bf44      	itt	mi
 8002b16:	2320      	movmi	r3, #32
 8002b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b1c:	0711      	lsls	r1, r2, #28
 8002b1e:	bf44      	itt	mi
 8002b20:	232b      	movmi	r3, #43	; 0x2b
 8002b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b26:	f89a 3000 	ldrb.w	r3, [sl]
 8002b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8002b2c:	d015      	beq.n	8002b5a <_svfiprintf_r+0xf6>
 8002b2e:	4654      	mov	r4, sl
 8002b30:	2000      	movs	r0, #0
 8002b32:	f04f 0c0a 	mov.w	ip, #10
 8002b36:	9a07      	ldr	r2, [sp, #28]
 8002b38:	4621      	mov	r1, r4
 8002b3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b3e:	3b30      	subs	r3, #48	; 0x30
 8002b40:	2b09      	cmp	r3, #9
 8002b42:	d94e      	bls.n	8002be2 <_svfiprintf_r+0x17e>
 8002b44:	b1b0      	cbz	r0, 8002b74 <_svfiprintf_r+0x110>
 8002b46:	9207      	str	r2, [sp, #28]
 8002b48:	e014      	b.n	8002b74 <_svfiprintf_r+0x110>
 8002b4a:	eba0 0308 	sub.w	r3, r0, r8
 8002b4e:	fa09 f303 	lsl.w	r3, r9, r3
 8002b52:	4313      	orrs	r3, r2
 8002b54:	46a2      	mov	sl, r4
 8002b56:	9304      	str	r3, [sp, #16]
 8002b58:	e7d2      	b.n	8002b00 <_svfiprintf_r+0x9c>
 8002b5a:	9b03      	ldr	r3, [sp, #12]
 8002b5c:	1d19      	adds	r1, r3, #4
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	9103      	str	r1, [sp, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bfbb      	ittet	lt
 8002b66:	425b      	neglt	r3, r3
 8002b68:	f042 0202 	orrlt.w	r2, r2, #2
 8002b6c:	9307      	strge	r3, [sp, #28]
 8002b6e:	9307      	strlt	r3, [sp, #28]
 8002b70:	bfb8      	it	lt
 8002b72:	9204      	strlt	r2, [sp, #16]
 8002b74:	7823      	ldrb	r3, [r4, #0]
 8002b76:	2b2e      	cmp	r3, #46	; 0x2e
 8002b78:	d10c      	bne.n	8002b94 <_svfiprintf_r+0x130>
 8002b7a:	7863      	ldrb	r3, [r4, #1]
 8002b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b7e:	d135      	bne.n	8002bec <_svfiprintf_r+0x188>
 8002b80:	9b03      	ldr	r3, [sp, #12]
 8002b82:	3402      	adds	r4, #2
 8002b84:	1d1a      	adds	r2, r3, #4
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	9203      	str	r2, [sp, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bfb8      	it	lt
 8002b8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b92:	9305      	str	r3, [sp, #20]
 8002b94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002c60 <_svfiprintf_r+0x1fc>
 8002b98:	2203      	movs	r2, #3
 8002b9a:	4650      	mov	r0, sl
 8002b9c:	7821      	ldrb	r1, [r4, #0]
 8002b9e:	f000 f9f7 	bl	8002f90 <memchr>
 8002ba2:	b140      	cbz	r0, 8002bb6 <_svfiprintf_r+0x152>
 8002ba4:	2340      	movs	r3, #64	; 0x40
 8002ba6:	eba0 000a 	sub.w	r0, r0, sl
 8002baa:	fa03 f000 	lsl.w	r0, r3, r0
 8002bae:	9b04      	ldr	r3, [sp, #16]
 8002bb0:	3401      	adds	r4, #1
 8002bb2:	4303      	orrs	r3, r0
 8002bb4:	9304      	str	r3, [sp, #16]
 8002bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bba:	2206      	movs	r2, #6
 8002bbc:	4825      	ldr	r0, [pc, #148]	; (8002c54 <_svfiprintf_r+0x1f0>)
 8002bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bc2:	f000 f9e5 	bl	8002f90 <memchr>
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d038      	beq.n	8002c3c <_svfiprintf_r+0x1d8>
 8002bca:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <_svfiprintf_r+0x1f4>)
 8002bcc:	bb1b      	cbnz	r3, 8002c16 <_svfiprintf_r+0x1b2>
 8002bce:	9b03      	ldr	r3, [sp, #12]
 8002bd0:	3307      	adds	r3, #7
 8002bd2:	f023 0307 	bic.w	r3, r3, #7
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	9303      	str	r3, [sp, #12]
 8002bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bdc:	4433      	add	r3, r6
 8002bde:	9309      	str	r3, [sp, #36]	; 0x24
 8002be0:	e767      	b.n	8002ab2 <_svfiprintf_r+0x4e>
 8002be2:	460c      	mov	r4, r1
 8002be4:	2001      	movs	r0, #1
 8002be6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bea:	e7a5      	b.n	8002b38 <_svfiprintf_r+0xd4>
 8002bec:	2300      	movs	r3, #0
 8002bee:	f04f 0c0a 	mov.w	ip, #10
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	3401      	adds	r4, #1
 8002bf6:	9305      	str	r3, [sp, #20]
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bfe:	3a30      	subs	r2, #48	; 0x30
 8002c00:	2a09      	cmp	r2, #9
 8002c02:	d903      	bls.n	8002c0c <_svfiprintf_r+0x1a8>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0c5      	beq.n	8002b94 <_svfiprintf_r+0x130>
 8002c08:	9105      	str	r1, [sp, #20]
 8002c0a:	e7c3      	b.n	8002b94 <_svfiprintf_r+0x130>
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	2301      	movs	r3, #1
 8002c10:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c14:	e7f0      	b.n	8002bf8 <_svfiprintf_r+0x194>
 8002c16:	ab03      	add	r3, sp, #12
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	462a      	mov	r2, r5
 8002c1c:	4638      	mov	r0, r7
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <_svfiprintf_r+0x1f8>)
 8002c20:	a904      	add	r1, sp, #16
 8002c22:	f3af 8000 	nop.w
 8002c26:	1c42      	adds	r2, r0, #1
 8002c28:	4606      	mov	r6, r0
 8002c2a:	d1d6      	bne.n	8002bda <_svfiprintf_r+0x176>
 8002c2c:	89ab      	ldrh	r3, [r5, #12]
 8002c2e:	065b      	lsls	r3, r3, #25
 8002c30:	f53f af2c 	bmi.w	8002a8c <_svfiprintf_r+0x28>
 8002c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c36:	b01d      	add	sp, #116	; 0x74
 8002c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c3c:	ab03      	add	r3, sp, #12
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	462a      	mov	r2, r5
 8002c42:	4638      	mov	r0, r7
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <_svfiprintf_r+0x1f8>)
 8002c46:	a904      	add	r1, sp, #16
 8002c48:	f000 f87c 	bl	8002d44 <_printf_i>
 8002c4c:	e7eb      	b.n	8002c26 <_svfiprintf_r+0x1c2>
 8002c4e:	bf00      	nop
 8002c50:	08003242 	.word	0x08003242
 8002c54:	0800324c 	.word	0x0800324c
 8002c58:	00000000 	.word	0x00000000
 8002c5c:	080029ad 	.word	0x080029ad
 8002c60:	08003248 	.word	0x08003248

08002c64 <_printf_common>:
 8002c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c68:	4616      	mov	r6, r2
 8002c6a:	4699      	mov	r9, r3
 8002c6c:	688a      	ldr	r2, [r1, #8]
 8002c6e:	690b      	ldr	r3, [r1, #16]
 8002c70:	4607      	mov	r7, r0
 8002c72:	4293      	cmp	r3, r2
 8002c74:	bfb8      	it	lt
 8002c76:	4613      	movlt	r3, r2
 8002c78:	6033      	str	r3, [r6, #0]
 8002c7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c7e:	460c      	mov	r4, r1
 8002c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c84:	b10a      	cbz	r2, 8002c8a <_printf_common+0x26>
 8002c86:	3301      	adds	r3, #1
 8002c88:	6033      	str	r3, [r6, #0]
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	0699      	lsls	r1, r3, #26
 8002c8e:	bf42      	ittt	mi
 8002c90:	6833      	ldrmi	r3, [r6, #0]
 8002c92:	3302      	addmi	r3, #2
 8002c94:	6033      	strmi	r3, [r6, #0]
 8002c96:	6825      	ldr	r5, [r4, #0]
 8002c98:	f015 0506 	ands.w	r5, r5, #6
 8002c9c:	d106      	bne.n	8002cac <_printf_common+0x48>
 8002c9e:	f104 0a19 	add.w	sl, r4, #25
 8002ca2:	68e3      	ldr	r3, [r4, #12]
 8002ca4:	6832      	ldr	r2, [r6, #0]
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	42ab      	cmp	r3, r5
 8002caa:	dc28      	bgt.n	8002cfe <_printf_common+0x9a>
 8002cac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002cb0:	1e13      	subs	r3, r2, #0
 8002cb2:	6822      	ldr	r2, [r4, #0]
 8002cb4:	bf18      	it	ne
 8002cb6:	2301      	movne	r3, #1
 8002cb8:	0692      	lsls	r2, r2, #26
 8002cba:	d42d      	bmi.n	8002d18 <_printf_common+0xb4>
 8002cbc:	4649      	mov	r1, r9
 8002cbe:	4638      	mov	r0, r7
 8002cc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cc4:	47c0      	blx	r8
 8002cc6:	3001      	adds	r0, #1
 8002cc8:	d020      	beq.n	8002d0c <_printf_common+0xa8>
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	68e5      	ldr	r5, [r4, #12]
 8002cce:	f003 0306 	and.w	r3, r3, #6
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	bf18      	it	ne
 8002cd6:	2500      	movne	r5, #0
 8002cd8:	6832      	ldr	r2, [r6, #0]
 8002cda:	f04f 0600 	mov.w	r6, #0
 8002cde:	68a3      	ldr	r3, [r4, #8]
 8002ce0:	bf08      	it	eq
 8002ce2:	1aad      	subeq	r5, r5, r2
 8002ce4:	6922      	ldr	r2, [r4, #16]
 8002ce6:	bf08      	it	eq
 8002ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cec:	4293      	cmp	r3, r2
 8002cee:	bfc4      	itt	gt
 8002cf0:	1a9b      	subgt	r3, r3, r2
 8002cf2:	18ed      	addgt	r5, r5, r3
 8002cf4:	341a      	adds	r4, #26
 8002cf6:	42b5      	cmp	r5, r6
 8002cf8:	d11a      	bne.n	8002d30 <_printf_common+0xcc>
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	e008      	b.n	8002d10 <_printf_common+0xac>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	4652      	mov	r2, sl
 8002d02:	4649      	mov	r1, r9
 8002d04:	4638      	mov	r0, r7
 8002d06:	47c0      	blx	r8
 8002d08:	3001      	adds	r0, #1
 8002d0a:	d103      	bne.n	8002d14 <_printf_common+0xb0>
 8002d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d14:	3501      	adds	r5, #1
 8002d16:	e7c4      	b.n	8002ca2 <_printf_common+0x3e>
 8002d18:	2030      	movs	r0, #48	; 0x30
 8002d1a:	18e1      	adds	r1, r4, r3
 8002d1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d26:	4422      	add	r2, r4
 8002d28:	3302      	adds	r3, #2
 8002d2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d2e:	e7c5      	b.n	8002cbc <_printf_common+0x58>
 8002d30:	2301      	movs	r3, #1
 8002d32:	4622      	mov	r2, r4
 8002d34:	4649      	mov	r1, r9
 8002d36:	4638      	mov	r0, r7
 8002d38:	47c0      	blx	r8
 8002d3a:	3001      	adds	r0, #1
 8002d3c:	d0e6      	beq.n	8002d0c <_printf_common+0xa8>
 8002d3e:	3601      	adds	r6, #1
 8002d40:	e7d9      	b.n	8002cf6 <_printf_common+0x92>
	...

08002d44 <_printf_i>:
 8002d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d48:	460c      	mov	r4, r1
 8002d4a:	7e27      	ldrb	r7, [r4, #24]
 8002d4c:	4691      	mov	r9, r2
 8002d4e:	2f78      	cmp	r7, #120	; 0x78
 8002d50:	4680      	mov	r8, r0
 8002d52:	469a      	mov	sl, r3
 8002d54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d5a:	d807      	bhi.n	8002d6c <_printf_i+0x28>
 8002d5c:	2f62      	cmp	r7, #98	; 0x62
 8002d5e:	d80a      	bhi.n	8002d76 <_printf_i+0x32>
 8002d60:	2f00      	cmp	r7, #0
 8002d62:	f000 80d9 	beq.w	8002f18 <_printf_i+0x1d4>
 8002d66:	2f58      	cmp	r7, #88	; 0x58
 8002d68:	f000 80a4 	beq.w	8002eb4 <_printf_i+0x170>
 8002d6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002d70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d74:	e03a      	b.n	8002dec <_printf_i+0xa8>
 8002d76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d7a:	2b15      	cmp	r3, #21
 8002d7c:	d8f6      	bhi.n	8002d6c <_printf_i+0x28>
 8002d7e:	a001      	add	r0, pc, #4	; (adr r0, 8002d84 <_printf_i+0x40>)
 8002d80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002d84:	08002ddd 	.word	0x08002ddd
 8002d88:	08002df1 	.word	0x08002df1
 8002d8c:	08002d6d 	.word	0x08002d6d
 8002d90:	08002d6d 	.word	0x08002d6d
 8002d94:	08002d6d 	.word	0x08002d6d
 8002d98:	08002d6d 	.word	0x08002d6d
 8002d9c:	08002df1 	.word	0x08002df1
 8002da0:	08002d6d 	.word	0x08002d6d
 8002da4:	08002d6d 	.word	0x08002d6d
 8002da8:	08002d6d 	.word	0x08002d6d
 8002dac:	08002d6d 	.word	0x08002d6d
 8002db0:	08002eff 	.word	0x08002eff
 8002db4:	08002e21 	.word	0x08002e21
 8002db8:	08002ee1 	.word	0x08002ee1
 8002dbc:	08002d6d 	.word	0x08002d6d
 8002dc0:	08002d6d 	.word	0x08002d6d
 8002dc4:	08002f21 	.word	0x08002f21
 8002dc8:	08002d6d 	.word	0x08002d6d
 8002dcc:	08002e21 	.word	0x08002e21
 8002dd0:	08002d6d 	.word	0x08002d6d
 8002dd4:	08002d6d 	.word	0x08002d6d
 8002dd8:	08002ee9 	.word	0x08002ee9
 8002ddc:	680b      	ldr	r3, [r1, #0]
 8002dde:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002de2:	1d1a      	adds	r2, r3, #4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	600a      	str	r2, [r1, #0]
 8002de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0a4      	b.n	8002f3a <_printf_i+0x1f6>
 8002df0:	6825      	ldr	r5, [r4, #0]
 8002df2:	6808      	ldr	r0, [r1, #0]
 8002df4:	062e      	lsls	r6, r5, #24
 8002df6:	f100 0304 	add.w	r3, r0, #4
 8002dfa:	d50a      	bpl.n	8002e12 <_printf_i+0xce>
 8002dfc:	6805      	ldr	r5, [r0, #0]
 8002dfe:	600b      	str	r3, [r1, #0]
 8002e00:	2d00      	cmp	r5, #0
 8002e02:	da03      	bge.n	8002e0c <_printf_i+0xc8>
 8002e04:	232d      	movs	r3, #45	; 0x2d
 8002e06:	426d      	negs	r5, r5
 8002e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e0c:	230a      	movs	r3, #10
 8002e0e:	485e      	ldr	r0, [pc, #376]	; (8002f88 <_printf_i+0x244>)
 8002e10:	e019      	b.n	8002e46 <_printf_i+0x102>
 8002e12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002e16:	6805      	ldr	r5, [r0, #0]
 8002e18:	600b      	str	r3, [r1, #0]
 8002e1a:	bf18      	it	ne
 8002e1c:	b22d      	sxthne	r5, r5
 8002e1e:	e7ef      	b.n	8002e00 <_printf_i+0xbc>
 8002e20:	680b      	ldr	r3, [r1, #0]
 8002e22:	6825      	ldr	r5, [r4, #0]
 8002e24:	1d18      	adds	r0, r3, #4
 8002e26:	6008      	str	r0, [r1, #0]
 8002e28:	0628      	lsls	r0, r5, #24
 8002e2a:	d501      	bpl.n	8002e30 <_printf_i+0xec>
 8002e2c:	681d      	ldr	r5, [r3, #0]
 8002e2e:	e002      	b.n	8002e36 <_printf_i+0xf2>
 8002e30:	0669      	lsls	r1, r5, #25
 8002e32:	d5fb      	bpl.n	8002e2c <_printf_i+0xe8>
 8002e34:	881d      	ldrh	r5, [r3, #0]
 8002e36:	2f6f      	cmp	r7, #111	; 0x6f
 8002e38:	bf0c      	ite	eq
 8002e3a:	2308      	moveq	r3, #8
 8002e3c:	230a      	movne	r3, #10
 8002e3e:	4852      	ldr	r0, [pc, #328]	; (8002f88 <_printf_i+0x244>)
 8002e40:	2100      	movs	r1, #0
 8002e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e46:	6866      	ldr	r6, [r4, #4]
 8002e48:	2e00      	cmp	r6, #0
 8002e4a:	bfa8      	it	ge
 8002e4c:	6821      	ldrge	r1, [r4, #0]
 8002e4e:	60a6      	str	r6, [r4, #8]
 8002e50:	bfa4      	itt	ge
 8002e52:	f021 0104 	bicge.w	r1, r1, #4
 8002e56:	6021      	strge	r1, [r4, #0]
 8002e58:	b90d      	cbnz	r5, 8002e5e <_printf_i+0x11a>
 8002e5a:	2e00      	cmp	r6, #0
 8002e5c:	d04d      	beq.n	8002efa <_printf_i+0x1b6>
 8002e5e:	4616      	mov	r6, r2
 8002e60:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e64:	fb03 5711 	mls	r7, r3, r1, r5
 8002e68:	5dc7      	ldrb	r7, [r0, r7]
 8002e6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e6e:	462f      	mov	r7, r5
 8002e70:	42bb      	cmp	r3, r7
 8002e72:	460d      	mov	r5, r1
 8002e74:	d9f4      	bls.n	8002e60 <_printf_i+0x11c>
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d10b      	bne.n	8002e92 <_printf_i+0x14e>
 8002e7a:	6823      	ldr	r3, [r4, #0]
 8002e7c:	07df      	lsls	r7, r3, #31
 8002e7e:	d508      	bpl.n	8002e92 <_printf_i+0x14e>
 8002e80:	6923      	ldr	r3, [r4, #16]
 8002e82:	6861      	ldr	r1, [r4, #4]
 8002e84:	4299      	cmp	r1, r3
 8002e86:	bfde      	ittt	le
 8002e88:	2330      	movle	r3, #48	; 0x30
 8002e8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e92:	1b92      	subs	r2, r2, r6
 8002e94:	6122      	str	r2, [r4, #16]
 8002e96:	464b      	mov	r3, r9
 8002e98:	4621      	mov	r1, r4
 8002e9a:	4640      	mov	r0, r8
 8002e9c:	f8cd a000 	str.w	sl, [sp]
 8002ea0:	aa03      	add	r2, sp, #12
 8002ea2:	f7ff fedf 	bl	8002c64 <_printf_common>
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	d14c      	bne.n	8002f44 <_printf_i+0x200>
 8002eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8002eae:	b004      	add	sp, #16
 8002eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eb4:	4834      	ldr	r0, [pc, #208]	; (8002f88 <_printf_i+0x244>)
 8002eb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002eba:	680e      	ldr	r6, [r1, #0]
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	f856 5b04 	ldr.w	r5, [r6], #4
 8002ec2:	061f      	lsls	r7, r3, #24
 8002ec4:	600e      	str	r6, [r1, #0]
 8002ec6:	d514      	bpl.n	8002ef2 <_printf_i+0x1ae>
 8002ec8:	07d9      	lsls	r1, r3, #31
 8002eca:	bf44      	itt	mi
 8002ecc:	f043 0320 	orrmi.w	r3, r3, #32
 8002ed0:	6023      	strmi	r3, [r4, #0]
 8002ed2:	b91d      	cbnz	r5, 8002edc <_printf_i+0x198>
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	f023 0320 	bic.w	r3, r3, #32
 8002eda:	6023      	str	r3, [r4, #0]
 8002edc:	2310      	movs	r3, #16
 8002ede:	e7af      	b.n	8002e40 <_printf_i+0xfc>
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	f043 0320 	orr.w	r3, r3, #32
 8002ee6:	6023      	str	r3, [r4, #0]
 8002ee8:	2378      	movs	r3, #120	; 0x78
 8002eea:	4828      	ldr	r0, [pc, #160]	; (8002f8c <_printf_i+0x248>)
 8002eec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ef0:	e7e3      	b.n	8002eba <_printf_i+0x176>
 8002ef2:	065e      	lsls	r6, r3, #25
 8002ef4:	bf48      	it	mi
 8002ef6:	b2ad      	uxthmi	r5, r5
 8002ef8:	e7e6      	b.n	8002ec8 <_printf_i+0x184>
 8002efa:	4616      	mov	r6, r2
 8002efc:	e7bb      	b.n	8002e76 <_printf_i+0x132>
 8002efe:	680b      	ldr	r3, [r1, #0]
 8002f00:	6826      	ldr	r6, [r4, #0]
 8002f02:	1d1d      	adds	r5, r3, #4
 8002f04:	6960      	ldr	r0, [r4, #20]
 8002f06:	600d      	str	r5, [r1, #0]
 8002f08:	0635      	lsls	r5, r6, #24
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	d501      	bpl.n	8002f12 <_printf_i+0x1ce>
 8002f0e:	6018      	str	r0, [r3, #0]
 8002f10:	e002      	b.n	8002f18 <_printf_i+0x1d4>
 8002f12:	0671      	lsls	r1, r6, #25
 8002f14:	d5fb      	bpl.n	8002f0e <_printf_i+0x1ca>
 8002f16:	8018      	strh	r0, [r3, #0]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	4616      	mov	r6, r2
 8002f1c:	6123      	str	r3, [r4, #16]
 8002f1e:	e7ba      	b.n	8002e96 <_printf_i+0x152>
 8002f20:	680b      	ldr	r3, [r1, #0]
 8002f22:	1d1a      	adds	r2, r3, #4
 8002f24:	600a      	str	r2, [r1, #0]
 8002f26:	681e      	ldr	r6, [r3, #0]
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4630      	mov	r0, r6
 8002f2c:	6862      	ldr	r2, [r4, #4]
 8002f2e:	f000 f82f 	bl	8002f90 <memchr>
 8002f32:	b108      	cbz	r0, 8002f38 <_printf_i+0x1f4>
 8002f34:	1b80      	subs	r0, r0, r6
 8002f36:	6060      	str	r0, [r4, #4]
 8002f38:	6863      	ldr	r3, [r4, #4]
 8002f3a:	6123      	str	r3, [r4, #16]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f42:	e7a8      	b.n	8002e96 <_printf_i+0x152>
 8002f44:	4632      	mov	r2, r6
 8002f46:	4649      	mov	r1, r9
 8002f48:	4640      	mov	r0, r8
 8002f4a:	6923      	ldr	r3, [r4, #16]
 8002f4c:	47d0      	blx	sl
 8002f4e:	3001      	adds	r0, #1
 8002f50:	d0ab      	beq.n	8002eaa <_printf_i+0x166>
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	079b      	lsls	r3, r3, #30
 8002f56:	d413      	bmi.n	8002f80 <_printf_i+0x23c>
 8002f58:	68e0      	ldr	r0, [r4, #12]
 8002f5a:	9b03      	ldr	r3, [sp, #12]
 8002f5c:	4298      	cmp	r0, r3
 8002f5e:	bfb8      	it	lt
 8002f60:	4618      	movlt	r0, r3
 8002f62:	e7a4      	b.n	8002eae <_printf_i+0x16a>
 8002f64:	2301      	movs	r3, #1
 8002f66:	4632      	mov	r2, r6
 8002f68:	4649      	mov	r1, r9
 8002f6a:	4640      	mov	r0, r8
 8002f6c:	47d0      	blx	sl
 8002f6e:	3001      	adds	r0, #1
 8002f70:	d09b      	beq.n	8002eaa <_printf_i+0x166>
 8002f72:	3501      	adds	r5, #1
 8002f74:	68e3      	ldr	r3, [r4, #12]
 8002f76:	9903      	ldr	r1, [sp, #12]
 8002f78:	1a5b      	subs	r3, r3, r1
 8002f7a:	42ab      	cmp	r3, r5
 8002f7c:	dcf2      	bgt.n	8002f64 <_printf_i+0x220>
 8002f7e:	e7eb      	b.n	8002f58 <_printf_i+0x214>
 8002f80:	2500      	movs	r5, #0
 8002f82:	f104 0619 	add.w	r6, r4, #25
 8002f86:	e7f5      	b.n	8002f74 <_printf_i+0x230>
 8002f88:	08003253 	.word	0x08003253
 8002f8c:	08003264 	.word	0x08003264

08002f90 <memchr>:
 8002f90:	4603      	mov	r3, r0
 8002f92:	b510      	push	{r4, lr}
 8002f94:	b2c9      	uxtb	r1, r1
 8002f96:	4402      	add	r2, r0
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	d101      	bne.n	8002fa2 <memchr+0x12>
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	e003      	b.n	8002faa <memchr+0x1a>
 8002fa2:	7804      	ldrb	r4, [r0, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	428c      	cmp	r4, r1
 8002fa8:	d1f6      	bne.n	8002f98 <memchr+0x8>
 8002faa:	bd10      	pop	{r4, pc}

08002fac <memcpy>:
 8002fac:	440a      	add	r2, r1
 8002fae:	4291      	cmp	r1, r2
 8002fb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fb4:	d100      	bne.n	8002fb8 <memcpy+0xc>
 8002fb6:	4770      	bx	lr
 8002fb8:	b510      	push	{r4, lr}
 8002fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fbe:	4291      	cmp	r1, r2
 8002fc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fc4:	d1f9      	bne.n	8002fba <memcpy+0xe>
 8002fc6:	bd10      	pop	{r4, pc}

08002fc8 <memmove>:
 8002fc8:	4288      	cmp	r0, r1
 8002fca:	b510      	push	{r4, lr}
 8002fcc:	eb01 0402 	add.w	r4, r1, r2
 8002fd0:	d902      	bls.n	8002fd8 <memmove+0x10>
 8002fd2:	4284      	cmp	r4, r0
 8002fd4:	4623      	mov	r3, r4
 8002fd6:	d807      	bhi.n	8002fe8 <memmove+0x20>
 8002fd8:	1e43      	subs	r3, r0, #1
 8002fda:	42a1      	cmp	r1, r4
 8002fdc:	d008      	beq.n	8002ff0 <memmove+0x28>
 8002fde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002fe6:	e7f8      	b.n	8002fda <memmove+0x12>
 8002fe8:	4601      	mov	r1, r0
 8002fea:	4402      	add	r2, r0
 8002fec:	428a      	cmp	r2, r1
 8002fee:	d100      	bne.n	8002ff2 <memmove+0x2a>
 8002ff0:	bd10      	pop	{r4, pc}
 8002ff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ffa:	e7f7      	b.n	8002fec <memmove+0x24>

08002ffc <_free_r>:
 8002ffc:	b538      	push	{r3, r4, r5, lr}
 8002ffe:	4605      	mov	r5, r0
 8003000:	2900      	cmp	r1, #0
 8003002:	d043      	beq.n	800308c <_free_r+0x90>
 8003004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003008:	1f0c      	subs	r4, r1, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	bfb8      	it	lt
 800300e:	18e4      	addlt	r4, r4, r3
 8003010:	f000 f8d0 	bl	80031b4 <__malloc_lock>
 8003014:	4a1e      	ldr	r2, [pc, #120]	; (8003090 <_free_r+0x94>)
 8003016:	6813      	ldr	r3, [r2, #0]
 8003018:	4610      	mov	r0, r2
 800301a:	b933      	cbnz	r3, 800302a <_free_r+0x2e>
 800301c:	6063      	str	r3, [r4, #4]
 800301e:	6014      	str	r4, [r2, #0]
 8003020:	4628      	mov	r0, r5
 8003022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003026:	f000 b8cb 	b.w	80031c0 <__malloc_unlock>
 800302a:	42a3      	cmp	r3, r4
 800302c:	d90a      	bls.n	8003044 <_free_r+0x48>
 800302e:	6821      	ldr	r1, [r4, #0]
 8003030:	1862      	adds	r2, r4, r1
 8003032:	4293      	cmp	r3, r2
 8003034:	bf01      	itttt	eq
 8003036:	681a      	ldreq	r2, [r3, #0]
 8003038:	685b      	ldreq	r3, [r3, #4]
 800303a:	1852      	addeq	r2, r2, r1
 800303c:	6022      	streq	r2, [r4, #0]
 800303e:	6063      	str	r3, [r4, #4]
 8003040:	6004      	str	r4, [r0, #0]
 8003042:	e7ed      	b.n	8003020 <_free_r+0x24>
 8003044:	461a      	mov	r2, r3
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	b10b      	cbz	r3, 800304e <_free_r+0x52>
 800304a:	42a3      	cmp	r3, r4
 800304c:	d9fa      	bls.n	8003044 <_free_r+0x48>
 800304e:	6811      	ldr	r1, [r2, #0]
 8003050:	1850      	adds	r0, r2, r1
 8003052:	42a0      	cmp	r0, r4
 8003054:	d10b      	bne.n	800306e <_free_r+0x72>
 8003056:	6820      	ldr	r0, [r4, #0]
 8003058:	4401      	add	r1, r0
 800305a:	1850      	adds	r0, r2, r1
 800305c:	4283      	cmp	r3, r0
 800305e:	6011      	str	r1, [r2, #0]
 8003060:	d1de      	bne.n	8003020 <_free_r+0x24>
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4401      	add	r1, r0
 8003068:	6011      	str	r1, [r2, #0]
 800306a:	6053      	str	r3, [r2, #4]
 800306c:	e7d8      	b.n	8003020 <_free_r+0x24>
 800306e:	d902      	bls.n	8003076 <_free_r+0x7a>
 8003070:	230c      	movs	r3, #12
 8003072:	602b      	str	r3, [r5, #0]
 8003074:	e7d4      	b.n	8003020 <_free_r+0x24>
 8003076:	6820      	ldr	r0, [r4, #0]
 8003078:	1821      	adds	r1, r4, r0
 800307a:	428b      	cmp	r3, r1
 800307c:	bf01      	itttt	eq
 800307e:	6819      	ldreq	r1, [r3, #0]
 8003080:	685b      	ldreq	r3, [r3, #4]
 8003082:	1809      	addeq	r1, r1, r0
 8003084:	6021      	streq	r1, [r4, #0]
 8003086:	6063      	str	r3, [r4, #4]
 8003088:	6054      	str	r4, [r2, #4]
 800308a:	e7c9      	b.n	8003020 <_free_r+0x24>
 800308c:	bd38      	pop	{r3, r4, r5, pc}
 800308e:	bf00      	nop
 8003090:	20000168 	.word	0x20000168

08003094 <_malloc_r>:
 8003094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003096:	1ccd      	adds	r5, r1, #3
 8003098:	f025 0503 	bic.w	r5, r5, #3
 800309c:	3508      	adds	r5, #8
 800309e:	2d0c      	cmp	r5, #12
 80030a0:	bf38      	it	cc
 80030a2:	250c      	movcc	r5, #12
 80030a4:	2d00      	cmp	r5, #0
 80030a6:	4606      	mov	r6, r0
 80030a8:	db01      	blt.n	80030ae <_malloc_r+0x1a>
 80030aa:	42a9      	cmp	r1, r5
 80030ac:	d903      	bls.n	80030b6 <_malloc_r+0x22>
 80030ae:	230c      	movs	r3, #12
 80030b0:	6033      	str	r3, [r6, #0]
 80030b2:	2000      	movs	r0, #0
 80030b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030b6:	f000 f87d 	bl	80031b4 <__malloc_lock>
 80030ba:	4921      	ldr	r1, [pc, #132]	; (8003140 <_malloc_r+0xac>)
 80030bc:	680a      	ldr	r2, [r1, #0]
 80030be:	4614      	mov	r4, r2
 80030c0:	b99c      	cbnz	r4, 80030ea <_malloc_r+0x56>
 80030c2:	4f20      	ldr	r7, [pc, #128]	; (8003144 <_malloc_r+0xb0>)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	b923      	cbnz	r3, 80030d2 <_malloc_r+0x3e>
 80030c8:	4621      	mov	r1, r4
 80030ca:	4630      	mov	r0, r6
 80030cc:	f000 f862 	bl	8003194 <_sbrk_r>
 80030d0:	6038      	str	r0, [r7, #0]
 80030d2:	4629      	mov	r1, r5
 80030d4:	4630      	mov	r0, r6
 80030d6:	f000 f85d 	bl	8003194 <_sbrk_r>
 80030da:	1c43      	adds	r3, r0, #1
 80030dc:	d123      	bne.n	8003126 <_malloc_r+0x92>
 80030de:	230c      	movs	r3, #12
 80030e0:	4630      	mov	r0, r6
 80030e2:	6033      	str	r3, [r6, #0]
 80030e4:	f000 f86c 	bl	80031c0 <__malloc_unlock>
 80030e8:	e7e3      	b.n	80030b2 <_malloc_r+0x1e>
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	1b5b      	subs	r3, r3, r5
 80030ee:	d417      	bmi.n	8003120 <_malloc_r+0x8c>
 80030f0:	2b0b      	cmp	r3, #11
 80030f2:	d903      	bls.n	80030fc <_malloc_r+0x68>
 80030f4:	6023      	str	r3, [r4, #0]
 80030f6:	441c      	add	r4, r3
 80030f8:	6025      	str	r5, [r4, #0]
 80030fa:	e004      	b.n	8003106 <_malloc_r+0x72>
 80030fc:	6863      	ldr	r3, [r4, #4]
 80030fe:	42a2      	cmp	r2, r4
 8003100:	bf0c      	ite	eq
 8003102:	600b      	streq	r3, [r1, #0]
 8003104:	6053      	strne	r3, [r2, #4]
 8003106:	4630      	mov	r0, r6
 8003108:	f000 f85a 	bl	80031c0 <__malloc_unlock>
 800310c:	f104 000b 	add.w	r0, r4, #11
 8003110:	1d23      	adds	r3, r4, #4
 8003112:	f020 0007 	bic.w	r0, r0, #7
 8003116:	1ac2      	subs	r2, r0, r3
 8003118:	d0cc      	beq.n	80030b4 <_malloc_r+0x20>
 800311a:	1a1b      	subs	r3, r3, r0
 800311c:	50a3      	str	r3, [r4, r2]
 800311e:	e7c9      	b.n	80030b4 <_malloc_r+0x20>
 8003120:	4622      	mov	r2, r4
 8003122:	6864      	ldr	r4, [r4, #4]
 8003124:	e7cc      	b.n	80030c0 <_malloc_r+0x2c>
 8003126:	1cc4      	adds	r4, r0, #3
 8003128:	f024 0403 	bic.w	r4, r4, #3
 800312c:	42a0      	cmp	r0, r4
 800312e:	d0e3      	beq.n	80030f8 <_malloc_r+0x64>
 8003130:	1a21      	subs	r1, r4, r0
 8003132:	4630      	mov	r0, r6
 8003134:	f000 f82e 	bl	8003194 <_sbrk_r>
 8003138:	3001      	adds	r0, #1
 800313a:	d1dd      	bne.n	80030f8 <_malloc_r+0x64>
 800313c:	e7cf      	b.n	80030de <_malloc_r+0x4a>
 800313e:	bf00      	nop
 8003140:	20000168 	.word	0x20000168
 8003144:	2000016c 	.word	0x2000016c

08003148 <_realloc_r>:
 8003148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314a:	4607      	mov	r7, r0
 800314c:	4614      	mov	r4, r2
 800314e:	460e      	mov	r6, r1
 8003150:	b921      	cbnz	r1, 800315c <_realloc_r+0x14>
 8003152:	4611      	mov	r1, r2
 8003154:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003158:	f7ff bf9c 	b.w	8003094 <_malloc_r>
 800315c:	b922      	cbnz	r2, 8003168 <_realloc_r+0x20>
 800315e:	f7ff ff4d 	bl	8002ffc <_free_r>
 8003162:	4625      	mov	r5, r4
 8003164:	4628      	mov	r0, r5
 8003166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003168:	f000 f830 	bl	80031cc <_malloc_usable_size_r>
 800316c:	42a0      	cmp	r0, r4
 800316e:	d20f      	bcs.n	8003190 <_realloc_r+0x48>
 8003170:	4621      	mov	r1, r4
 8003172:	4638      	mov	r0, r7
 8003174:	f7ff ff8e 	bl	8003094 <_malloc_r>
 8003178:	4605      	mov	r5, r0
 800317a:	2800      	cmp	r0, #0
 800317c:	d0f2      	beq.n	8003164 <_realloc_r+0x1c>
 800317e:	4631      	mov	r1, r6
 8003180:	4622      	mov	r2, r4
 8003182:	f7ff ff13 	bl	8002fac <memcpy>
 8003186:	4631      	mov	r1, r6
 8003188:	4638      	mov	r0, r7
 800318a:	f7ff ff37 	bl	8002ffc <_free_r>
 800318e:	e7e9      	b.n	8003164 <_realloc_r+0x1c>
 8003190:	4635      	mov	r5, r6
 8003192:	e7e7      	b.n	8003164 <_realloc_r+0x1c>

08003194 <_sbrk_r>:
 8003194:	b538      	push	{r3, r4, r5, lr}
 8003196:	2300      	movs	r3, #0
 8003198:	4d05      	ldr	r5, [pc, #20]	; (80031b0 <_sbrk_r+0x1c>)
 800319a:	4604      	mov	r4, r0
 800319c:	4608      	mov	r0, r1
 800319e:	602b      	str	r3, [r5, #0]
 80031a0:	f7fd fddc 	bl	8000d5c <_sbrk>
 80031a4:	1c43      	adds	r3, r0, #1
 80031a6:	d102      	bne.n	80031ae <_sbrk_r+0x1a>
 80031a8:	682b      	ldr	r3, [r5, #0]
 80031aa:	b103      	cbz	r3, 80031ae <_sbrk_r+0x1a>
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	bd38      	pop	{r3, r4, r5, pc}
 80031b0:	20000284 	.word	0x20000284

080031b4 <__malloc_lock>:
 80031b4:	4801      	ldr	r0, [pc, #4]	; (80031bc <__malloc_lock+0x8>)
 80031b6:	f000 b811 	b.w	80031dc <__retarget_lock_acquire_recursive>
 80031ba:	bf00      	nop
 80031bc:	2000028c 	.word	0x2000028c

080031c0 <__malloc_unlock>:
 80031c0:	4801      	ldr	r0, [pc, #4]	; (80031c8 <__malloc_unlock+0x8>)
 80031c2:	f000 b80c 	b.w	80031de <__retarget_lock_release_recursive>
 80031c6:	bf00      	nop
 80031c8:	2000028c 	.word	0x2000028c

080031cc <_malloc_usable_size_r>:
 80031cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031d0:	1f18      	subs	r0, r3, #4
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bfbc      	itt	lt
 80031d6:	580b      	ldrlt	r3, [r1, r0]
 80031d8:	18c0      	addlt	r0, r0, r3
 80031da:	4770      	bx	lr

080031dc <__retarget_lock_acquire_recursive>:
 80031dc:	4770      	bx	lr

080031de <__retarget_lock_release_recursive>:
 80031de:	4770      	bx	lr

080031e0 <_init>:
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e2:	bf00      	nop
 80031e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e6:	bc08      	pop	{r3}
 80031e8:	469e      	mov	lr, r3
 80031ea:	4770      	bx	lr

080031ec <_fini>:
 80031ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ee:	bf00      	nop
 80031f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f2:	bc08      	pop	{r3}
 80031f4:	469e      	mov	lr, r3
 80031f6:	4770      	bx	lr
