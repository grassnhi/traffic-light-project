
traffic-light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080044ec  080044ec  000144ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800457c  0800457c  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800457c  0800457c  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800457c  0800457c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800457c  0800457c  0001457c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004580  08004580  00014580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  20000098  0800461c  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  0800461c  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dd90  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000377b  00000000  00000000  0003de51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  000415d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  00042390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb22  00000000  00000000  00042fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d1c  00000000  00000000  0005eb02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b9e4  00000000  00000000  0007381e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff202  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b4  00000000  00000000  000ff258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	080044d4 	.word	0x080044d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	080044d4 	.word	0x080044d4

0800014c <displayUART>:


#include "stdio.h"
#include "main.h"

void displayUART(int counter1, int counter2, UART_HandleTypeDef huart2) {
 800014c:	b082      	sub	sp, #8
 800014e:	b580      	push	{r7, lr}
 8000150:	b082      	sub	sp, #8
 8000152:	af00      	add	r7, sp, #0
 8000154:	6078      	str	r0, [r7, #4]
 8000156:	6039      	str	r1, [r7, #0]
 8000158:	f107 0110 	add.w	r1, r7, #16
 800015c:	e881 000c 	stmia.w	r1, {r2, r3}
	sprintf(str, "!7SEG1=%d \t 7SEG2=%d# \r\n", counter1, counter2);
 8000160:	683b      	ldr	r3, [r7, #0]
 8000162:	687a      	ldr	r2, [r7, #4]
 8000164:	4908      	ldr	r1, [pc, #32]	; (8000188 <displayUART+0x3c>)
 8000166:	4809      	ldr	r0, [pc, #36]	; (800018c <displayUART+0x40>)
 8000168:	f003 fe30 	bl	8003dcc <siprintf>
	HAL_UART_Transmit(&huart2, (void*)str, sizeof(str), 100);
 800016c:	2364      	movs	r3, #100	; 0x64
 800016e:	2232      	movs	r2, #50	; 0x32
 8000170:	4906      	ldr	r1, [pc, #24]	; (800018c <displayUART+0x40>)
 8000172:	f107 0010 	add.w	r0, r7, #16
 8000176:	f003 fbb1 	bl	80038dc <HAL_UART_Transmit>
}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000184:	b002      	add	sp, #8
 8000186:	4770      	bx	lr
 8000188:	080044ec 	.word	0x080044ec
 800018c:	20000174 	.word	0x20000174

08000190 <buzzerRun>:

const int soundDuration[] = {
	250, 125, 80, 60, 60
};

void buzzerRun() {
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	if (getFlagTimer(4)) {
 8000194:	2004      	movs	r0, #4
 8000196:	f001 f9c1 	bl	800151c <getFlagTimer>
 800019a:	4603      	mov	r3, r0
 800019c:	2b00      	cmp	r3, #0
 800019e:	d01e      	beq.n	80001de <buzzerRun+0x4e>
			setTimer(4, soundDuration[3-counter1]);
 80001a0:	4b10      	ldr	r3, [pc, #64]	; (80001e4 <buzzerRun+0x54>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	f1c3 0303 	rsb	r3, r3, #3
 80001a8:	4a0f      	ldr	r2, [pc, #60]	; (80001e8 <buzzerRun+0x58>)
 80001aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ae:	4619      	mov	r1, r3
 80001b0:	2004      	movs	r0, #4
 80001b2:	f001 f9d1 	bl	8001558 <setTimer>
			pitch = 500 - pitch;
 80001b6:	4b0d      	ldr	r3, [pc, #52]	; (80001ec <buzzerRun+0x5c>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 80001be:	4a0b      	ldr	r2, [pc, #44]	; (80001ec <buzzerRun+0x5c>)
 80001c0:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_AUTORELOAD(&htim3, pitch);
 80001c2:	4b0a      	ldr	r3, [pc, #40]	; (80001ec <buzzerRun+0x5c>)
 80001c4:	681a      	ldr	r2, [r3, #0]
 80001c6:	4b0a      	ldr	r3, [pc, #40]	; (80001f0 <buzzerRun+0x60>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <buzzerRun+0x5c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	461a      	mov	r2, r3
 80001d2:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <buzzerRun+0x60>)
 80001d4:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 60);
 80001d6:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <buzzerRun+0x60>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	223c      	movs	r2, #60	; 0x3c
 80001dc:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	200000d0 	.word	0x200000d0
 80001e8:	08004508 	.word	0x08004508
 80001ec:	200000b4 	.word	0x200000b4
 80001f0:	200001a8 	.word	0x200001a8

080001f4 <buzzerStop>:

void buzzerStop() {
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
	pitch = 0;
 80001f8:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <buzzerStop+0x34>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
	cnt = 0;
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <buzzerStop+0x38>)
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim3, pitch);
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <buzzerStop+0x34>)
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	4b09      	ldr	r3, [pc, #36]	; (8000230 <buzzerStop+0x3c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	62da      	str	r2, [r3, #44]	; 0x2c
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <buzzerStop+0x34>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	461a      	mov	r2, r3
 8000214:	4b06      	ldr	r3, [pc, #24]	; (8000230 <buzzerStop+0x3c>)
 8000216:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <buzzerStop+0x3c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2200      	movs	r2, #0
 800021e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	200000b4 	.word	0x200000b4
 800022c:	200000b8 	.word	0x200000b8
 8000230:	200001a8 	.word	0x200001a8

08000234 <traffic_light>:
 */

#include "main.h"


void traffic_light(int color) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	switch (color) {
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d018      	beq.n	8000274 <traffic_light+0x40>
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b00      	cmp	r3, #0
 8000246:	f2c0 8083 	blt.w	8000350 <traffic_light+0x11c>
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2b36      	cmp	r3, #54	; 0x36
 800024e:	dc7f      	bgt.n	8000350 <traffic_light+0x11c>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2b33      	cmp	r3, #51	; 0x33
 8000254:	db7c      	blt.n	8000350 <traffic_light+0x11c>
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	3b33      	subs	r3, #51	; 0x33
 800025a:	2b03      	cmp	r3, #3
 800025c:	d878      	bhi.n	8000350 <traffic_light+0x11c>
 800025e:	a201      	add	r2, pc, #4	; (adr r2, 8000264 <traffic_light+0x30>)
 8000260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000264:	080002f9 	.word	0x080002f9
 8000268:	08000325 	.word	0x08000325
 800026c:	080002a1 	.word	0x080002a1
 8000270:	080002cd 	.word	0x080002cd
		case INIT:
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800027a:	4838      	ldr	r0, [pc, #224]	; (800035c <traffic_light+0x128>)
 800027c:	f001 ff39 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2108      	movs	r1, #8
 8000284:	4836      	ldr	r0, [pc, #216]	; (8000360 <traffic_light+0x12c>)
 8000286:	f001 ff34 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2120      	movs	r1, #32
 800028e:	4834      	ldr	r0, [pc, #208]	; (8000360 <traffic_light+0x12c>)
 8000290:	f001 ff2f 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2110      	movs	r1, #16
 8000298:	4831      	ldr	r0, [pc, #196]	; (8000360 <traffic_light+0x12c>)
 800029a:	f001 ff2a 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 800029e:	e058      	b.n	8000352 <traffic_light+0x11e>
		case GREEN2:
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, SET);
 80002a0:	2201      	movs	r2, #1
 80002a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002a6:	482d      	ldr	r0, [pc, #180]	; (800035c <traffic_light+0x128>)
 80002a8:	f001 ff23 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2108      	movs	r1, #8
 80002b0:	482b      	ldr	r0, [pc, #172]	; (8000360 <traffic_light+0x12c>)
 80002b2:	f001 ff1e 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2120      	movs	r1, #32
 80002ba:	4829      	ldr	r0, [pc, #164]	; (8000360 <traffic_light+0x12c>)
 80002bc:	f001 ff19 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, SET);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2110      	movs	r1, #16
 80002c4:	4826      	ldr	r0, [pc, #152]	; (8000360 <traffic_light+0x12c>)
 80002c6:	f001 ff14 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 80002ca:	e042      	b.n	8000352 <traffic_light+0x11e>
		case AMBER2:
            HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d2:	4822      	ldr	r0, [pc, #136]	; (800035c <traffic_light+0x128>)
 80002d4:	f001 ff0d 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	2108      	movs	r1, #8
 80002dc:	4820      	ldr	r0, [pc, #128]	; (8000360 <traffic_light+0x12c>)
 80002de:	f001 ff08 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, SET);
 80002e2:	2201      	movs	r2, #1
 80002e4:	2120      	movs	r1, #32
 80002e6:	481e      	ldr	r0, [pc, #120]	; (8000360 <traffic_light+0x12c>)
 80002e8:	f001 ff03 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	2110      	movs	r1, #16
 80002f0:	481b      	ldr	r0, [pc, #108]	; (8000360 <traffic_light+0x12c>)
 80002f2:	f001 fefe 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 80002f6:	e02c      	b.n	8000352 <traffic_light+0x11e>
		case GREEN1:
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002fe:	4817      	ldr	r0, [pc, #92]	; (800035c <traffic_light+0x128>)
 8000300:	f001 fef7 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, SET);
 8000304:	2201      	movs	r2, #1
 8000306:	2108      	movs	r1, #8
 8000308:	4815      	ldr	r0, [pc, #84]	; (8000360 <traffic_light+0x12c>)
 800030a:	f001 fef2 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, SET);
 800030e:	2201      	movs	r2, #1
 8000310:	2120      	movs	r1, #32
 8000312:	4813      	ldr	r0, [pc, #76]	; (8000360 <traffic_light+0x12c>)
 8000314:	f001 feed 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2110      	movs	r1, #16
 800031c:	4810      	ldr	r0, [pc, #64]	; (8000360 <traffic_light+0x12c>)
 800031e:	f001 fee8 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 8000322:	e016      	b.n	8000352 <traffic_light+0x11e>
        case AMBER1:
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, SET);
 8000324:	2201      	movs	r2, #1
 8000326:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032a:	480c      	ldr	r0, [pc, #48]	; (800035c <traffic_light+0x128>)
 800032c:	f001 fee1 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, SET);
 8000330:	2201      	movs	r2, #1
 8000332:	2108      	movs	r1, #8
 8000334:	480a      	ldr	r0, [pc, #40]	; (8000360 <traffic_light+0x12c>)
 8000336:	f001 fedc 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, SET);
 800033a:	2201      	movs	r2, #1
 800033c:	2120      	movs	r1, #32
 800033e:	4808      	ldr	r0, [pc, #32]	; (8000360 <traffic_light+0x12c>)
 8000340:	f001 fed7 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2110      	movs	r1, #16
 8000348:	4805      	ldr	r0, [pc, #20]	; (8000360 <traffic_light+0x12c>)
 800034a:	f001 fed2 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 800034e:	e000      	b.n	8000352 <traffic_light+0x11e>
		default:
			break;
 8000350:	bf00      	nop
	}
}
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40010800 	.word	0x40010800
 8000360:	40010c00 	.word	0x40010c00

08000364 <set_blinky>:

int toggle = 0;
void set_blinky(int color) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	switch (color) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2b21      	cmp	r3, #33	; 0x21
 8000370:	d055      	beq.n	800041e <set_blinky+0xba>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2b21      	cmp	r3, #33	; 0x21
 8000376:	dc66      	bgt.n	8000446 <set_blinky+0xe2>
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d003      	beq.n	8000386 <set_blinky+0x22>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2b1f      	cmp	r3, #31
 8000382:	d016      	beq.n	80003b2 <set_blinky+0x4e>
            HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
            HAL_GPIO_TogglePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin);
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
			break;
		default:
			break;
 8000384:	e05f      	b.n	8000446 <set_blinky+0xe2>
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 8000386:	2200      	movs	r2, #0
 8000388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800038c:	4830      	ldr	r0, [pc, #192]	; (8000450 <set_blinky+0xec>)
 800038e:	f001 feb0 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2108      	movs	r1, #8
 8000396:	482f      	ldr	r0, [pc, #188]	; (8000454 <set_blinky+0xf0>)
 8000398:	f001 feab 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2120      	movs	r1, #32
 80003a0:	482c      	ldr	r0, [pc, #176]	; (8000454 <set_blinky+0xf0>)
 80003a2:	f001 fea6 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2110      	movs	r1, #16
 80003aa:	482a      	ldr	r0, [pc, #168]	; (8000454 <set_blinky+0xf0>)
 80003ac:	f001 fea1 	bl	80020f2 <HAL_GPIO_WritePin>
            break;
 80003b0:	e04a      	b.n	8000448 <set_blinky+0xe4>
			if (toggle == 0) {
 80003b2:	4b29      	ldr	r3, [pc, #164]	; (8000458 <set_blinky+0xf4>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d118      	bne.n	80003ec <set_blinky+0x88>
                HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c0:	4823      	ldr	r0, [pc, #140]	; (8000450 <set_blinky+0xec>)
 80003c2:	f001 fe96 	bl	80020f2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2108      	movs	r1, #8
 80003ca:	4822      	ldr	r0, [pc, #136]	; (8000454 <set_blinky+0xf0>)
 80003cc:	f001 fe91 	bl	80020f2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, SET);
 80003d0:	2201      	movs	r2, #1
 80003d2:	2120      	movs	r1, #32
 80003d4:	481f      	ldr	r0, [pc, #124]	; (8000454 <set_blinky+0xf0>)
 80003d6:	f001 fe8c 	bl	80020f2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, SET);
 80003da:	2201      	movs	r2, #1
 80003dc:	2110      	movs	r1, #16
 80003de:	481d      	ldr	r0, [pc, #116]	; (8000454 <set_blinky+0xf0>)
 80003e0:	f001 fe87 	bl	80020f2 <HAL_GPIO_WritePin>
                toggle = 1;
 80003e4:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <set_blinky+0xf4>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	601a      	str	r2, [r3, #0]
			break;
 80003ea:	e02d      	b.n	8000448 <set_blinky+0xe4>
                HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003f2:	4817      	ldr	r0, [pc, #92]	; (8000450 <set_blinky+0xec>)
 80003f4:	f001 fe7d 	bl	80020f2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2108      	movs	r1, #8
 80003fc:	4815      	ldr	r0, [pc, #84]	; (8000454 <set_blinky+0xf0>)
 80003fe:	f001 fe78 	bl	80020f2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	2120      	movs	r1, #32
 8000406:	4813      	ldr	r0, [pc, #76]	; (8000454 <set_blinky+0xf0>)
 8000408:	f001 fe73 	bl	80020f2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	2110      	movs	r1, #16
 8000410:	4810      	ldr	r0, [pc, #64]	; (8000454 <set_blinky+0xf0>)
 8000412:	f001 fe6e 	bl	80020f2 <HAL_GPIO_WritePin>
                toggle = 0;
 8000416:	4b10      	ldr	r3, [pc, #64]	; (8000458 <set_blinky+0xf4>)
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
			break;
 800041c:	e014      	b.n	8000448 <set_blinky+0xe4>
			HAL_GPIO_TogglePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin);
 800041e:	2108      	movs	r1, #8
 8000420:	480c      	ldr	r0, [pc, #48]	; (8000454 <set_blinky+0xf0>)
 8000422:	f001 fe7e 	bl	8002122 <HAL_GPIO_TogglePin>
            HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042c:	4808      	ldr	r0, [pc, #32]	; (8000450 <set_blinky+0xec>)
 800042e:	f001 fe60 	bl	80020f2 <HAL_GPIO_WritePin>
            HAL_GPIO_TogglePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin);
 8000432:	2110      	movs	r1, #16
 8000434:	4807      	ldr	r0, [pc, #28]	; (8000454 <set_blinky+0xf0>)
 8000436:	f001 fe74 	bl	8002122 <HAL_GPIO_TogglePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2120      	movs	r1, #32
 800043e:	4805      	ldr	r0, [pc, #20]	; (8000454 <set_blinky+0xf0>)
 8000440:	f001 fe57 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 8000444:	e000      	b.n	8000448 <set_blinky+0xe4>
			break;
 8000446:	bf00      	nop
	}
}
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40010800 	.word	0x40010800
 8000454:	40010c00 	.word	0x40010c00
 8000458:	200000bc 	.word	0x200000bc

0800045c <pedestrian_light>:

void pedestrian_light(int color){
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
    switch (color)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2b2b      	cmp	r3, #43	; 0x2b
 8000468:	d023      	beq.n	80004b2 <pedestrian_light+0x56>
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2b2b      	cmp	r3, #43	; 0x2b
 800046e:	dc2d      	bgt.n	80004cc <pedestrian_light+0x70>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2b29      	cmp	r3, #41	; 0x29
 8000474:	d003      	beq.n	800047e <pedestrian_light+0x22>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b2a      	cmp	r3, #42	; 0x2a
 800047a:	d00d      	beq.n	8000498 <pedestrian_light+0x3c>
    case PED_RED:
        HAL_GPIO_WritePin(PLIGHT1_GPIO_Port, PLIGHT1_Pin, SET);
		HAL_GPIO_WritePin(PLIGHT2_GPIO_Port, PLIGHT2_Pin, RESET);
        break;
    default:
        break;
 800047c:	e026      	b.n	80004cc <pedestrian_light+0x70>
        HAL_GPIO_WritePin(PLIGHT1_GPIO_Port, PLIGHT1_Pin, RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000484:	4814      	ldr	r0, [pc, #80]	; (80004d8 <pedestrian_light+0x7c>)
 8000486:	f001 fe34 	bl	80020f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLIGHT2_GPIO_Port, PLIGHT2_Pin, RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000490:	4812      	ldr	r0, [pc, #72]	; (80004dc <pedestrian_light+0x80>)
 8000492:	f001 fe2e 	bl	80020f2 <HAL_GPIO_WritePin>
        break;
 8000496:	e01a      	b.n	80004ce <pedestrian_light+0x72>
        HAL_GPIO_WritePin(PLIGHT1_GPIO_Port, PLIGHT1_Pin, RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049e:	480e      	ldr	r0, [pc, #56]	; (80004d8 <pedestrian_light+0x7c>)
 80004a0:	f001 fe27 	bl	80020f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLIGHT2_GPIO_Port, PLIGHT2_Pin, SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004aa:	480c      	ldr	r0, [pc, #48]	; (80004dc <pedestrian_light+0x80>)
 80004ac:	f001 fe21 	bl	80020f2 <HAL_GPIO_WritePin>
        break;
 80004b0:	e00d      	b.n	80004ce <pedestrian_light+0x72>
        HAL_GPIO_WritePin(PLIGHT1_GPIO_Port, PLIGHT1_Pin, SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b8:	4807      	ldr	r0, [pc, #28]	; (80004d8 <pedestrian_light+0x7c>)
 80004ba:	f001 fe1a 	bl	80020f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLIGHT2_GPIO_Port, PLIGHT2_Pin, RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c4:	4805      	ldr	r0, [pc, #20]	; (80004dc <pedestrian_light+0x80>)
 80004c6:	f001 fe14 	bl	80020f2 <HAL_GPIO_WritePin>
        break;
 80004ca:	e000      	b.n	80004ce <pedestrian_light+0x72>
        break;
 80004cc:	bf00      	nop
    }
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40010c00 	.word	0x40010c00
 80004dc:	40010800 	.word	0x40010800

080004e0 <fsm_automatic_init>:
 *      Author: PC
 */

#include "fsm_automatic.h"

void fsm_automatic_init(int color){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3b33      	subs	r3, #51	; 0x33
 80004ec:	2b03      	cmp	r3, #3
 80004ee:	d865      	bhi.n	80005bc <fsm_automatic_init+0xdc>
 80004f0:	a201      	add	r2, pc, #4	; (adr r2, 80004f8 <fsm_automatic_init+0x18>)
 80004f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f6:	bf00      	nop
 80004f8:	08000509 	.word	0x08000509
 80004fc:	08000537 	.word	0x08000537
 8000500:	08000563 	.word	0x08000563
 8000504:	08000591 	.word	0x08000591
	switch(color){
	case GREEN1:
		counter1 = GREEN;
 8000508:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <fsm_automatic_init+0xe8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a2f      	ldr	r2, [pc, #188]	; (80005cc <fsm_automatic_init+0xec>)
 800050e:	6013      	str	r3, [r2, #0]
		counter2 = RED;
 8000510:	4b2f      	ldr	r3, [pc, #188]	; (80005d0 <fsm_automatic_init+0xf0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a2f      	ldr	r2, [pc, #188]	; (80005d4 <fsm_automatic_init+0xf4>)
 8000516:	6013      	str	r3, [r2, #0]
		current_state = GREEN1;
 8000518:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <fsm_automatic_init+0xf8>)
 800051a:	2233      	movs	r2, #51	; 0x33
 800051c:	601a      	str	r2, [r3, #0]
		setTimer(0, 1000);
 800051e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000522:	2000      	movs	r0, #0
 8000524:	f001 f818 	bl	8001558 <setTimer>
		setTimer(4, TIME_CYCLE);
 8000528:	4b2c      	ldr	r3, [pc, #176]	; (80005dc <fsm_automatic_init+0xfc>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	2004      	movs	r0, #4
 8000530:	f001 f812 	bl	8001558 <setTimer>
		break;
 8000534:	e043      	b.n	80005be <fsm_automatic_init+0xde>
	case AMBER1:
		counter1 = RED - GREEN;
 8000536:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <fsm_automatic_init+0xf0>)
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <fsm_automatic_init+0xe8>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	4a22      	ldr	r2, [pc, #136]	; (80005cc <fsm_automatic_init+0xec>)
 8000542:	6013      	str	r3, [r2, #0]
		current_state = AMBER1;
 8000544:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <fsm_automatic_init+0xf8>)
 8000546:	2234      	movs	r2, #52	; 0x34
 8000548:	601a      	str	r2, [r3, #0]
		setTimer(0, 1000);
 800054a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800054e:	2000      	movs	r0, #0
 8000550:	f001 f802 	bl	8001558 <setTimer>
		setTimer(4, TIME_CYCLE);
 8000554:	4b21      	ldr	r3, [pc, #132]	; (80005dc <fsm_automatic_init+0xfc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	2004      	movs	r0, #4
 800055c:	f000 fffc 	bl	8001558 <setTimer>
		break;
 8000560:	e02d      	b.n	80005be <fsm_automatic_init+0xde>
	case GREEN2:
		counter1 = RED;
 8000562:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <fsm_automatic_init+0xf0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a19      	ldr	r2, [pc, #100]	; (80005cc <fsm_automatic_init+0xec>)
 8000568:	6013      	str	r3, [r2, #0]
		counter2 = GREEN;
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <fsm_automatic_init+0xe8>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <fsm_automatic_init+0xf4>)
 8000570:	6013      	str	r3, [r2, #0]
		current_state = GREEN2;
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <fsm_automatic_init+0xf8>)
 8000574:	2235      	movs	r2, #53	; 0x35
 8000576:	601a      	str	r2, [r3, #0]
		setTimer(0, 1000);
 8000578:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800057c:	2000      	movs	r0, #0
 800057e:	f000 ffeb 	bl	8001558 <setTimer>
		setTimer(4, TIME_CYCLE);
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <fsm_automatic_init+0xfc>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4619      	mov	r1, r3
 8000588:	2004      	movs	r0, #4
 800058a:	f000 ffe5 	bl	8001558 <setTimer>
		break;
 800058e:	e016      	b.n	80005be <fsm_automatic_init+0xde>
	case AMBER2:
		counter2 = RED - GREEN;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <fsm_automatic_init+0xf0>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <fsm_automatic_init+0xe8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <fsm_automatic_init+0xf4>)
 800059c:	6013      	str	r3, [r2, #0]
		current_state = AMBER2;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <fsm_automatic_init+0xf8>)
 80005a0:	2236      	movs	r2, #54	; 0x36
 80005a2:	601a      	str	r2, [r3, #0]
		setTimer(0, 1000);
 80005a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 ffd5 	bl	8001558 <setTimer>
		setTimer(4, TIME_CYCLE);
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <fsm_automatic_init+0xfc>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4619      	mov	r1, r3
 80005b4:	2004      	movs	r0, #4
 80005b6:	f000 ffcf 	bl	8001558 <setTimer>
		break;
 80005ba:	e000      	b.n	80005be <fsm_automatic_init+0xde>
	default:
		break;
 80005bc:	bf00      	nop
	}
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000008 	.word	0x20000008
 80005cc:	200000d0 	.word	0x200000d0
 80005d0:	20000000 	.word	0x20000000
 80005d4:	200000d4 	.word	0x200000d4
 80005d8:	20000170 	.word	0x20000170
 80005dc:	20000024 	.word	0x20000024

080005e0 <fsm_automatic_run>:

void fsm_automatic_run() {
 80005e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e2:	b093      	sub	sp, #76	; 0x4c
 80005e4:	af10      	add	r7, sp, #64	; 0x40
	switch(current_state){
 80005e6:	4b44      	ldr	r3, [pc, #272]	; (80006f8 <fsm_automatic_run+0x118>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3b33      	subs	r3, #51	; 0x33
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d847      	bhi.n	8000680 <fsm_automatic_run+0xa0>
 80005f0:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <fsm_automatic_run+0x18>)
 80005f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f6:	bf00      	nop
 80005f8:	08000645 	.word	0x08000645
 80005fc:	08000663 	.word	0x08000663
 8000600:	08000609 	.word	0x08000609
 8000604:	08000627 	.word	0x08000627

	case GREEN2:
		traffic_light(GREEN2);
 8000608:	2035      	movs	r0, #53	; 0x35
 800060a:	f7ff fe13 	bl	8000234 <traffic_light>

		if (counter1 <= 0 || counter2 <= 0) {
 800060e:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <fsm_automatic_run+0x11c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	dd03      	ble.n	800061e <fsm_automatic_run+0x3e>
 8000616:	4b3a      	ldr	r3, [pc, #232]	; (8000700 <fsm_automatic_run+0x120>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	dc32      	bgt.n	8000684 <fsm_automatic_run+0xa4>
			fsm_automatic_init(AMBER2);
 800061e:	2036      	movs	r0, #54	; 0x36
 8000620:	f7ff ff5e 	bl	80004e0 <fsm_automatic_init>
		}
		break;
 8000624:	e02e      	b.n	8000684 <fsm_automatic_run+0xa4>

	case AMBER2:
		traffic_light(AMBER2);
 8000626:	2036      	movs	r0, #54	; 0x36
 8000628:	f7ff fe04 	bl	8000234 <traffic_light>

		if (counter1 <= 0 || counter2 <= 0) {
 800062c:	4b33      	ldr	r3, [pc, #204]	; (80006fc <fsm_automatic_run+0x11c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	dd03      	ble.n	800063c <fsm_automatic_run+0x5c>
 8000634:	4b32      	ldr	r3, [pc, #200]	; (8000700 <fsm_automatic_run+0x120>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	dc25      	bgt.n	8000688 <fsm_automatic_run+0xa8>
			fsm_automatic_init(GREEN1);
 800063c:	2033      	movs	r0, #51	; 0x33
 800063e:	f7ff ff4f 	bl	80004e0 <fsm_automatic_init>
		}
		break;
 8000642:	e021      	b.n	8000688 <fsm_automatic_run+0xa8>

	case GREEN1:
		traffic_light(GREEN1);
 8000644:	2033      	movs	r0, #51	; 0x33
 8000646:	f7ff fdf5 	bl	8000234 <traffic_light>

		if (counter1 <= 0 || counter2 <= 0) {
 800064a:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <fsm_automatic_run+0x11c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	dd03      	ble.n	800065a <fsm_automatic_run+0x7a>
 8000652:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <fsm_automatic_run+0x120>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	dc18      	bgt.n	800068c <fsm_automatic_run+0xac>
			fsm_automatic_init(AMBER1);
 800065a:	2034      	movs	r0, #52	; 0x34
 800065c:	f7ff ff40 	bl	80004e0 <fsm_automatic_init>
		}
		break;
 8000660:	e014      	b.n	800068c <fsm_automatic_run+0xac>

	case AMBER1:
		traffic_light(AMBER1);
 8000662:	2034      	movs	r0, #52	; 0x34
 8000664:	f7ff fde6 	bl	8000234 <traffic_light>

		if (counter1 <= 0 || counter2 <= 0) {
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <fsm_automatic_run+0x11c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	dd03      	ble.n	8000678 <fsm_automatic_run+0x98>
 8000670:	4b23      	ldr	r3, [pc, #140]	; (8000700 <fsm_automatic_run+0x120>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	dc0b      	bgt.n	8000690 <fsm_automatic_run+0xb0>
			fsm_automatic_init(GREEN2);
 8000678:	2035      	movs	r0, #53	; 0x35
 800067a:	f7ff ff31 	bl	80004e0 <fsm_automatic_init>
		}
		break;
 800067e:	e007      	b.n	8000690 <fsm_automatic_run+0xb0>

	default:
		break;
 8000680:	bf00      	nop
 8000682:	e006      	b.n	8000692 <fsm_automatic_run+0xb2>
		break;
 8000684:	bf00      	nop
 8000686:	e004      	b.n	8000692 <fsm_automatic_run+0xb2>
		break;
 8000688:	bf00      	nop
 800068a:	e002      	b.n	8000692 <fsm_automatic_run+0xb2>
		break;
 800068c:	bf00      	nop
 800068e:	e000      	b.n	8000692 <fsm_automatic_run+0xb2>
		break;
 8000690:	bf00      	nop
	}
	if (getFlagTimer(0) == 1){
 8000692:	2000      	movs	r0, #0
 8000694:	f000 ff42 	bl	800151c <getFlagTimer>
 8000698:	4603      	mov	r3, r0
 800069a:	2b01      	cmp	r3, #1
 800069c:	d128      	bne.n	80006f0 <fsm_automatic_run+0x110>
		counter1--;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <fsm_automatic_run+0x11c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	4a15      	ldr	r2, [pc, #84]	; (80006fc <fsm_automatic_run+0x11c>)
 80006a6:	6013      	str	r3, [r2, #0]
		counter2--;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <fsm_automatic_run+0x120>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	4a14      	ldr	r2, [pc, #80]	; (8000700 <fsm_automatic_run+0x120>)
 80006b0:	6013      	str	r3, [r2, #0]
		displayUART(counter1,counter2, huart2);
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <fsm_automatic_run+0x11c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <fsm_automatic_run+0x120>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	603a      	str	r2, [r7, #0]
 80006be:	4e11      	ldr	r6, [pc, #68]	; (8000704 <fsm_automatic_run+0x124>)
 80006c0:	466d      	mov	r5, sp
 80006c2:	f106 0408 	add.w	r4, r6, #8
 80006c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80006da:	e896 000c 	ldmia.w	r6, {r2, r3}
 80006de:	6839      	ldr	r1, [r7, #0]
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff fd33 	bl	800014c <displayUART>
		setTimer(0, 1000);
 80006e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006ea:	2000      	movs	r0, #0
 80006ec:	f000 ff34 	bl	8001558 <setTimer>
	}
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006f8:	20000170 	.word	0x20000170
 80006fc:	200000d0 	.word	0x200000d0
 8000700:	200000d4 	.word	0x200000d4
 8000704:	20000238 	.word	0x20000238

08000708 <fsm>:
 *  Created on: Nov 20, 2023
 *      Author: Admin
 */
#include "fsm_main.h"

void fsm(){
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

	switch(status){
 800070c:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <fsm+0xf4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d870      	bhi.n	80007f6 <fsm+0xee>
 8000714:	a201      	add	r2, pc, #4	; (adr r2, 800071c <fsm+0x14>)
 8000716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071a:	bf00      	nop
 800071c:	0800072d 	.word	0x0800072d
 8000720:	0800074f 	.word	0x0800074f
 8000724:	0800076f 	.word	0x0800076f
 8000728:	080007bf 	.word	0x080007bf
	case INIT:
		fsm_automatic_init();
 800072c:	f7ff fed8 	bl	80004e0 <fsm_automatic_init>
		traffic_light(INIT);
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff fd7f 	bl	8000234 <traffic_light>
		ped_status = PED_OFF;
 8000736:	4b32      	ldr	r3, [pc, #200]	; (8000800 <fsm+0xf8>)
 8000738:	2229      	movs	r2, #41	; 0x29
 800073a:	601a      	str	r2, [r3, #0]
		clearAllTimer();
 800073c:	f000 ff2e 	bl	800159c <clearAllTimer>
		fsm_automatic_init(GREEN2);
 8000740:	2035      	movs	r0, #53	; 0x35
 8000742:	f7ff fecd 	bl	80004e0 <fsm_automatic_init>
		status = AUTO;
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <fsm+0xf4>)
 8000748:	2201      	movs	r2, #1
 800074a:	601a      	str	r2, [r3, #0]
		break;
 800074c:	e053      	b.n	80007f6 <fsm+0xee>
	case AUTO:
		fsm_automatic_run();
 800074e:	f7ff ff47 	bl	80005e0 <fsm_automatic_run>
		fsm_pedestrian_run();
 8000752:	f000 f8ad 	bl	80008b0 <fsm_pedestrian_run>
		if(isButtonPressed(0) == 1){
 8000756:	2000      	movs	r0, #0
 8000758:	f000 fa8c 	bl	8000c74 <isButtonPressed>
 800075c:	4603      	mov	r3, r0
 800075e:	2b01      	cmp	r3, #1
 8000760:	d144      	bne.n	80007ec <fsm+0xe4>
			clearAllTimer();
 8000762:	f000 ff1b 	bl	800159c <clearAllTimer>
			status = MANUAL;
 8000766:	4b25      	ldr	r3, [pc, #148]	; (80007fc <fsm+0xf4>)
 8000768:	2202      	movs	r2, #2
 800076a:	601a      	str	r2, [r3, #0]
		}
		break;
 800076c:	e03e      	b.n	80007ec <fsm+0xe4>
	case MANUAL:
		fsm_manual_run();
 800076e:	f000 f84d 	bl	800080c <fsm_manual_run>
		if(isButtonPressed(0) == 1){
 8000772:	2000      	movs	r0, #0
 8000774:	f000 fa7e 	bl	8000c74 <isButtonPressed>
 8000778:	4603      	mov	r3, r0
 800077a:	2b01      	cmp	r3, #1
 800077c:	d110      	bne.n	80007a0 <fsm+0x98>
			clearAllTimer();
 800077e:	f000 ff0d 	bl	800159c <clearAllTimer>
			set_blinky(INIT);
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff fdee 	bl	8000364 <set_blinky>
			setTimer(3, 500);
 8000788:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800078c:	2003      	movs	r0, #3
 800078e:	f000 fee3 	bl	8001558 <setTimer>
			status = TURNING;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <fsm+0xf4>)
 8000794:	2203      	movs	r2, #3
 8000796:	601a      	str	r2, [r3, #0]
			turn_state = AUTO_AMBER;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <fsm+0xfc>)
 800079a:	221f      	movs	r2, #31
 800079c:	601a      	str	r2, [r3, #0]

		}else if(isButtonPressed(2) == 1){
			status = AUTO;
			fsm_automatic_init(current_state);
		}
		break;
 800079e:	e027      	b.n	80007f0 <fsm+0xe8>
		}else if(isButtonPressed(2) == 1){
 80007a0:	2002      	movs	r0, #2
 80007a2:	f000 fa67 	bl	8000c74 <isButtonPressed>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d121      	bne.n	80007f0 <fsm+0xe8>
			status = AUTO;
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <fsm+0xf4>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	601a      	str	r2, [r3, #0]
			fsm_automatic_init(current_state);
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <fsm+0x100>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fe92 	bl	80004e0 <fsm_automatic_init>
		break;
 80007bc:	e018      	b.n	80007f0 <fsm+0xe8>
	case TURNING:
		fsm_turning_run(turn_state);
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <fsm+0xfc>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f912 	bl	80009ec <fsm_turning_run>
		if(isButtonPressed(0) == 1){
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 fa53 	bl	8000c74 <isButtonPressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d10f      	bne.n	80007f4 <fsm+0xec>
			if(turn_state == AUTO_AMBER){
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <fsm+0xfc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b1f      	cmp	r3, #31
 80007da:	d103      	bne.n	80007e4 <fsm+0xdc>
				turn_state = AUTO_GREEN;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <fsm+0xfc>)
 80007de:	2221      	movs	r2, #33	; 0x21
 80007e0:	601a      	str	r2, [r3, #0]
			}else{
				status = INIT;
			}
		}
		break;
 80007e2:	e007      	b.n	80007f4 <fsm+0xec>
				status = INIT;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <fsm+0xf4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
		break;
 80007ea:	e003      	b.n	80007f4 <fsm+0xec>
		break;
 80007ec:	bf00      	nop
 80007ee:	e002      	b.n	80007f6 <fsm+0xee>
		break;
 80007f0:	bf00      	nop
 80007f2:	e000      	b.n	80007f6 <fsm+0xee>
		break;
 80007f4:	bf00      	nop
}
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000c4 	.word	0x200000c4
 8000800:	200000c8 	.word	0x200000c8
 8000804:	200000cc 	.word	0x200000cc
 8000808:	20000170 	.word	0x20000170

0800080c <fsm_manual_run>:
 *  Created on: Nov 13, 2023
 *      Author: Admin
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	switch(current_state){
 8000810:	4b26      	ldr	r3, [pc, #152]	; (80008ac <fsm_manual_run+0xa0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	3b33      	subs	r3, #51	; 0x33
 8000816:	2b03      	cmp	r3, #3
 8000818:	d845      	bhi.n	80008a6 <fsm_manual_run+0x9a>
 800081a:	a201      	add	r2, pc, #4	; (adr r2, 8000820 <fsm_manual_run+0x14>)
 800081c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000820:	08000831 	.word	0x08000831
 8000824:	0800084b 	.word	0x0800084b
 8000828:	08000865 	.word	0x08000865
 800082c:	0800087f 	.word	0x0800087f
	case GREEN1:
		traffic_light(GREEN1);
 8000830:	2033      	movs	r0, #51	; 0x33
 8000832:	f7ff fcff 	bl	8000234 <traffic_light>
		if(isButtonPressed(1)){
 8000836:	2001      	movs	r0, #1
 8000838:	f000 fa1c 	bl	8000c74 <isButtonPressed>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d02a      	beq.n	8000898 <fsm_manual_run+0x8c>
			current_state = AMBER1;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <fsm_manual_run+0xa0>)
 8000844:	2234      	movs	r2, #52	; 0x34
 8000846:	601a      	str	r2, [r3, #0]
		}
		break;
 8000848:	e026      	b.n	8000898 <fsm_manual_run+0x8c>
	case AMBER1:
		traffic_light(AMBER1);
 800084a:	2034      	movs	r0, #52	; 0x34
 800084c:	f7ff fcf2 	bl	8000234 <traffic_light>
		if(isButtonPressed(1)){
 8000850:	2001      	movs	r0, #1
 8000852:	f000 fa0f 	bl	8000c74 <isButtonPressed>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d01f      	beq.n	800089c <fsm_manual_run+0x90>
			current_state = GREEN2;
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <fsm_manual_run+0xa0>)
 800085e:	2235      	movs	r2, #53	; 0x35
 8000860:	601a      	str	r2, [r3, #0]
		}
		break;
 8000862:	e01b      	b.n	800089c <fsm_manual_run+0x90>
	case GREEN2:
		traffic_light(GREEN2);
 8000864:	2035      	movs	r0, #53	; 0x35
 8000866:	f7ff fce5 	bl	8000234 <traffic_light>
		if(isButtonPressed(1)){
 800086a:	2001      	movs	r0, #1
 800086c:	f000 fa02 	bl	8000c74 <isButtonPressed>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d014      	beq.n	80008a0 <fsm_manual_run+0x94>
			current_state = AMBER2;
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <fsm_manual_run+0xa0>)
 8000878:	2236      	movs	r2, #54	; 0x36
 800087a:	601a      	str	r2, [r3, #0]
		}
		break;
 800087c:	e010      	b.n	80008a0 <fsm_manual_run+0x94>
	case AMBER2:
		traffic_light(AMBER2);
 800087e:	2036      	movs	r0, #54	; 0x36
 8000880:	f7ff fcd8 	bl	8000234 <traffic_light>
		if(isButtonPressed(1)){
 8000884:	2001      	movs	r0, #1
 8000886:	f000 f9f5 	bl	8000c74 <isButtonPressed>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d009      	beq.n	80008a4 <fsm_manual_run+0x98>
			current_state = GREEN1;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <fsm_manual_run+0xa0>)
 8000892:	2233      	movs	r2, #51	; 0x33
 8000894:	601a      	str	r2, [r3, #0]
		}
		break;
 8000896:	e005      	b.n	80008a4 <fsm_manual_run+0x98>
		break;
 8000898:	bf00      	nop
 800089a:	e004      	b.n	80008a6 <fsm_manual_run+0x9a>
		break;
 800089c:	bf00      	nop
 800089e:	e002      	b.n	80008a6 <fsm_manual_run+0x9a>
		break;
 80008a0:	bf00      	nop
 80008a2:	e000      	b.n	80008a6 <fsm_manual_run+0x9a>
		break;
 80008a4:	bf00      	nop
	}
};
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000170 	.word	0x20000170

080008b0 <fsm_pedestrian_run>:
#include "fsm_pedestrian.h"


static int duration = 0;

void fsm_pedestrian_run() {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	switch(ped_status) {
 80008b4:	4b47      	ldr	r3, [pc, #284]	; (80009d4 <fsm_pedestrian_run+0x124>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b2b      	cmp	r3, #43	; 0x2b
 80008ba:	d033      	beq.n	8000924 <fsm_pedestrian_run+0x74>
 80008bc:	2b2b      	cmp	r3, #43	; 0x2b
 80008be:	f300 8086 	bgt.w	80009ce <fsm_pedestrian_run+0x11e>
 80008c2:	2b29      	cmp	r3, #41	; 0x29
 80008c4:	d002      	beq.n	80008cc <fsm_pedestrian_run+0x1c>
 80008c6:	2b2a      	cmp	r3, #42	; 0x2a
 80008c8:	d052      	beq.n	8000970 <fsm_pedestrian_run+0xc0>
		if(isButtonPressed(3)==1){
			setTimer(1, duration);
		}
		break;
	}
}
 80008ca:	e080      	b.n	80009ce <fsm_pedestrian_run+0x11e>
		buzzerStop();
 80008cc:	f7ff fc92 	bl	80001f4 <buzzerStop>
		pedestrian_light(PED_OFF);
 80008d0:	2029      	movs	r0, #41	; 0x29
 80008d2:	f7ff fdc3 	bl	800045c <pedestrian_light>
		duration = RED + GREEN;
 80008d6:	4b40      	ldr	r3, [pc, #256]	; (80009d8 <fsm_pedestrian_run+0x128>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	4b40      	ldr	r3, [pc, #256]	; (80009dc <fsm_pedestrian_run+0x12c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a3f      	ldr	r2, [pc, #252]	; (80009e0 <fsm_pedestrian_run+0x130>)
 80008e2:	6013      	str	r3, [r2, #0]
		if (isButtonPressed(3)==1) {
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 f9c5 	bl	8000c74 <isButtonPressed>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d169      	bne.n	80009c4 <fsm_pedestrian_run+0x114>
			setTimer(1, duration*1000);
 80008f0:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <fsm_pedestrian_run+0x130>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	4619      	mov	r1, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	f000 fe2a 	bl	8001558 <setTimer>
			if (current_state == GREEN2 || current_state == AMBER2)
 8000904:	4b37      	ldr	r3, [pc, #220]	; (80009e4 <fsm_pedestrian_run+0x134>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b35      	cmp	r3, #53	; 0x35
 800090a:	d003      	beq.n	8000914 <fsm_pedestrian_run+0x64>
 800090c:	4b35      	ldr	r3, [pc, #212]	; (80009e4 <fsm_pedestrian_run+0x134>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b36      	cmp	r3, #54	; 0x36
 8000912:	d103      	bne.n	800091c <fsm_pedestrian_run+0x6c>
				ped_status = PED_RED;
 8000914:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <fsm_pedestrian_run+0x124>)
 8000916:	222b      	movs	r2, #43	; 0x2b
 8000918:	601a      	str	r2, [r3, #0]
		break;
 800091a:	e053      	b.n	80009c4 <fsm_pedestrian_run+0x114>
				ped_status = PED_GREEN;
 800091c:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <fsm_pedestrian_run+0x124>)
 800091e:	222a      	movs	r2, #42	; 0x2a
 8000920:	601a      	str	r2, [r3, #0]
		break;
 8000922:	e04f      	b.n	80009c4 <fsm_pedestrian_run+0x114>
		buzzerStop();
 8000924:	f7ff fc66 	bl	80001f4 <buzzerStop>
		pedestrian_light(PED_RED);
 8000928:	202b      	movs	r0, #43	; 0x2b
 800092a:	f7ff fd97 	bl	800045c <pedestrian_light>
		if (current_state == GREEN1 || current_state == AMBER1)
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <fsm_pedestrian_run+0x134>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b33      	cmp	r3, #51	; 0x33
 8000934:	d003      	beq.n	800093e <fsm_pedestrian_run+0x8e>
 8000936:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <fsm_pedestrian_run+0x134>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b34      	cmp	r3, #52	; 0x34
 800093c:	d102      	bne.n	8000944 <fsm_pedestrian_run+0x94>
			ped_status = PED_GREEN;
 800093e:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <fsm_pedestrian_run+0x124>)
 8000940:	222a      	movs	r2, #42	; 0x2a
 8000942:	601a      	str	r2, [r3, #0]
		if (getFlagTimer(1) == 1){
 8000944:	2001      	movs	r0, #1
 8000946:	f000 fde9 	bl	800151c <getFlagTimer>
 800094a:	4603      	mov	r3, r0
 800094c:	2b01      	cmp	r3, #1
 800094e:	d102      	bne.n	8000956 <fsm_pedestrian_run+0xa6>
			ped_status = PED_OFF;
 8000950:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <fsm_pedestrian_run+0x124>)
 8000952:	2229      	movs	r2, #41	; 0x29
 8000954:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(3)==1){
 8000956:	2003      	movs	r0, #3
 8000958:	f000 f98c 	bl	8000c74 <isButtonPressed>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d132      	bne.n	80009c8 <fsm_pedestrian_run+0x118>
			setTimer(1, duration);
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <fsm_pedestrian_run+0x130>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4619      	mov	r1, r3
 8000968:	2001      	movs	r0, #1
 800096a:	f000 fdf5 	bl	8001558 <setTimer>
		break;
 800096e:	e02b      	b.n	80009c8 <fsm_pedestrian_run+0x118>
		pedestrian_light(PED_GREEN);
 8000970:	202a      	movs	r0, #42	; 0x2a
 8000972:	f7ff fd73 	bl	800045c <pedestrian_light>
		if (counter1 <= 3)
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <fsm_pedestrian_run+0x138>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b03      	cmp	r3, #3
 800097c:	dc01      	bgt.n	8000982 <fsm_pedestrian_run+0xd2>
			buzzerRun();
 800097e:	f7ff fc07 	bl	8000190 <buzzerRun>
		if (current_state == GREEN2 || current_state == AMBER2)
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <fsm_pedestrian_run+0x134>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b35      	cmp	r3, #53	; 0x35
 8000988:	d003      	beq.n	8000992 <fsm_pedestrian_run+0xe2>
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <fsm_pedestrian_run+0x134>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b36      	cmp	r3, #54	; 0x36
 8000990:	d102      	bne.n	8000998 <fsm_pedestrian_run+0xe8>
			ped_status = PED_RED;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <fsm_pedestrian_run+0x124>)
 8000994:	222b      	movs	r2, #43	; 0x2b
 8000996:	601a      	str	r2, [r3, #0]
		if (getFlagTimer(1) == 1){
 8000998:	2001      	movs	r0, #1
 800099a:	f000 fdbf 	bl	800151c <getFlagTimer>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d102      	bne.n	80009aa <fsm_pedestrian_run+0xfa>
			ped_status = PED_OFF;
 80009a4:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <fsm_pedestrian_run+0x124>)
 80009a6:	2229      	movs	r2, #41	; 0x29
 80009a8:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(3)==1){
 80009aa:	2003      	movs	r0, #3
 80009ac:	f000 f962 	bl	8000c74 <isButtonPressed>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d10a      	bne.n	80009cc <fsm_pedestrian_run+0x11c>
			setTimer(1, duration);
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <fsm_pedestrian_run+0x130>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4619      	mov	r1, r3
 80009bc:	2001      	movs	r0, #1
 80009be:	f000 fdcb 	bl	8001558 <setTimer>
		break;
 80009c2:	e003      	b.n	80009cc <fsm_pedestrian_run+0x11c>
		break;
 80009c4:	bf00      	nop
 80009c6:	e002      	b.n	80009ce <fsm_pedestrian_run+0x11e>
		break;
 80009c8:	bf00      	nop
 80009ca:	e000      	b.n	80009ce <fsm_pedestrian_run+0x11e>
		break;
 80009cc:	bf00      	nop
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000c8 	.word	0x200000c8
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000008 	.word	0x20000008
 80009e0:	200000c0 	.word	0x200000c0
 80009e4:	20000170 	.word	0x20000170
 80009e8:	200000d0 	.word	0x200000d0

080009ec <fsm_turning_run>:
 *      Author: PC
 */

#include "main.h"

void fsm_turning_run(int turn_state) {
 80009ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ee:	b095      	sub	sp, #84	; 0x54
 80009f0:	af10      	add	r7, sp, #64	; 0x40
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3b1f      	subs	r3, #31
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	f200 8125 	bhi.w	8000c48 <fsm_turning_run+0x25c>
 80009fe:	a201      	add	r2, pc, #4	; (adr r2, 8000a04 <fsm_turning_run+0x18>)
 8000a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a04:	08000a15 	.word	0x08000a15
 8000a08:	08000a8d 	.word	0x08000a8d
 8000a0c:	08000b31 	.word	0x08000b31
 8000a10:	08000ba7 	.word	0x08000ba7
	switch(turn_state){

	case AUTO_AMBER:
		

		if (getFlagTimer(3) == 1) {
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 fd81 	bl	800151c <getFlagTimer>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d107      	bne.n	8000a30 <fsm_turning_run+0x44>
			setTimer(3, 500);
 8000a20:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 fd97 	bl	8001558 <setTimer>
            set_blinky(AUTO_AMBER);
 8000a2a:	201f      	movs	r0, #31
 8000a2c:	f7ff fc9a 	bl	8000364 <set_blinky>
		}
		if(isButtonPressed(1)){
 8000a30:	2001      	movs	r0, #1
 8000a32:	f000 f91f 	bl	8000c74 <isButtonPressed>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	f000 8107 	beq.w	8000c4c <fsm_turning_run+0x260>
			turn_state = ADJ_AMBER;
 8000a3e:	2320      	movs	r3, #32
 8000a40:	60fb      	str	r3, [r7, #12]
            AMBER++;
 8000a42:	4b88      	ldr	r3, [pc, #544]	; (8000c64 <fsm_turning_run+0x278>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	4a86      	ldr	r2, [pc, #536]	; (8000c64 <fsm_turning_run+0x278>)
 8000a4a:	6013      	str	r3, [r2, #0]
            RED++;
 8000a4c:	4b86      	ldr	r3, [pc, #536]	; (8000c68 <fsm_turning_run+0x27c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3301      	adds	r3, #1
 8000a52:	4a85      	ldr	r2, [pc, #532]	; (8000c68 <fsm_turning_run+0x27c>)
 8000a54:	6013      	str	r3, [r2, #0]
            displayUART(AMBER, AMBER, huart2);
 8000a56:	4b83      	ldr	r3, [pc, #524]	; (8000c64 <fsm_turning_run+0x278>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	4b81      	ldr	r3, [pc, #516]	; (8000c64 <fsm_turning_run+0x278>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	4e82      	ldr	r6, [pc, #520]	; (8000c6c <fsm_turning_run+0x280>)
 8000a64:	466d      	mov	r5, sp
 8000a66:	f106 0408 	add.w	r4, r6, #8
 8000a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000a7e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	68b8      	ldr	r0, [r7, #8]
 8000a86:	f7ff fb61 	bl	800014c <displayUART>
		}
		break;
 8000a8a:	e0df      	b.n	8000c4c <fsm_turning_run+0x260>

	case ADJ_AMBER:
		if (getFlagTimer(3) == 1) {
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 fd45 	bl	800151c <getFlagTimer>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d107      	bne.n	8000aa8 <fsm_turning_run+0xbc>
			setTimer(3, 500);
 8000a98:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 fd5b 	bl	8001558 <setTimer>
            set_blinky(AUTO_AMBER);
 8000aa2:	201f      	movs	r0, #31
 8000aa4:	f7ff fc5e 	bl	8000364 <set_blinky>
		}
		if(isButtonPressed(1)){
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f000 f8e3 	bl	8000c74 <isButtonPressed>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d033      	beq.n	8000b1c <fsm_turning_run+0x130>
			turn_state = ADJ_AMBER;
 8000ab4:	2320      	movs	r3, #32
 8000ab6:	60fb      	str	r3, [r7, #12]
            AMBER++;
 8000ab8:	4b6a      	ldr	r3, [pc, #424]	; (8000c64 <fsm_turning_run+0x278>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	4a69      	ldr	r2, [pc, #420]	; (8000c64 <fsm_turning_run+0x278>)
 8000ac0:	6013      	str	r3, [r2, #0]
            RED++;
 8000ac2:	4b69      	ldr	r3, [pc, #420]	; (8000c68 <fsm_turning_run+0x27c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	4a67      	ldr	r2, [pc, #412]	; (8000c68 <fsm_turning_run+0x27c>)
 8000aca:	6013      	str	r3, [r2, #0]
            if(AMBER == 100){
 8000acc:	4b65      	ldr	r3, [pc, #404]	; (8000c64 <fsm_turning_run+0x278>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b64      	cmp	r3, #100	; 0x64
 8000ad2:	d109      	bne.n	8000ae8 <fsm_turning_run+0xfc>
                AMBER = 1;
 8000ad4:	4b63      	ldr	r3, [pc, #396]	; (8000c64 <fsm_turning_run+0x278>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]
                RED = AMBER + GREEN;
 8000ada:	4b62      	ldr	r3, [pc, #392]	; (8000c64 <fsm_turning_run+0x278>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	4b64      	ldr	r3, [pc, #400]	; (8000c70 <fsm_turning_run+0x284>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a60      	ldr	r2, [pc, #384]	; (8000c68 <fsm_turning_run+0x27c>)
 8000ae6:	6013      	str	r3, [r2, #0]
            }
            displayUART(AMBER, AMBER, huart2);
 8000ae8:	4b5e      	ldr	r3, [pc, #376]	; (8000c64 <fsm_turning_run+0x278>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	4b5d      	ldr	r3, [pc, #372]	; (8000c64 <fsm_turning_run+0x278>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	607a      	str	r2, [r7, #4]
 8000af4:	4e5d      	ldr	r6, [pc, #372]	; (8000c6c <fsm_turning_run+0x280>)
 8000af6:	466d      	mov	r5, sp
 8000af8:	f106 0408 	add.w	r4, r6, #8
 8000afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b0c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000b10:	e896 000c 	ldmia.w	r6, {r2, r3}
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	68b8      	ldr	r0, [r7, #8]
 8000b18:	f7ff fb18 	bl	800014c <displayUART>
		}
		if(isButtonPressed(2)){
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f000 f8a9 	bl	8000c74 <isButtonPressed>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	f000 8093 	beq.w	8000c50 <fsm_turning_run+0x264>
			turn_state = AUTO_AMBER;
 8000b2a:	231f      	movs	r3, #31
 8000b2c:	60fb      	str	r3, [r7, #12]
		}
        break;
 8000b2e:	e08f      	b.n	8000c50 <fsm_turning_run+0x264>

	case AUTO_GREEN:
		if (getFlagTimer(3) == 1) {
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 fcf3 	bl	800151c <getFlagTimer>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d107      	bne.n	8000b4c <fsm_turning_run+0x160>
			setTimer(3, 500);
 8000b3c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b40:	2003      	movs	r0, #3
 8000b42:	f000 fd09 	bl	8001558 <setTimer>
            set_blinky(AUTO_GREEN);
 8000b46:	2021      	movs	r0, #33	; 0x21
 8000b48:	f7ff fc0c 	bl	8000364 <set_blinky>
		}
		if(isButtonPressed(1)){
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 f891 	bl	8000c74 <isButtonPressed>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d07d      	beq.n	8000c54 <fsm_turning_run+0x268>
			turn_state = ADJ_GREEN;
 8000b58:	2322      	movs	r3, #34	; 0x22
 8000b5a:	60fb      	str	r3, [r7, #12]
            GREEN++;
 8000b5c:	4b44      	ldr	r3, [pc, #272]	; (8000c70 <fsm_turning_run+0x284>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	4a43      	ldr	r2, [pc, #268]	; (8000c70 <fsm_turning_run+0x284>)
 8000b64:	6013      	str	r3, [r2, #0]
            RED++;
 8000b66:	4b40      	ldr	r3, [pc, #256]	; (8000c68 <fsm_turning_run+0x27c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	4a3e      	ldr	r2, [pc, #248]	; (8000c68 <fsm_turning_run+0x27c>)
 8000b6e:	6013      	str	r3, [r2, #0]
            displayUART(GREEN, GREEN, huart2);
 8000b70:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <fsm_turning_run+0x284>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	4b3e      	ldr	r3, [pc, #248]	; (8000c70 <fsm_turning_run+0x284>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	4e3b      	ldr	r6, [pc, #236]	; (8000c6c <fsm_turning_run+0x280>)
 8000b7e:	466d      	mov	r5, sp
 8000b80:	f106 0408 	add.w	r4, r6, #8
 8000b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b94:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000b98:	e896 000c 	ldmia.w	r6, {r2, r3}
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	68b8      	ldr	r0, [r7, #8]
 8000ba0:	f7ff fad4 	bl	800014c <displayUART>
		}
		break;
 8000ba4:	e056      	b.n	8000c54 <fsm_turning_run+0x268>

	case ADJ_GREEN:
		if (getFlagTimer(3) == 1) {
 8000ba6:	2003      	movs	r0, #3
 8000ba8:	f000 fcb8 	bl	800151c <getFlagTimer>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d107      	bne.n	8000bc2 <fsm_turning_run+0x1d6>
			setTimer(3, 500);
 8000bb2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	f000 fcce 	bl	8001558 <setTimer>
            set_blinky(AUTO_AMBER);
 8000bbc:	201f      	movs	r0, #31
 8000bbe:	f7ff fbd1 	bl	8000364 <set_blinky>
		}
		if(isButtonPressed(1)){
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f000 f856 	bl	8000c74 <isButtonPressed>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d033      	beq.n	8000c36 <fsm_turning_run+0x24a>
			turn_state = ADJ_AMBER;
 8000bce:	2320      	movs	r3, #32
 8000bd0:	60fb      	str	r3, [r7, #12]
            AMBER++;
 8000bd2:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <fsm_turning_run+0x278>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4a22      	ldr	r2, [pc, #136]	; (8000c64 <fsm_turning_run+0x278>)
 8000bda:	6013      	str	r3, [r2, #0]
            RED++;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <fsm_turning_run+0x27c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	4a21      	ldr	r2, [pc, #132]	; (8000c68 <fsm_turning_run+0x27c>)
 8000be4:	6013      	str	r3, [r2, #0]
            if(AMBER == 100){
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <fsm_turning_run+0x278>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b64      	cmp	r3, #100	; 0x64
 8000bec:	d109      	bne.n	8000c02 <fsm_turning_run+0x216>
                AMBER = 1;
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <fsm_turning_run+0x278>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	601a      	str	r2, [r3, #0]
                RED = AMBER + GREEN;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <fsm_turning_run+0x278>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <fsm_turning_run+0x284>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a1a      	ldr	r2, [pc, #104]	; (8000c68 <fsm_turning_run+0x27c>)
 8000c00:	6013      	str	r3, [r2, #0]
            }
            displayUART(GREEN, GREEN, huart2);
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <fsm_turning_run+0x284>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <fsm_turning_run+0x284>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	4e17      	ldr	r6, [pc, #92]	; (8000c6c <fsm_turning_run+0x280>)
 8000c10:	466d      	mov	r5, sp
 8000c12:	f106 0408 	add.w	r4, r6, #8
 8000c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c26:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000c2a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	68b8      	ldr	r0, [r7, #8]
 8000c32:	f7ff fa8b 	bl	800014c <displayUART>
		}
		if(isButtonPressed(2)){
 8000c36:	2002      	movs	r0, #2
 8000c38:	f000 f81c 	bl	8000c74 <isButtonPressed>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d00a      	beq.n	8000c58 <fsm_turning_run+0x26c>
			turn_state = AUTO_GREEN;
 8000c42:	2321      	movs	r3, #33	; 0x21
 8000c44:	60fb      	str	r3, [r7, #12]
		}
        break;
 8000c46:	e007      	b.n	8000c58 <fsm_turning_run+0x26c>

	default:
		break;
 8000c48:	bf00      	nop
 8000c4a:	e006      	b.n	8000c5a <fsm_turning_run+0x26e>
		break;
 8000c4c:	bf00      	nop
 8000c4e:	e004      	b.n	8000c5a <fsm_turning_run+0x26e>
        break;
 8000c50:	bf00      	nop
 8000c52:	e002      	b.n	8000c5a <fsm_turning_run+0x26e>
		break;
 8000c54:	bf00      	nop
 8000c56:	e000      	b.n	8000c5a <fsm_turning_run+0x26e>
        break;
 8000c58:	bf00      	nop
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000004 	.word	0x20000004
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000238 	.word	0x20000238
 8000c70:	20000008 	.word	0x20000008

08000c74 <isButtonPressed>:
		TimeOutForKeyPress[i] =  500;
		button_flag[i] = 0;
	}
}

int isButtonPressed(int index){
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	if(index >= NO_OF_BUTTONS){
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	dd01      	ble.n	8000c86 <isButtonPressed+0x12>
		return 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e00d      	b.n	8000ca2 <isButtonPressed+0x2e>
	}
	if(button_flag[index] == 1){
 8000c86:	4a09      	ldr	r2, [pc, #36]	; (8000cac <isButtonPressed+0x38>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d106      	bne.n	8000ca0 <isButtonPressed+0x2c>
		button_flag[index] = 0;
 8000c92:	4a06      	ldr	r2, [pc, #24]	; (8000cac <isButtonPressed+0x38>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2100      	movs	r1, #0
 8000c98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e000      	b.n	8000ca2 <isButtonPressed+0x2e>
	}
	return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	20000128 	.word	0x20000128

08000cb0 <subKeyProcess>:

void subKeyProcess(int index){
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <subKeyProcess+0x1c>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	20000128 	.word	0x20000128

08000cd0 <getKeyInput>:

void getKeyInput(){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	e058      	b.n	8000d8e <getKeyInput+0xbe>
		KeyReg2[i] = KeyReg1[i];
 8000cdc:	4a30      	ldr	r2, [pc, #192]	; (8000da0 <getKeyInput+0xd0>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ce4:	492f      	ldr	r1, [pc, #188]	; (8000da4 <getKeyInput+0xd4>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000cec:	4a2e      	ldr	r2, [pc, #184]	; (8000da8 <getKeyInput+0xd8>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cf4:	492a      	ldr	r1, [pc, #168]	; (8000da0 <getKeyInput+0xd0>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON_PORT[i], BUTTON_PIN[i]);
 8000cfc:	4a2b      	ldr	r2, [pc, #172]	; (8000dac <getKeyInput+0xdc>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d04:	492a      	ldr	r1, [pc, #168]	; (8000db0 <getKeyInput+0xe0>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4610      	mov	r0, r2
 8000d10:	f001 f9d8 	bl	80020c4 <HAL_GPIO_ReadPin>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4619      	mov	r1, r3
 8000d18:	4a23      	ldr	r2, [pc, #140]	; (8000da8 <getKeyInput+0xd8>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000d20:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <getKeyInput+0xd0>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d28:	491f      	ldr	r1, [pc, #124]	; (8000da8 <getKeyInput+0xd8>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d129      	bne.n	8000d88 <getKeyInput+0xb8>
 8000d34:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <getKeyInput+0xd0>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d3c:	4919      	ldr	r1, [pc, #100]	; (8000da4 <getKeyInput+0xd4>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d11f      	bne.n	8000d88 <getKeyInput+0xb8>
		if (KeyReg2[i] != KeyReg3[i]){
 8000d48:	4a16      	ldr	r2, [pc, #88]	; (8000da4 <getKeyInput+0xd4>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d50:	4918      	ldr	r1, [pc, #96]	; (8000db4 <getKeyInput+0xe4>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d015      	beq.n	8000d88 <getKeyInput+0xb8>
		  KeyReg3[i] = KeyReg2[i];
 8000d5c:	4a11      	ldr	r2, [pc, #68]	; (8000da4 <getKeyInput+0xd4>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d64:	4913      	ldr	r1, [pc, #76]	; (8000db4 <getKeyInput+0xe4>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  if (KeyReg3[i] == PRESSED_STATE){
 8000d6c:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <getKeyInput+0xe4>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d107      	bne.n	8000d88 <getKeyInput+0xb8>
			TimeOutForKeyPress[i] = DURATION_FOR_AUTO_INCREASING;
 8000d78:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <getKeyInput+0xe8>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2164      	movs	r1, #100	; 0x64
 8000d7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			subKeyProcess(i);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff ff94 	bl	8000cb0 <subKeyProcess>
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	dda3      	ble.n	8000cdc <getKeyInput+0xc>
		  }
		}
		}
	}

}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000e8 	.word	0x200000e8
 8000da4:	200000f8 	.word	0x200000f8
 8000da8:	200000d8 	.word	0x200000d8
 8000dac:	2000000c 	.word	0x2000000c
 8000db0:	2000001c 	.word	0x2000001c
 8000db4:	20000108 	.word	0x20000108
 8000db8:	20000118 	.word	0x20000118

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc0:	f000 fe8c 	bl	8001adc <HAL_Init>

  /* USER CODE BEGIN Init */
  SCH_Init();
 8000dc4:	f000 f9d8 	bl	8001178 <SCH_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc8:	f000 f82c 	bl	8000e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dcc:	f000 f952 	bl	8001074 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dd0:	f000 f864 	bl	8000e9c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dd4:	f000 f8ae 	bl	8000f34 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000dd8:	f000 f922 	bl	8001020 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // current_state = GREEN2;
  HAL_TIM_Base_Start_IT(&htim2);
 8000ddc:	480c      	ldr	r0, [pc, #48]	; (8000e10 <main+0x54>)
 8000dde:	f001 fe17 	bl	8002a10 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000de2:	2100      	movs	r1, #0
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <main+0x58>)
 8000de6:	f001 febd 	bl	8002b64 <HAL_TIM_PWM_Start>
  SCH_Add_Task(&timerRun, 0, 10);
 8000dea:	220a      	movs	r2, #10
 8000dec:	2100      	movs	r1, #0
 8000dee:	480a      	ldr	r0, [pc, #40]	; (8000e18 <main+0x5c>)
 8000df0:	f000 f9fe 	bl	80011f0 <SCH_Add_Task>
  SCH_Add_Task(&getKeyInput, 10, 10);
 8000df4:	220a      	movs	r2, #10
 8000df6:	210a      	movs	r1, #10
 8000df8:	4808      	ldr	r0, [pc, #32]	; (8000e1c <main+0x60>)
 8000dfa:	f000 f9f9 	bl	80011f0 <SCH_Add_Task>
  SCH_Add_Task(&fsm, 10, 10);
 8000dfe:	220a      	movs	r2, #10
 8000e00:	210a      	movs	r1, #10
 8000e02:	4807      	ldr	r0, [pc, #28]	; (8000e20 <main+0x64>)
 8000e04:	f000 f9f4 	bl	80011f0 <SCH_Add_Task>

  while (1)
  {
    /* USER CODE END WHILE */
//	  fsm();
	  SCH_Dispatch_Tasks();
 8000e08:	f000 fb4c 	bl	80014a4 <SCH_Dispatch_Tasks>
 8000e0c:	e7fc      	b.n	8000e08 <main+0x4c>
 8000e0e:	bf00      	nop
 8000e10:	200001f0 	.word	0x200001f0
 8000e14:	200001a8 	.word	0x200001a8
 8000e18:	080015d1 	.word	0x080015d1
 8000e1c:	08000cd1 	.word	0x08000cd1
 8000e20:	08000709 	.word	0x08000709

08000e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b090      	sub	sp, #64	; 0x40
 8000e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	f107 0318 	add.w	r3, r7, #24
 8000e2e:	2228      	movs	r2, #40	; 0x28
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 ff0c 	bl	8003c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e4e:	2310      	movs	r3, #16
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 f97a 	bl	8002154 <HAL_RCC_OscConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e66:	f000 f982 	bl	800116e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 fbe6 	bl	8002654 <HAL_RCC_ClockConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e8e:	f000 f96e 	bl	800116e <Error_Handler>
  }
}
 8000e92:	bf00      	nop
 8000e94:	3740      	adds	r7, #64	; 0x40
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000eba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ebe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000ec2:	223f      	movs	r2, #63	; 0x3f
 8000ec4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000ece:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ed2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ee0:	4813      	ldr	r0, [pc, #76]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000ee2:	f001 fd45 	bl	8002970 <HAL_TIM_Base_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000eec:	f000 f93f 	bl	800116e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	4619      	mov	r1, r3
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000efe:	f002 f89d 	bl	800303c <HAL_TIM_ConfigClockSource>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f08:	f000 f931 	bl	800116e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000f1a:	f002 fc1f 	bl	800375c <HAL_TIMEx_MasterConfigSynchronization>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f24:	f000 f923 	bl	800116e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200001f0 	.word	0x200001f0

08000f34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08e      	sub	sp, #56	; 0x38
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	f107 0320 	add.w	r3, r7, #32
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f64:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000f66:	4a2d      	ldr	r2, [pc, #180]	; (800101c <MX_TIM3_Init+0xe8>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000f6c:	223f      	movs	r2, #63	; 0x3f
 8000f6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b29      	ldr	r3, [pc, #164]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000f76:	4b28      	ldr	r3, [pc, #160]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000f78:	2209      	movs	r2, #9
 8000f7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b26      	ldr	r3, [pc, #152]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f82:	4b25      	ldr	r3, [pc, #148]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f88:	4823      	ldr	r0, [pc, #140]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000f8a:	f001 fcf1 	bl	8002970 <HAL_TIM_Base_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000f94:	f000 f8eb 	bl	800116e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	481c      	ldr	r0, [pc, #112]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000fa6:	f002 f849 	bl	800303c <HAL_TIM_ConfigClockSource>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000fb0:	f000 f8dd 	bl	800116e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fb4:	4818      	ldr	r0, [pc, #96]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000fb6:	f001 fd7d 	bl	8002ab4 <HAL_TIM_PWM_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000fc0:	f000 f8d5 	bl	800116e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4811      	ldr	r0, [pc, #68]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000fd4:	f002 fbc2 	bl	800375c <HAL_TIMEx_MasterConfigSynchronization>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000fde:	f000 f8c6 	bl	800116e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe2:	2360      	movs	r3, #96	; 0x60
 8000fe4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4807      	ldr	r0, [pc, #28]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000ffa:	f001 ff5d 	bl	8002eb8 <HAL_TIM_PWM_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001004:	f000 f8b3 	bl	800116e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <MX_TIM3_Init+0xe4>)
 800100a:	f000 fb75 	bl	80016f8 <HAL_TIM_MspPostInit>

}
 800100e:	bf00      	nop
 8001010:	3738      	adds	r7, #56	; 0x38
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001a8 	.word	0x200001a8
 800101c:	40000400 	.word	0x40000400

08001020 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <MX_USART2_UART_Init+0x50>)
 8001028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <MX_USART2_UART_Init+0x4c>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_USART2_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <MX_USART2_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001058:	f002 fbf0 	bl	800383c <HAL_UART_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001062:	f000 f884 	bl	800116e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000238 	.word	0x20000238
 8001070:	40004400 	.word	0x40004400

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <MX_GPIO_Init+0xd0>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a2d      	ldr	r2, [pc, #180]	; (8001144 <MX_GPIO_Init+0xd0>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <MX_GPIO_Init+0xd0>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <MX_GPIO_Init+0xd0>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a27      	ldr	r2, [pc, #156]	; (8001144 <MX_GPIO_Init+0xd0>)
 80010a6:	f043 0308 	orr.w	r3, r3, #8
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <MX_GPIO_Init+0xd0>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLIGHT1_Pin|TLIGHT12_Pin|TLIGHT22_Pin|TLIGHT21_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80010be:	4822      	ldr	r0, [pc, #136]	; (8001148 <MX_GPIO_Init+0xd4>)
 80010c0:	f001 f817 	bl	80020f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PLIGHT2_Pin|TLIGHT11_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80010ca:	4820      	ldr	r0, [pc, #128]	; (800114c <MX_GPIO_Init+0xd8>)
 80010cc:	f001 f811 	bl	80020f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BT3_Pin BT0_Pin BT1_Pin */
  GPIO_InitStruct.Pin = BT3_Pin|BT0_Pin|BT1_Pin;
 80010d0:	2313      	movs	r3, #19
 80010d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	4619      	mov	r1, r3
 80010e2:	481a      	ldr	r0, [pc, #104]	; (800114c <MX_GPIO_Init+0xd8>)
 80010e4:	f000 fe6a 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BT2_Pin */
  GPIO_InitStruct.Pin = BT2_Pin;
 80010e8:	2301      	movs	r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BT2_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	4619      	mov	r1, r3
 80010fa:	4813      	ldr	r0, [pc, #76]	; (8001148 <MX_GPIO_Init+0xd4>)
 80010fc:	f000 fe5e 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PLIGHT1_Pin TLIGHT12_Pin TLIGHT22_Pin TLIGHT21_Pin */
  GPIO_InitStruct.Pin = PLIGHT1_Pin|TLIGHT12_Pin|TLIGHT22_Pin|TLIGHT21_Pin;
 8001100:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001104:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2302      	movs	r3, #2
 8001110:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	4619      	mov	r1, r3
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <MX_GPIO_Init+0xd4>)
 800111a:	f000 fe4f 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PLIGHT2_Pin TLIGHT11_Pin */
  GPIO_InitStruct.Pin = PLIGHT2_Pin|TLIGHT11_Pin;
 800111e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001122:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2302      	movs	r3, #2
 800112e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	4619      	mov	r1, r3
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_GPIO_Init+0xd8>)
 8001138:	f000 fe40 	bl	8001dbc <HAL_GPIO_Init>

}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40021000 	.word	0x40021000
 8001148:	40010c00 	.word	0x40010c00
 800114c:	40010800 	.word	0x40010800

08001150 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001160:	d101      	bne.n	8001166 <HAL_TIM_PeriodElapsedCallback+0x16>

		SCH_Update();
 8001162:	f000 f9c3 	bl	80014ec <SCH_Update>
	}else if(htim->Instance == TIM3){

	}
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001172:	b672      	cpsid	i
}
 8001174:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001176:	e7fe      	b.n	8001176 <Error_Handler+0x8>

08001178 <SCH_Init>:
#include "scheduler.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];
uint32_t size = 0;

void SCH_Init(void) {
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
	for(uint32_t index = 0; index < SCH_MAX_TASKS; index++) {
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	e029      	b.n	80011d8 <SCH_Init+0x60>
		SCH_tasks_G[index].pTask = 0x0000;
 8001184:	4919      	ldr	r1, [pc, #100]	; (80011ec <SCH_Init+0x74>)
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Delay = 0;
 8001196:	4915      	ldr	r1, [pc, #84]	; (80011ec <SCH_Init+0x74>)
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	3304      	adds	r3, #4
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Period = 0;
 80011aa:	4910      	ldr	r1, [pc, #64]	; (80011ec <SCH_Init+0x74>)
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	3308      	adds	r3, #8
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].RunMe = 0;
 80011be:	490b      	ldr	r1, [pc, #44]	; (80011ec <SCH_Init+0x74>)
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	440b      	add	r3, r1
 80011cc:	330c      	adds	r3, #12
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	for(uint32_t index = 0; index < SCH_MAX_TASKS; index++) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3301      	adds	r3, #1
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b27      	cmp	r3, #39	; 0x27
 80011dc:	d9d2      	bls.n	8001184 <SCH_Init+0xc>
	}
}
 80011de:	bf00      	nop
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000280 	.word	0x20000280

080011f0 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (* pFunction)(void), uint32_t DELAY, uint32_t PERIOD) {
 80011f0:	b4b0      	push	{r4, r5, r7}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
	if(size == SCH_MAX_TASKS - 1) return SCH_MAX_TASKS;
 80011fc:	4b6e      	ldr	r3, [pc, #440]	; (80013b8 <SCH_Add_Task+0x1c8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b27      	cmp	r3, #39	; 0x27
 8001202:	d101      	bne.n	8001208 <SCH_Add_Task+0x18>
 8001204:	2328      	movs	r3, #40	; 0x28
 8001206:	e0d2      	b.n	80013ae <SCH_Add_Task+0x1be>

	uint8_t flag = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	77fb      	strb	r3, [r7, #31]
	uint32_t index = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
	if(TIMER_CYCLE > 0) {
		DELAY /= TIMER_CYCLE;
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4a6a      	ldr	r2, [pc, #424]	; (80013bc <SCH_Add_Task+0x1cc>)
 8001214:	fba2 2303 	umull	r2, r3, r2, r3
 8001218:	08db      	lsrs	r3, r3, #3
 800121a:	60bb      	str	r3, [r7, #8]
	}

	for(index = 0; index < size && flag == 0; index++) {
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	e046      	b.n	80012b0 <SCH_Add_Task+0xc0>
		if(DELAY > SCH_tasks_G[index].Delay) {
 8001222:	4967      	ldr	r1, [pc, #412]	; (80013c0 <SCH_Add_Task+0x1d0>)
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	3304      	adds	r3, #4
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	429a      	cmp	r2, r3
 8001238:	d90c      	bls.n	8001254 <SCH_Add_Task+0x64>
			DELAY -= SCH_tasks_G[index].Delay;
 800123a:	4961      	ldr	r1, [pc, #388]	; (80013c0 <SCH_Add_Task+0x1d0>)
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3304      	adds	r3, #4
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	e02a      	b.n	80012aa <SCH_Add_Task+0xba>
		}
		else {
			flag = 1;
 8001254:	2301      	movs	r3, #1
 8001256:	77fb      	strb	r3, [r7, #31]
			SCH_tasks_G[index].Delay -= DELAY;
 8001258:	4959      	ldr	r1, [pc, #356]	; (80013c0 <SCH_Add_Task+0x1d0>)
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	3304      	adds	r3, #4
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad1      	subs	r1, r2, r3
 800126e:	4854      	ldr	r0, [pc, #336]	; (80013c0 <SCH_Add_Task+0x1d0>)
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4403      	add	r3, r0
 800127c:	3304      	adds	r3, #4
 800127e:	6019      	str	r1, [r3, #0]
			if(SCH_tasks_G[index].Delay == 0) {
 8001280:	494f      	ldr	r1, [pc, #316]	; (80013c0 <SCH_Add_Task+0x1d0>)
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	3304      	adds	r3, #4
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <SCH_Add_Task+0xba>
				SCH_tasks_G[index].RunMe = 1;
 8001296:	494a      	ldr	r1, [pc, #296]	; (80013c0 <SCH_Add_Task+0x1d0>)
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	330c      	adds	r3, #12
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
	for(index = 0; index < size && flag == 0; index++) {
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	3301      	adds	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
 80012b0:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <SCH_Add_Task+0x1c8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d202      	bcs.n	80012c0 <SCH_Add_Task+0xd0>
 80012ba:	7ffb      	ldrb	r3, [r7, #31]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0b0      	beq.n	8001222 <SCH_Add_Task+0x32>
			}
		}
	}

	if(flag == 1) {
 80012c0:	7ffb      	ldrb	r3, [r7, #31]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d135      	bne.n	8001332 <SCH_Add_Task+0x142>
		index -= 1;
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	61bb      	str	r3, [r7, #24]
		for(uint32_t temp = size; temp > index; temp--) {
 80012cc:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <SCH_Add_Task+0x1c8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	e02a      	b.n	800132a <SCH_Add_Task+0x13a>
			SCH_tasks_G[temp] = SCH_tasks_G[temp - 1];
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	1e5a      	subs	r2, r3, #1
 80012d8:	4839      	ldr	r0, [pc, #228]	; (80013c0 <SCH_Add_Task+0x1d0>)
 80012da:	6979      	ldr	r1, [r7, #20]
 80012dc:	460b      	mov	r3, r1
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4418      	add	r0, r3
 80012e6:	4936      	ldr	r1, [pc, #216]	; (80013c0 <SCH_Add_Task+0x1d0>)
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	4604      	mov	r4, r0
 80012f4:	461d      	mov	r5, r3
 80012f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fa:	682b      	ldr	r3, [r5, #0]
 80012fc:	6023      	str	r3, [r4, #0]
			SCH_tasks_G[temp].TaskID += 1;
 80012fe:	4930      	ldr	r1, [pc, #192]	; (80013c0 <SCH_Add_Task+0x1d0>)
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	3310      	adds	r3, #16
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	1c59      	adds	r1, r3, #1
 8001312:	482b      	ldr	r0, [pc, #172]	; (80013c0 <SCH_Add_Task+0x1d0>)
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4403      	add	r3, r0
 8001320:	3310      	adds	r3, #16
 8001322:	6019      	str	r1, [r3, #0]
		for(uint32_t temp = size; temp > index; temp--) {
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3b01      	subs	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	429a      	cmp	r2, r3
 8001330:	d8d0      	bhi.n	80012d4 <SCH_Add_Task+0xe4>
		}
	}
	SCH_tasks_G[index].pTask = pFunction;
 8001332:	4923      	ldr	r1, [pc, #140]	; (80013c0 <SCH_Add_Task+0x1d0>)
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Delay = DELAY;
 8001344:	491e      	ldr	r1, [pc, #120]	; (80013c0 <SCH_Add_Task+0x1d0>)
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	3304      	adds	r3, #4
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Period = PERIOD;
 8001358:	4919      	ldr	r1, [pc, #100]	; (80013c0 <SCH_Add_Task+0x1d0>)
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	3308      	adds	r3, #8
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].RunMe = (DELAY == 0) ? 1 : 0;
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	bf0c      	ite	eq
 8001372:	2301      	moveq	r3, #1
 8001374:	2300      	movne	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4618      	mov	r0, r3
 800137a:	4911      	ldr	r1, [pc, #68]	; (80013c0 <SCH_Add_Task+0x1d0>)
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	330c      	adds	r3, #12
 800138a:	4602      	mov	r2, r0
 800138c:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[index].TaskID = index;
 800138e:	490c      	ldr	r1, [pc, #48]	; (80013c0 <SCH_Add_Task+0x1d0>)
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	3310      	adds	r3, #16
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	601a      	str	r2, [r3, #0]

	size += 1;
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <SCH_Add_Task+0x1c8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	4a03      	ldr	r2, [pc, #12]	; (80013b8 <SCH_Add_Task+0x1c8>)
 80013aa:	6013      	str	r3, [r2, #0]

	return index;
 80013ac:	69bb      	ldr	r3, [r7, #24]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bcb0      	pop	{r4, r5, r7}
 80013b6:	4770      	bx	lr
 80013b8:	20000138 	.word	0x20000138
 80013bc:	cccccccd 	.word	0xcccccccd
 80013c0:	20000280 	.word	0x20000280

080013c4 <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t taskID) {
 80013c4:	b4b0      	push	{r4, r5, r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	if(SCH_tasks_G[taskID].pTask == 0) return;
 80013cc:	4933      	ldr	r1, [pc, #204]	; (800149c <SCH_Delete_Task+0xd8>)
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d057      	beq.n	8001490 <SCH_Delete_Task+0xcc>

	SCH_tasks_G[taskID + 1].Delay += SCH_tasks_G[taskID].Delay;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	492d      	ldr	r1, [pc, #180]	; (800149c <SCH_Delete_Task+0xd8>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	3304      	adds	r3, #4
 80013f2:	6819      	ldr	r1, [r3, #0]
 80013f4:	4829      	ldr	r0, [pc, #164]	; (800149c <SCH_Delete_Task+0xd8>)
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4403      	add	r3, r0
 8001402:	3304      	adds	r3, #4
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	3201      	adds	r2, #1
 800140a:	4419      	add	r1, r3
 800140c:	4823      	ldr	r0, [pc, #140]	; (800149c <SCH_Delete_Task+0xd8>)
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4403      	add	r3, r0
 8001418:	3304      	adds	r3, #4
 800141a:	6019      	str	r1, [r3, #0]

	for(uint32_t temp = taskID; temp < size - 1; temp++) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	e02a      	b.n	8001478 <SCH_Delete_Task+0xb4>
		SCH_tasks_G[temp] = SCH_tasks_G[temp + 1];
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	481d      	ldr	r0, [pc, #116]	; (800149c <SCH_Delete_Task+0xd8>)
 8001428:	68f9      	ldr	r1, [r7, #12]
 800142a:	460b      	mov	r3, r1
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4418      	add	r0, r3
 8001434:	4919      	ldr	r1, [pc, #100]	; (800149c <SCH_Delete_Task+0xd8>)
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	4604      	mov	r4, r0
 8001442:	461d      	mov	r5, r3
 8001444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001448:	682b      	ldr	r3, [r5, #0]
 800144a:	6023      	str	r3, [r4, #0]
		SCH_tasks_G[temp].TaskID -= 1;
 800144c:	4913      	ldr	r1, [pc, #76]	; (800149c <SCH_Delete_Task+0xd8>)
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	3310      	adds	r3, #16
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	1e59      	subs	r1, r3, #1
 8001460:	480e      	ldr	r0, [pc, #56]	; (800149c <SCH_Delete_Task+0xd8>)
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4403      	add	r3, r0
 800146e:	3310      	adds	r3, #16
 8001470:	6019      	str	r1, [r3, #0]
	for(uint32_t temp = taskID; temp < size - 1; temp++) {
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3301      	adds	r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <SCH_Delete_Task+0xdc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3b01      	subs	r3, #1
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	429a      	cmp	r2, r3
 8001482:	d3ce      	bcc.n	8001422 <SCH_Delete_Task+0x5e>
	}

	size -= 1;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <SCH_Delete_Task+0xdc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3b01      	subs	r3, #1
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <SCH_Delete_Task+0xdc>)
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e000      	b.n	8001492 <SCH_Delete_Task+0xce>
	if(SCH_tasks_G[taskID].pTask == 0) return;
 8001490:	bf00      	nop
}
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bcb0      	pop	{r4, r5, r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000280 	.word	0x20000280
 80014a0:	20000138 	.word	0x20000138

080014a4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 80014a4:	b5b0      	push	{r4, r5, r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe == 1) {
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <SCH_Dispatch_Tasks+0x44>)
 80014ac:	7b1b      	ldrb	r3, [r3, #12]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d115      	bne.n	80014de <SCH_Dispatch_Tasks+0x3a>
		(*SCH_tasks_G[0].pTask)();
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <SCH_Dispatch_Tasks+0x44>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4798      	blx	r3

		sTask temp = SCH_tasks_G[0];
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <SCH_Dispatch_Tasks+0x44>)
 80014ba:	1d3c      	adds	r4, r7, #4
 80014bc:	461d      	mov	r5, r3
 80014be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014c2:	682b      	ldr	r3, [r5, #0]
 80014c4:	6023      	str	r3, [r4, #0]

		SCH_Delete_Task(0);
 80014c6:	2000      	movs	r0, #0
 80014c8:	f7ff ff7c 	bl	80013c4 <SCH_Delete_Task>

		if(temp.Period > 0) {
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d005      	beq.n	80014de <SCH_Dispatch_Tasks+0x3a>
			SCH_Add_Task(temp.pTask, temp.Period, temp.Period);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68f9      	ldr	r1, [r7, #12]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fe89 	bl	80011f0 <SCH_Add_Task>
		}
	}
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bdb0      	pop	{r4, r5, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000280 	.word	0x20000280

080014ec <SCH_Update>:

void SCH_Update(void) {
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].Delay > 0) SCH_tasks_G[0].Delay--;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <SCH_Update+0x2c>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d004      	beq.n	8001502 <SCH_Update+0x16>
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <SCH_Update+0x2c>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	4a06      	ldr	r2, [pc, #24]	; (8001518 <SCH_Update+0x2c>)
 8001500:	6053      	str	r3, [r2, #4]

	if(SCH_tasks_G[0].Delay == 0) {
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SCH_Update+0x2c>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <SCH_Update+0x24>
		SCH_tasks_G[0].RunMe = 1;
 800150a:	4b03      	ldr	r3, [pc, #12]	; (8001518 <SCH_Update+0x2c>)
 800150c:	2201      	movs	r2, #1
 800150e:	731a      	strb	r2, [r3, #12]
	}
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	20000280 	.word	0x20000280

0800151c <getFlagTimer>:
//int timer_counter[NUM_OF_TIMERS] = {0};
int timer_flag[NUM_OF_TIMERS] = {0};

static struct Node* timer_counter = NULL;

int getFlagTimer(int index){
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	if(index >= NUM_OF_TIMERS) return 0;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b08      	cmp	r3, #8
 8001528:	dd01      	ble.n	800152e <getFlagTimer+0x12>
 800152a:	2300      	movs	r3, #0
 800152c:	e00d      	b.n	800154a <getFlagTimer+0x2e>
	if(timer_flag[index] == 1){
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <getFlagTimer+0x38>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d106      	bne.n	8001548 <getFlagTimer+0x2c>
		timer_flag[index] = 0;
 800153a:	4a06      	ldr	r2, [pc, #24]	; (8001554 <getFlagTimer+0x38>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2100      	movs	r1, #0
 8001540:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <getFlagTimer+0x2e>
	}
	return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	2000013c 	.word	0x2000013c

08001558 <setTimer>:


void setTimer(int index, int duration) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
	deleteTaskID(&timer_counter, index);
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	480a      	ldr	r0, [pc, #40]	; (8001590 <setTimer+0x38>)
 8001566:	f000 fa4f 	bl	8001a08 <deleteTaskID>
	addTask(&timer_counter, index, duration/TIME_CYCLE);
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <setTimer+0x3c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	fb92 f3f3 	sdiv	r3, r2, r3
 8001574:	461a      	mov	r2, r3
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <setTimer+0x38>)
 800157a:	f000 f9c9 	bl	8001910 <addTask>
	timer_flag[index] = 0;
 800157e:	4a06      	ldr	r2, [pc, #24]	; (8001598 <setTimer+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2100      	movs	r1, #0
 8001584:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000160 	.word	0x20000160
 8001594:	20000024 	.word	0x20000024
 8001598:	2000013c 	.word	0x2000013c

0800159c <clearAllTimer>:
void clearTimer(int index) {
	deleteTaskID(&timer_counter, index);
	timer_flag[index] = 0;
}

void clearAllTimer() {
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
	void clearList(struct Node** head);
	for(int i = 0; i < NUM_OF_TIMERS; i++){
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	e007      	b.n	80015b8 <clearAllTimer+0x1c>
		timer_flag[i] = 0;
 80015a8:	4a08      	ldr	r2, [pc, #32]	; (80015cc <clearAllTimer+0x30>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2100      	movs	r1, #0
 80015ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_OF_TIMERS; i++){
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3301      	adds	r3, #1
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	ddf4      	ble.n	80015a8 <clearAllTimer+0xc>
	}
}
 80015be:	bf00      	nop
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	2000013c 	.word	0x2000013c

080015d0 <timerRun>:

void timerRun(){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	if(timer_counter == NULL) return;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <timerRun+0x3c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d015      	beq.n	8001608 <timerRun+0x38>
	if(timer_counter->data > 0){
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <timerRun+0x3c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	dd05      	ble.n	80015f2 <timerRun+0x22>
		timer_counter->data--;
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <timerRun+0x3c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	3a01      	subs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	e00b      	b.n	800160a <timerRun+0x3a>
	}else{
		timer_flag[timer_counter->taskID] = 1;
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <timerRun+0x3c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4a05      	ldr	r2, [pc, #20]	; (8001610 <timerRun+0x40>)
 80015fa:	2101      	movs	r1, #1
 80015fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		deleteTask(&timer_counter);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <timerRun+0x3c>)
 8001602:	f000 f9de 	bl	80019c2 <deleteTask>
 8001606:	e000      	b.n	800160a <timerRun+0x3a>
	if(timer_counter == NULL) return;
 8001608:	bf00      	nop
	}
}
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000160 	.word	0x20000160
 8001610:	2000013c 	.word	0x2000013c

08001614 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_MspInit+0x5c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	4a14      	ldr	r2, [pc, #80]	; (8001670 <HAL_MspInit+0x5c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6193      	str	r3, [r2, #24]
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_MspInit+0x5c>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_MspInit+0x5c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_MspInit+0x5c>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	61d3      	str	r3, [r2, #28]
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_MspInit+0x5c>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_MspInit+0x60>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_MspInit+0x60>)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40021000 	.word	0x40021000
 8001674:	40010000 	.word	0x40010000

08001678 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001688:	d114      	bne.n	80016b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_TIM_Base_MspInit+0x78>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	4a18      	ldr	r2, [pc, #96]	; (80016f0 <HAL_TIM_Base_MspInit+0x78>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	61d3      	str	r3, [r2, #28]
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_TIM_Base_MspInit+0x78>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	201c      	movs	r0, #28
 80016a8:	f000 fb51 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016ac:	201c      	movs	r0, #28
 80016ae:	f000 fb6a 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016b2:	e018      	b.n	80016e6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <HAL_TIM_Base_MspInit+0x7c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d113      	bne.n	80016e6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_TIM_Base_MspInit+0x78>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <HAL_TIM_Base_MspInit+0x78>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	61d3      	str	r3, [r2, #28]
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_TIM_Base_MspInit+0x78>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	201d      	movs	r0, #29
 80016dc:	f000 fb37 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016e0:	201d      	movs	r0, #29
 80016e2:	f000 fb50 	bl	8001d86 <HAL_NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40000400 	.word	0x40000400

080016f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <HAL_TIM_MspPostInit+0x58>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d117      	bne.n	8001748 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <HAL_TIM_MspPostInit+0x5c>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <HAL_TIM_MspPostInit+0x5c>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_TIM_MspPostInit+0x5c>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZ_Pin;
 8001730:	2340      	movs	r3, #64	; 0x40
 8001732:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2302      	movs	r3, #2
 800173a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	4619      	mov	r1, r3
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <HAL_TIM_MspPostInit+0x60>)
 8001744:	f000 fb3a 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001748:	bf00      	nop
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40000400 	.word	0x40000400
 8001754:	40021000 	.word	0x40021000
 8001758:	40010800 	.word	0x40010800

0800175c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <HAL_UART_MspInit+0x88>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d12f      	bne.n	80017dc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_UART_MspInit+0x8c>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <HAL_UART_MspInit+0x8c>)
 8001782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001786:	61d3      	str	r3, [r2, #28]
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_UART_MspInit+0x8c>)
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <HAL_UART_MspInit+0x8c>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4a13      	ldr	r2, [pc, #76]	; (80017e8 <HAL_UART_MspInit+0x8c>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	6193      	str	r3, [r2, #24]
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_UART_MspInit+0x8c>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017ac:	2304      	movs	r3, #4
 80017ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4619      	mov	r1, r3
 80017be:	480b      	ldr	r0, [pc, #44]	; (80017ec <HAL_UART_MspInit+0x90>)
 80017c0:	f000 fafc 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017c4:	2308      	movs	r3, #8
 80017c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	4619      	mov	r1, r3
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_UART_MspInit+0x90>)
 80017d8:	f000 faf0 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40004400 	.word	0x40004400
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010800 	.word	0x40010800

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001836:	f000 f997 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <TIM2_IRQHandler+0x10>)
 8001846:	f001 fa2f 	bl	8002ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200001f0 	.word	0x200001f0

08001854 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <TIM3_IRQHandler+0x10>)
 800185a:	f001 fa25 	bl	8002ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200001a8 	.word	0x200001a8

08001868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <_sbrk+0x5c>)
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <_sbrk+0x60>)
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <_sbrk+0x64>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <_sbrk+0x68>)
 8001888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	429a      	cmp	r2, r3
 8001896:	d207      	bcs.n	80018a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001898:	f002 f9a0 	bl	8003bdc <__errno>
 800189c:	4603      	mov	r3, r0
 800189e:	220c      	movs	r2, #12
 80018a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
 80018a6:	e009      	b.n	80018bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <_sbrk+0x64>)
 80018b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ba:	68fb      	ldr	r3, [r7, #12]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20005000 	.word	0x20005000
 80018c8:	00000400 	.word	0x00000400
 80018cc:	20000164 	.word	0x20000164
 80018d0:	200005b8 	.word	0x200005b8

080018d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <createNode>:
 *  Created on: Nov 24, 2023
 *      Author: Admin
 */
#include <timer_llist.h>

struct Node* createNode(int taskID, int data){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 80018ea:	200c      	movs	r0, #12
 80018ec:	f002 f9a0 	bl	8003c30 <malloc>
 80018f0:	4603      	mov	r3, r0
 80018f2:	60fb      	str	r3, [r7, #12]
	if(!newNode){
		//TODO
	}
	newNode->taskID = taskID;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	605a      	str	r2, [r3, #4]
	newNode->data = data;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	601a      	str	r2, [r3, #0]
	newNode->nextNode = NULL;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
	return newNode;
 8001906:	68fb      	ldr	r3, [r7, #12]
};
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <addTask>:

void addTask(struct Node** head, int taskID, int data){
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
	struct Node* newNode = createNode(taskID, data);
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	68b8      	ldr	r0, [r7, #8]
 8001920:	f7ff ffde 	bl	80018e0 <createNode>
 8001924:	6138      	str	r0, [r7, #16]
	// add the first node
	if(*head == NULL){
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d103      	bne.n	8001936 <addTask+0x26>
		*head = newNode;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	601a      	str	r2, [r3, #0]
		return;
 8001934:	e042      	b.n	80019bc <addTask+0xac>
	}

	//add the node at the first position
	struct Node* temp = *head;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	617b      	str	r3, [r7, #20]
	if( newNode->data < temp->data){
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	da0d      	bge.n	8001964 <addTask+0x54>
		temp->data -= newNode->data;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	1ad2      	subs	r2, r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	601a      	str	r2, [r3, #0]
		newNode->nextNode = temp;
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	609a      	str	r2, [r3, #8]
		*head = newNode;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	601a      	str	r2, [r3, #0]
		return;
 8001962:	e02b      	b.n	80019bc <addTask+0xac>
	}

	//add the node at other position
	newNode->data -= temp->data;
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	1ad2      	subs	r2, r2, r3
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	601a      	str	r2, [r3, #0]

	while(temp->nextNode != NULL && newNode->data >= temp->nextNode->data){
 8001972:	e009      	b.n	8001988 <addTask+0x78>
		temp = temp->nextNode;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	617b      	str	r3, [r7, #20]
		newNode->data -= temp->data;
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	1ad2      	subs	r2, r2, r3
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	601a      	str	r2, [r3, #0]
	while(temp->nextNode != NULL && newNode->data >= temp->nextNode->data){
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <addTask+0x8e>
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	daea      	bge.n	8001974 <addTask+0x64>
	}
	if(temp->nextNode == NULL){
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d103      	bne.n	80019ae <addTask+0x9e>
		temp->nextNode = newNode;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	e006      	b.n	80019bc <addTask+0xac>
	}else{
		newNode->nextNode = temp->nextNode;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	609a      	str	r2, [r3, #8]
		temp->nextNode = newNode;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	609a      	str	r2, [r3, #8]
	}
};
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <deleteTask>:
// only deleteTask at the first position
void deleteTask(struct Node** head){
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b084      	sub	sp, #16
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
	if(head == NULL) return;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d017      	beq.n	8001a00 <deleteTask+0x3e>
	struct Node* temp = *head;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
	*head = temp->nextNode;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	601a      	str	r2, [r3, #0]
	if((*head) != NULL) (*head)->data += temp->data;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d008      	beq.n	80019f8 <deleteTask+0x36>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6819      	ldr	r1, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	440a      	add	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]
	free(temp);
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f002 f921 	bl	8003c40 <free>
 80019fe:	e000      	b.n	8001a02 <deleteTask+0x40>
	if(head == NULL) return;
 8001a00:	bf00      	nop
};
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <deleteTaskID>:
	clearList(&temp->nextNode);
	free(temp);
	*head = NULL;
}

void deleteTaskID(struct Node** head, int taskID){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
	struct Node* temp = *head;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	60fb      	str	r3, [r7, #12]
	if(temp == NULL) return;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d031      	beq.n	8001a82 <deleteTaskID+0x7a>

	//if the delete node is also the first node
	if(temp->taskID == taskID){
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d106      	bne.n	8001a36 <deleteTaskID+0x2e>
		deleteTask(head);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ffca 	bl	80019c2 <deleteTask>
		return;
 8001a2e:	e02b      	b.n	8001a88 <deleteTaskID+0x80>
	}

	//if the delete node is not the first node
	while(temp->nextNode != NULL && temp->nextNode->taskID != taskID){
		temp = temp->nextNode;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	60fb      	str	r3, [r7, #12]
	while(temp->nextNode != NULL && temp->nextNode->taskID != taskID){
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <deleteTaskID+0x42>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d1f2      	bne.n	8001a30 <deleteTaskID+0x28>
	}
	if(temp->nextNode == NULL) return;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d019      	beq.n	8001a86 <deleteTaskID+0x7e>
	struct Node* deleteNode = temp->nextNode;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	60bb      	str	r3, [r7, #8]
	temp->nextNode = deleteNode->nextNode;
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	609a      	str	r2, [r3, #8]
	if(temp->nextNode != NULL) temp->nextNode->data += deleteNode->data;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <deleteTaskID+0x72>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	6819      	ldr	r1, [r3, #0]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	440a      	add	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]
	free(deleteNode);
 8001a7a:	68b8      	ldr	r0, [r7, #8]
 8001a7c:	f002 f8e0 	bl	8003c40 <free>
 8001a80:	e002      	b.n	8001a88 <deleteTaskID+0x80>
	if(temp == NULL) return;
 8001a82:	bf00      	nop
 8001a84:	e000      	b.n	8001a88 <deleteTaskID+0x80>
	if(temp->nextNode == NULL) return;
 8001a86:	bf00      	nop
}
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a90:	f7ff ff20 	bl	80018d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a94:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a96:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a98:	4a0c      	ldr	r2, [pc, #48]	; (8001acc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001aac:	4c09      	ldr	r4, [pc, #36]	; (8001ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aba:	f002 f895 	bl	8003be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001abe:	f7ff f97d 	bl	8000dbc <main>
  bx lr
 8001ac2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001acc:	08004584 	.word	0x08004584
  ldr r2, =_sbss
 8001ad0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001ad4:	200005b4 	.word	0x200005b4

08001ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC1_2_IRQHandler>
	...

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_Init+0x28>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_Init+0x28>)
 8001ae6:	f043 0310 	orr.w	r3, r3, #16
 8001aea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f000 f923 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af2:	200f      	movs	r0, #15
 8001af4:	f000 f808 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af8:	f7ff fd8c 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40022000 	.word	0x40022000

08001b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_InitTick+0x54>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f93b 	bl	8001da2 <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00e      	b.n	8001b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d80a      	bhi.n	8001b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 f903 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b48:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <HAL_InitTick+0x5c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000028 	.word	0x20000028
 8001b60:	20000030 	.word	0x20000030
 8001b64:	2000002c 	.word	0x2000002c

08001b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_IncTick+0x1c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_IncTick+0x20>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a03      	ldr	r2, [pc, #12]	; (8001b88 <HAL_IncTick+0x20>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	20000030 	.word	0x20000030
 8001b88:	200005a0 	.word	0x200005a0

08001b8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b02      	ldr	r3, [pc, #8]	; (8001b9c <HAL_GetTick+0x10>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	200005a0 	.word	0x200005a0

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0b      	blt.n	8001c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4906      	ldr	r1, [pc, #24]	; (8001c38 <__NVIC_EnableIRQ+0x34>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff90 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff2d 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff42 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff90 	bl	8001c90 <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff5f 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff35 	bl	8001c04 <__NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffa2 	bl	8001cf4 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b08b      	sub	sp, #44	; 0x2c
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dce:	e169      	b.n	80020a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	f040 8158 	bne.w	800209e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4a9a      	ldr	r2, [pc, #616]	; (800205c <HAL_GPIO_Init+0x2a0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d05e      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001df8:	4a98      	ldr	r2, [pc, #608]	; (800205c <HAL_GPIO_Init+0x2a0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d875      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001dfe:	4a98      	ldr	r2, [pc, #608]	; (8002060 <HAL_GPIO_Init+0x2a4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d058      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e04:	4a96      	ldr	r2, [pc, #600]	; (8002060 <HAL_GPIO_Init+0x2a4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d86f      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e0a:	4a96      	ldr	r2, [pc, #600]	; (8002064 <HAL_GPIO_Init+0x2a8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d052      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e10:	4a94      	ldr	r2, [pc, #592]	; (8002064 <HAL_GPIO_Init+0x2a8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d869      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e16:	4a94      	ldr	r2, [pc, #592]	; (8002068 <HAL_GPIO_Init+0x2ac>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d04c      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e1c:	4a92      	ldr	r2, [pc, #584]	; (8002068 <HAL_GPIO_Init+0x2ac>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d863      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e22:	4a92      	ldr	r2, [pc, #584]	; (800206c <HAL_GPIO_Init+0x2b0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d046      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e28:	4a90      	ldr	r2, [pc, #576]	; (800206c <HAL_GPIO_Init+0x2b0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d85d      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e2e:	2b12      	cmp	r3, #18
 8001e30:	d82a      	bhi.n	8001e88 <HAL_GPIO_Init+0xcc>
 8001e32:	2b12      	cmp	r3, #18
 8001e34:	d859      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e36:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <HAL_GPIO_Init+0x80>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001eb7 	.word	0x08001eb7
 8001e40:	08001e91 	.word	0x08001e91
 8001e44:	08001ea3 	.word	0x08001ea3
 8001e48:	08001ee5 	.word	0x08001ee5
 8001e4c:	08001eeb 	.word	0x08001eeb
 8001e50:	08001eeb 	.word	0x08001eeb
 8001e54:	08001eeb 	.word	0x08001eeb
 8001e58:	08001eeb 	.word	0x08001eeb
 8001e5c:	08001eeb 	.word	0x08001eeb
 8001e60:	08001eeb 	.word	0x08001eeb
 8001e64:	08001eeb 	.word	0x08001eeb
 8001e68:	08001eeb 	.word	0x08001eeb
 8001e6c:	08001eeb 	.word	0x08001eeb
 8001e70:	08001eeb 	.word	0x08001eeb
 8001e74:	08001eeb 	.word	0x08001eeb
 8001e78:	08001eeb 	.word	0x08001eeb
 8001e7c:	08001eeb 	.word	0x08001eeb
 8001e80:	08001e99 	.word	0x08001e99
 8001e84:	08001ead 	.word	0x08001ead
 8001e88:	4a79      	ldr	r2, [pc, #484]	; (8002070 <HAL_GPIO_Init+0x2b4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d013      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e8e:	e02c      	b.n	8001eea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	623b      	str	r3, [r7, #32]
          break;
 8001e96:	e029      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	623b      	str	r3, [r7, #32]
          break;
 8001ea0:	e024      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	623b      	str	r3, [r7, #32]
          break;
 8001eaa:	e01f      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	330c      	adds	r3, #12
 8001eb2:	623b      	str	r3, [r7, #32]
          break;
 8001eb4:	e01a      	b.n	8001eec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	623b      	str	r3, [r7, #32]
          break;
 8001ec2:	e013      	b.n	8001eec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d105      	bne.n	8001ed8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	611a      	str	r2, [r3, #16]
          break;
 8001ed6:	e009      	b.n	8001eec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	615a      	str	r2, [r3, #20]
          break;
 8001ee2:	e003      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e000      	b.n	8001eec <HAL_GPIO_Init+0x130>
          break;
 8001eea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2bff      	cmp	r3, #255	; 0xff
 8001ef0:	d801      	bhi.n	8001ef6 <HAL_GPIO_Init+0x13a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	e001      	b.n	8001efa <HAL_GPIO_Init+0x13e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2bff      	cmp	r3, #255	; 0xff
 8001f00:	d802      	bhi.n	8001f08 <HAL_GPIO_Init+0x14c>
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	e002      	b.n	8001f0e <HAL_GPIO_Init+0x152>
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	3b08      	subs	r3, #8
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	210f      	movs	r1, #15
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	401a      	ands	r2, r3
 8001f20:	6a39      	ldr	r1, [r7, #32]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 80b1 	beq.w	800209e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f3c:	4b4d      	ldr	r3, [pc, #308]	; (8002074 <HAL_GPIO_Init+0x2b8>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a4c      	ldr	r2, [pc, #304]	; (8002074 <HAL_GPIO_Init+0x2b8>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_GPIO_Init+0x2b8>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f54:	4a48      	ldr	r2, [pc, #288]	; (8002078 <HAL_GPIO_Init+0x2bc>)
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a40      	ldr	r2, [pc, #256]	; (800207c <HAL_GPIO_Init+0x2c0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <HAL_GPIO_Init+0x1ec>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a3f      	ldr	r2, [pc, #252]	; (8002080 <HAL_GPIO_Init+0x2c4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00d      	beq.n	8001fa4 <HAL_GPIO_Init+0x1e8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a3e      	ldr	r2, [pc, #248]	; (8002084 <HAL_GPIO_Init+0x2c8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d007      	beq.n	8001fa0 <HAL_GPIO_Init+0x1e4>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a3d      	ldr	r2, [pc, #244]	; (8002088 <HAL_GPIO_Init+0x2cc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_GPIO_Init+0x1e0>
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e006      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	e004      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e002      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fac:	f002 0203 	and.w	r2, r2, #3
 8001fb0:	0092      	lsls	r2, r2, #2
 8001fb2:	4093      	lsls	r3, r2
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fba:	492f      	ldr	r1, [pc, #188]	; (8002078 <HAL_GPIO_Init+0x2bc>)
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fd4:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	492c      	ldr	r1, [pc, #176]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	608b      	str	r3, [r1, #8]
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	4928      	ldr	r1, [pc, #160]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ffc:	4b23      	ldr	r3, [pc, #140]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	4922      	ldr	r1, [pc, #136]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	60cb      	str	r3, [r1, #12]
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_GPIO_Init+0x2d0>)
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	43db      	mvns	r3, r3
 8002012:	491e      	ldr	r1, [pc, #120]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002014:	4013      	ands	r3, r2
 8002016:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	4918      	ldr	r1, [pc, #96]	; (800208c <HAL_GPIO_Init+0x2d0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	43db      	mvns	r3, r3
 800203a:	4914      	ldr	r1, [pc, #80]	; (800208c <HAL_GPIO_Init+0x2d0>)
 800203c:	4013      	ands	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d021      	beq.n	8002090 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_GPIO_Init+0x2d0>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	490e      	ldr	r1, [pc, #56]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
 8002058:	e021      	b.n	800209e <HAL_GPIO_Init+0x2e2>
 800205a:	bf00      	nop
 800205c:	10320000 	.word	0x10320000
 8002060:	10310000 	.word	0x10310000
 8002064:	10220000 	.word	0x10220000
 8002068:	10210000 	.word	0x10210000
 800206c:	10120000 	.word	0x10120000
 8002070:	10110000 	.word	0x10110000
 8002074:	40021000 	.word	0x40021000
 8002078:	40010000 	.word	0x40010000
 800207c:	40010800 	.word	0x40010800
 8002080:	40010c00 	.word	0x40010c00
 8002084:	40011000 	.word	0x40011000
 8002088:	40011400 	.word	0x40011400
 800208c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_GPIO_Init+0x304>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	43db      	mvns	r3, r3
 8002098:	4909      	ldr	r1, [pc, #36]	; (80020c0 <HAL_GPIO_Init+0x304>)
 800209a:	4013      	ands	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	3301      	adds	r3, #1
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	fa22 f303 	lsr.w	r3, r2, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f47f ae8e 	bne.w	8001dd0 <HAL_GPIO_Init+0x14>
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	372c      	adds	r7, #44	; 0x2c
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	40010400 	.word	0x40010400

080020c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	887b      	ldrh	r3, [r7, #2]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	e001      	b.n	80020e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	807b      	strh	r3, [r7, #2]
 80020fe:	4613      	mov	r3, r2
 8002100:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002102:	787b      	ldrb	r3, [r7, #1]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002108:	887a      	ldrh	r2, [r7, #2]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800210e:	e003      	b.n	8002118 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	041a      	lsls	r2, r3, #16
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	611a      	str	r2, [r3, #16]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	460b      	mov	r3, r1
 800212c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002134:	887a      	ldrh	r2, [r7, #2]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4013      	ands	r3, r2
 800213a:	041a      	lsls	r2, r3, #16
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	43d9      	mvns	r1, r3
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	400b      	ands	r3, r1
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	611a      	str	r2, [r3, #16]
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e26c      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8087 	beq.w	8002282 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002174:	4b92      	ldr	r3, [pc, #584]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b04      	cmp	r3, #4
 800217e:	d00c      	beq.n	800219a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002180:	4b8f      	ldr	r3, [pc, #572]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b08      	cmp	r3, #8
 800218a:	d112      	bne.n	80021b2 <HAL_RCC_OscConfig+0x5e>
 800218c:	4b8c      	ldr	r3, [pc, #560]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002198:	d10b      	bne.n	80021b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219a:	4b89      	ldr	r3, [pc, #548]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d06c      	beq.n	8002280 <HAL_RCC_OscConfig+0x12c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d168      	bne.n	8002280 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e246      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_OscConfig+0x76>
 80021bc:	4b80      	ldr	r3, [pc, #512]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a7f      	ldr	r2, [pc, #508]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	e02e      	b.n	8002228 <HAL_RCC_OscConfig+0xd4>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x98>
 80021d2:	4b7b      	ldr	r3, [pc, #492]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a7a      	ldr	r2, [pc, #488]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b78      	ldr	r3, [pc, #480]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a77      	ldr	r2, [pc, #476]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e01d      	b.n	8002228 <HAL_RCC_OscConfig+0xd4>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0xbc>
 80021f6:	4b72      	ldr	r3, [pc, #456]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a71      	ldr	r2, [pc, #452]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b6f      	ldr	r3, [pc, #444]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a6e      	ldr	r2, [pc, #440]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e00b      	b.n	8002228 <HAL_RCC_OscConfig+0xd4>
 8002210:	4b6b      	ldr	r3, [pc, #428]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a6a      	ldr	r2, [pc, #424]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b68      	ldr	r3, [pc, #416]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a67      	ldr	r2, [pc, #412]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002226:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d013      	beq.n	8002258 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff fcac 	bl	8001b8c <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff fca8 	bl	8001b8c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1fa      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	4b5d      	ldr	r3, [pc, #372]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0xe4>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff fc98 	bl	8001b8c <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002260:	f7ff fc94 	bl	8001b8c <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	; 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1e6      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002272:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x10c>
 800227e:	e000      	b.n	8002282 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d063      	beq.n	8002356 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800228e:	4b4c      	ldr	r3, [pc, #304]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00b      	beq.n	80022b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800229a:	4b49      	ldr	r3, [pc, #292]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d11c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x18c>
 80022a6:	4b46      	ldr	r3, [pc, #280]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d116      	bne.n	80022e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b2:	4b43      	ldr	r3, [pc, #268]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_RCC_OscConfig+0x176>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e1ba      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ca:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4939      	ldr	r1, [pc, #228]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022de:	e03a      	b.n	8002356 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d020      	beq.n	800232a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e8:	4b36      	ldr	r3, [pc, #216]	; (80023c4 <HAL_RCC_OscConfig+0x270>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7ff fc4d 	bl	8001b8c <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f6:	f7ff fc49 	bl	8001b8c <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e19b      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002308:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002314:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4927      	ldr	r1, [pc, #156]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002324:	4313      	orrs	r3, r2
 8002326:	600b      	str	r3, [r1, #0]
 8002328:	e015      	b.n	8002356 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232a:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <HAL_RCC_OscConfig+0x270>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7ff fc2c 	bl	8001b8c <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002338:	f7ff fc28 	bl	8001b8c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e17a      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d03a      	beq.n	80023d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d019      	beq.n	800239e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_RCC_OscConfig+0x274>)
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002370:	f7ff fc0c 	bl	8001b8c <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002378:	f7ff fc08 	bl	8001b8c <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e15a      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238a:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002396:	2001      	movs	r0, #1
 8002398:	f000 facc 	bl	8002934 <RCC_Delay>
 800239c:	e01c      	b.n	80023d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_RCC_OscConfig+0x274>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a4:	f7ff fbf2 	bl	8001b8c <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023aa:	e00f      	b.n	80023cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ac:	f7ff fbee 	bl	8001b8c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d908      	bls.n	80023cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e140      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	42420000 	.word	0x42420000
 80023c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023cc:	4b9e      	ldr	r3, [pc, #632]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1e9      	bne.n	80023ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80a6 	beq.w	8002532 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ea:	4b97      	ldr	r3, [pc, #604]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10d      	bne.n	8002412 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	4b94      	ldr	r3, [pc, #592]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	4a93      	ldr	r2, [pc, #588]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002400:	61d3      	str	r3, [r2, #28]
 8002402:	4b91      	ldr	r3, [pc, #580]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240e:	2301      	movs	r3, #1
 8002410:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002412:	4b8e      	ldr	r3, [pc, #568]	; (800264c <HAL_RCC_OscConfig+0x4f8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d118      	bne.n	8002450 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241e:	4b8b      	ldr	r3, [pc, #556]	; (800264c <HAL_RCC_OscConfig+0x4f8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a8a      	ldr	r2, [pc, #552]	; (800264c <HAL_RCC_OscConfig+0x4f8>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242a:	f7ff fbaf 	bl	8001b8c <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7ff fbab 	bl	8001b8c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b64      	cmp	r3, #100	; 0x64
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e0fd      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	4b81      	ldr	r3, [pc, #516]	; (800264c <HAL_RCC_OscConfig+0x4f8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x312>
 8002458:	4b7b      	ldr	r3, [pc, #492]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4a7a      	ldr	r2, [pc, #488]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6213      	str	r3, [r2, #32]
 8002464:	e02d      	b.n	80024c2 <HAL_RCC_OscConfig+0x36e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x334>
 800246e:	4b76      	ldr	r3, [pc, #472]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4a75      	ldr	r2, [pc, #468]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	6213      	str	r3, [r2, #32]
 800247a:	4b73      	ldr	r3, [pc, #460]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4a72      	ldr	r2, [pc, #456]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002480:	f023 0304 	bic.w	r3, r3, #4
 8002484:	6213      	str	r3, [r2, #32]
 8002486:	e01c      	b.n	80024c2 <HAL_RCC_OscConfig+0x36e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b05      	cmp	r3, #5
 800248e:	d10c      	bne.n	80024aa <HAL_RCC_OscConfig+0x356>
 8002490:	4b6d      	ldr	r3, [pc, #436]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4a6c      	ldr	r2, [pc, #432]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	6213      	str	r3, [r2, #32]
 800249c:	4b6a      	ldr	r3, [pc, #424]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4a69      	ldr	r2, [pc, #420]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6213      	str	r3, [r2, #32]
 80024a8:	e00b      	b.n	80024c2 <HAL_RCC_OscConfig+0x36e>
 80024aa:	4b67      	ldr	r3, [pc, #412]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a66      	ldr	r2, [pc, #408]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6213      	str	r3, [r2, #32]
 80024b6:	4b64      	ldr	r3, [pc, #400]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a63      	ldr	r2, [pc, #396]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	f023 0304 	bic.w	r3, r3, #4
 80024c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d015      	beq.n	80024f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ca:	f7ff fb5f 	bl	8001b8c <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7ff fb5b 	bl	8001b8c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e0ab      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e8:	4b57      	ldr	r3, [pc, #348]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ee      	beq.n	80024d2 <HAL_RCC_OscConfig+0x37e>
 80024f4:	e014      	b.n	8002520 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f6:	f7ff fb49 	bl	8001b8c <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fc:	e00a      	b.n	8002514 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7ff fb45 	bl	8001b8c <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e095      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002514:	4b4c      	ldr	r3, [pc, #304]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ee      	bne.n	80024fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d105      	bne.n	8002532 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002526:	4b48      	ldr	r3, [pc, #288]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4a47      	ldr	r2, [pc, #284]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002530:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8081 	beq.w	800263e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800253c:	4b42      	ldr	r3, [pc, #264]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b08      	cmp	r3, #8
 8002546:	d061      	beq.n	800260c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d146      	bne.n	80025de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002550:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <HAL_RCC_OscConfig+0x4fc>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7ff fb19 	bl	8001b8c <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255e:	f7ff fb15 	bl	8001b8c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e067      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002570:	4b35      	ldr	r3, [pc, #212]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d108      	bne.n	8002598 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	492d      	ldr	r1, [pc, #180]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002598:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a19      	ldr	r1, [r3, #32]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	430b      	orrs	r3, r1
 80025aa:	4927      	ldr	r1, [pc, #156]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b0:	4b27      	ldr	r3, [pc, #156]	; (8002650 <HAL_RCC_OscConfig+0x4fc>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7ff fae9 	bl	8001b8c <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025be:	f7ff fae5 	bl	8001b8c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e037      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x46a>
 80025dc:	e02f      	b.n	800263e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <HAL_RCC_OscConfig+0x4fc>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7ff fad2 	bl	8001b8c <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ec:	f7ff face 	bl	8001b8c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e020      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x498>
 800260a:	e018      	b.n	800263e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e013      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	429a      	cmp	r2, r3
 800262a:	d106      	bne.n	800263a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	40007000 	.word	0x40007000
 8002650:	42420060 	.word	0x42420060

08002654 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0d0      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002668:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d910      	bls.n	8002698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b67      	ldr	r3, [pc, #412]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 0207 	bic.w	r2, r3, #7
 800267e:	4965      	ldr	r1, [pc, #404]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b63      	ldr	r3, [pc, #396]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0b8      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d020      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b0:	4b59      	ldr	r3, [pc, #356]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a58      	ldr	r2, [pc, #352]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c8:	4b53      	ldr	r3, [pc, #332]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4a52      	ldr	r2, [pc, #328]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d4:	4b50      	ldr	r3, [pc, #320]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	494d      	ldr	r1, [pc, #308]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d040      	beq.n	8002774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d107      	bne.n	800270a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b47      	ldr	r3, [pc, #284]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d115      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e07f      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	4b41      	ldr	r3, [pc, #260]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e073      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002722:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e06b      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002732:	4b39      	ldr	r3, [pc, #228]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f023 0203 	bic.w	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4936      	ldr	r1, [pc, #216]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002744:	f7ff fa22 	bl	8001b8c <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274a:	e00a      	b.n	8002762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800274c:	f7ff fa1e 	bl	8001b8c <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	; 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e053      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 020c 	and.w	r2, r3, #12
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	429a      	cmp	r2, r3
 8002772:	d1eb      	bne.n	800274c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d210      	bcs.n	80027a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 0207 	bic.w	r2, r3, #7
 800278a:	4922      	ldr	r1, [pc, #136]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	4b20      	ldr	r3, [pc, #128]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e032      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4916      	ldr	r1, [pc, #88]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	490e      	ldr	r1, [pc, #56]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027e2:	f000 f821 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80027e6:	4602      	mov	r2, r0
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	490a      	ldr	r1, [pc, #40]	; (800281c <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	5ccb      	ldrb	r3, [r1, r3]
 80027f6:	fa22 f303 	lsr.w	r3, r2, r3
 80027fa:	4a09      	ldr	r2, [pc, #36]	; (8002820 <HAL_RCC_ClockConfig+0x1cc>)
 80027fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCC_ClockConfig+0x1d0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff f980 	bl	8001b08 <HAL_InitTick>

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40022000 	.word	0x40022000
 8002818:	40021000 	.word	0x40021000
 800281c:	0800451c 	.word	0x0800451c
 8002820:	20000028 	.word	0x20000028
 8002824:	2000002c 	.word	0x2000002c

08002828 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002842:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b04      	cmp	r3, #4
 8002850:	d002      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0x30>
 8002852:	2b08      	cmp	r3, #8
 8002854:	d003      	beq.n	800285e <HAL_RCC_GetSysClockFreq+0x36>
 8002856:	e027      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800285a:	613b      	str	r3, [r7, #16]
      break;
 800285c:	e027      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	0c9b      	lsrs	r3, r3, #18
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	4a17      	ldr	r2, [pc, #92]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002868:	5cd3      	ldrb	r3, [r2, r3]
 800286a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d010      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	0c5b      	lsrs	r3, r3, #17
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	4a11      	ldr	r2, [pc, #68]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002882:	5cd3      	ldrb	r3, [r2, r3]
 8002884:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a0d      	ldr	r2, [pc, #52]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800288a:	fb02 f203 	mul.w	r2, r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	fbb2 f3f3 	udiv	r3, r2, r3
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	e004      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800289c:	fb02 f303 	mul.w	r3, r2, r3
 80028a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	613b      	str	r3, [r7, #16]
      break;
 80028a6:	e002      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80028aa:	613b      	str	r3, [r7, #16]
      break;
 80028ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ae:	693b      	ldr	r3, [r7, #16]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
 80028c0:	007a1200 	.word	0x007a1200
 80028c4:	08004534 	.word	0x08004534
 80028c8:	08004544 	.word	0x08004544
 80028cc:	003d0900 	.word	0x003d0900

080028d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d4:	4b02      	ldr	r3, [pc, #8]	; (80028e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	20000028 	.word	0x20000028

080028e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028e8:	f7ff fff2 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	4903      	ldr	r1, [pc, #12]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028fa:	5ccb      	ldrb	r3, [r1, r3]
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002900:	4618      	mov	r0, r3
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000
 8002908:	0800452c 	.word	0x0800452c

0800290c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002910:	f7ff ffde 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 8002914:	4602      	mov	r2, r0
 8002916:	4b05      	ldr	r3, [pc, #20]	; (800292c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	0adb      	lsrs	r3, r3, #11
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	4903      	ldr	r1, [pc, #12]	; (8002930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002922:	5ccb      	ldrb	r3, [r1, r3]
 8002924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002928:	4618      	mov	r0, r3
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021000 	.word	0x40021000
 8002930:	0800452c 	.word	0x0800452c

08002934 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800293c:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <RCC_Delay+0x34>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0a      	ldr	r2, [pc, #40]	; (800296c <RCC_Delay+0x38>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	0a5b      	lsrs	r3, r3, #9
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002950:	bf00      	nop
  }
  while (Delay --);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1e5a      	subs	r2, r3, #1
 8002956:	60fa      	str	r2, [r7, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f9      	bne.n	8002950 <RCC_Delay+0x1c>
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	20000028 	.word	0x20000028
 800296c:	10624dd3 	.word	0x10624dd3

08002970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e041      	b.n	8002a06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe fe6e 	bl	8001678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3304      	adds	r3, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4610      	mov	r0, r2
 80029b0:	f000 fc30 	bl	8003214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d001      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e03a      	b.n	8002a9e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a18      	ldr	r2, [pc, #96]	; (8002aa8 <HAL_TIM_Base_Start_IT+0x98>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00e      	beq.n	8002a68 <HAL_TIM_Base_Start_IT+0x58>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a52:	d009      	beq.n	8002a68 <HAL_TIM_Base_Start_IT+0x58>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a14      	ldr	r2, [pc, #80]	; (8002aac <HAL_TIM_Base_Start_IT+0x9c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d004      	beq.n	8002a68 <HAL_TIM_Base_Start_IT+0x58>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d111      	bne.n	8002a8c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b06      	cmp	r3, #6
 8002a78:	d010      	beq.n	8002a9c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8a:	e007      	b.n	8002a9c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	40012c00 	.word	0x40012c00
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000800 	.word	0x40000800

08002ab4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e041      	b.n	8002b4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f839 	bl	8002b52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3304      	adds	r3, #4
 8002af0:	4619      	mov	r1, r3
 8002af2:	4610      	mov	r0, r2
 8002af4:	f000 fb8e 	bl	8003214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d109      	bne.n	8002b88 <HAL_TIM_PWM_Start+0x24>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	e022      	b.n	8002bce <HAL_TIM_PWM_Start+0x6a>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d109      	bne.n	8002ba2 <HAL_TIM_PWM_Start+0x3e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	bf14      	ite	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	2300      	moveq	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	e015      	b.n	8002bce <HAL_TIM_PWM_Start+0x6a>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d109      	bne.n	8002bbc <HAL_TIM_PWM_Start+0x58>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	e008      	b.n	8002bce <HAL_TIM_PWM_Start+0x6a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	bf14      	ite	ne
 8002bc8:	2301      	movne	r3, #1
 8002bca:	2300      	moveq	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e05e      	b.n	8002c94 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d104      	bne.n	8002be6 <HAL_TIM_PWM_Start+0x82>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002be4:	e013      	b.n	8002c0e <HAL_TIM_PWM_Start+0xaa>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d104      	bne.n	8002bf6 <HAL_TIM_PWM_Start+0x92>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bf4:	e00b      	b.n	8002c0e <HAL_TIM_PWM_Start+0xaa>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d104      	bne.n	8002c06 <HAL_TIM_PWM_Start+0xa2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c04:	e003      	b.n	8002c0e <HAL_TIM_PWM_Start+0xaa>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2201      	movs	r2, #1
 8002c14:	6839      	ldr	r1, [r7, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fd7c 	bl	8003714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1e      	ldr	r2, [pc, #120]	; (8002c9c <HAL_TIM_PWM_Start+0x138>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d107      	bne.n	8002c36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <HAL_TIM_PWM_Start+0x138>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00e      	beq.n	8002c5e <HAL_TIM_PWM_Start+0xfa>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c48:	d009      	beq.n	8002c5e <HAL_TIM_PWM_Start+0xfa>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <HAL_TIM_PWM_Start+0x13c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_TIM_PWM_Start+0xfa>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <HAL_TIM_PWM_Start+0x140>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d111      	bne.n	8002c82 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b06      	cmp	r3, #6
 8002c6e:	d010      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c80:	e007      	b.n	8002c92 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0201 	orr.w	r2, r2, #1
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40012c00 	.word	0x40012c00
 8002ca0:	40000400 	.word	0x40000400
 8002ca4:	40000800 	.word	0x40000800

08002ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d122      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d11b      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0202 	mvn.w	r2, #2
 8002cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa76 	bl	80031dc <HAL_TIM_IC_CaptureCallback>
 8002cf0:	e005      	b.n	8002cfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fa69 	bl	80031ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fa78 	bl	80031ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d122      	bne.n	8002d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d11b      	bne.n	8002d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0204 	mvn.w	r2, #4
 8002d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fa4c 	bl	80031dc <HAL_TIM_IC_CaptureCallback>
 8002d44:	e005      	b.n	8002d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fa3f 	bl	80031ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fa4e 	bl	80031ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d122      	bne.n	8002dac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d11b      	bne.n	8002dac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0208 	mvn.w	r2, #8
 8002d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2204      	movs	r2, #4
 8002d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fa22 	bl	80031dc <HAL_TIM_IC_CaptureCallback>
 8002d98:	e005      	b.n	8002da6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fa15 	bl	80031ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fa24 	bl	80031ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b10      	cmp	r3, #16
 8002db8:	d122      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d11b      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0210 	mvn.w	r2, #16
 8002dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f9f8 	bl	80031dc <HAL_TIM_IC_CaptureCallback>
 8002dec:	e005      	b.n	8002dfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f9eb 	bl	80031ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f9fa 	bl	80031ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d10e      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d107      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0201 	mvn.w	r2, #1
 8002e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe f992 	bl	8001150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e36:	2b80      	cmp	r3, #128	; 0x80
 8002e38:	d10e      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e44:	2b80      	cmp	r3, #128	; 0x80
 8002e46:	d107      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fce9 	bl	800382a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e62:	2b40      	cmp	r3, #64	; 0x40
 8002e64:	d10e      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e70:	2b40      	cmp	r3, #64	; 0x40
 8002e72:	d107      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f9be 	bl	8003200 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	d10e      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d107      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0220 	mvn.w	r2, #32
 8002ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fcb4 	bl	8003818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e0ae      	b.n	8003034 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b0c      	cmp	r3, #12
 8002ee2:	f200 809f 	bhi.w	8003024 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ee6:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002f21 	.word	0x08002f21
 8002ef0:	08003025 	.word	0x08003025
 8002ef4:	08003025 	.word	0x08003025
 8002ef8:	08003025 	.word	0x08003025
 8002efc:	08002f61 	.word	0x08002f61
 8002f00:	08003025 	.word	0x08003025
 8002f04:	08003025 	.word	0x08003025
 8002f08:	08003025 	.word	0x08003025
 8002f0c:	08002fa3 	.word	0x08002fa3
 8002f10:	08003025 	.word	0x08003025
 8002f14:	08003025 	.word	0x08003025
 8002f18:	08003025 	.word	0x08003025
 8002f1c:	08002fe3 	.word	0x08002fe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f9d6 	bl	80032d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0208 	orr.w	r2, r2, #8
 8002f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0204 	bic.w	r2, r2, #4
 8002f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6999      	ldr	r1, [r3, #24]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	619a      	str	r2, [r3, #24]
      break;
 8002f5e:	e064      	b.n	800302a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fa1c 	bl	80033a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6999      	ldr	r1, [r3, #24]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	021a      	lsls	r2, r3, #8
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	619a      	str	r2, [r3, #24]
      break;
 8002fa0:	e043      	b.n	800302a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fa65 	bl	8003478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0208 	orr.w	r2, r2, #8
 8002fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0204 	bic.w	r2, r2, #4
 8002fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69d9      	ldr	r1, [r3, #28]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	61da      	str	r2, [r3, #28]
      break;
 8002fe0:	e023      	b.n	800302a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 faaf 	bl	800354c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69d9      	ldr	r1, [r3, #28]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	021a      	lsls	r2, r3, #8
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	61da      	str	r2, [r3, #28]
      break;
 8003022:	e002      	b.n	800302a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	75fb      	strb	r3, [r7, #23]
      break;
 8003028:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003032:	7dfb      	ldrb	r3, [r7, #23]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_TIM_ConfigClockSource+0x1c>
 8003054:	2302      	movs	r3, #2
 8003056:	e0b4      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x186>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800307e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003090:	d03e      	beq.n	8003110 <HAL_TIM_ConfigClockSource+0xd4>
 8003092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003096:	f200 8087 	bhi.w	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
 800309a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309e:	f000 8086 	beq.w	80031ae <HAL_TIM_ConfigClockSource+0x172>
 80030a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a6:	d87f      	bhi.n	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b70      	cmp	r3, #112	; 0x70
 80030aa:	d01a      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0xa6>
 80030ac:	2b70      	cmp	r3, #112	; 0x70
 80030ae:	d87b      	bhi.n	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
 80030b0:	2b60      	cmp	r3, #96	; 0x60
 80030b2:	d050      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x11a>
 80030b4:	2b60      	cmp	r3, #96	; 0x60
 80030b6:	d877      	bhi.n	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
 80030b8:	2b50      	cmp	r3, #80	; 0x50
 80030ba:	d03c      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0xfa>
 80030bc:	2b50      	cmp	r3, #80	; 0x50
 80030be:	d873      	bhi.n	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d058      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0x13a>
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d86f      	bhi.n	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
 80030c8:	2b30      	cmp	r3, #48	; 0x30
 80030ca:	d064      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0x15a>
 80030cc:	2b30      	cmp	r3, #48	; 0x30
 80030ce:	d86b      	bhi.n	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d060      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0x15a>
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d867      	bhi.n	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d05c      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0x15a>
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d05a      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0x15a>
 80030e0:	e062      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6899      	ldr	r1, [r3, #8]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f000 faf0 	bl	80036d6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003104:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	609a      	str	r2, [r3, #8]
      break;
 800310e:	e04f      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	6899      	ldr	r1, [r3, #8]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f000 fad9 	bl	80036d6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003132:	609a      	str	r2, [r3, #8]
      break;
 8003134:	e03c      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	461a      	mov	r2, r3
 8003144:	f000 fa50 	bl	80035e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2150      	movs	r1, #80	; 0x50
 800314e:	4618      	mov	r0, r3
 8003150:	f000 faa7 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 8003154:	e02c      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6859      	ldr	r1, [r3, #4]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	461a      	mov	r2, r3
 8003164:	f000 fa6e 	bl	8003644 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2160      	movs	r1, #96	; 0x60
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fa97 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 8003174:	e01c      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6859      	ldr	r1, [r3, #4]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	461a      	mov	r2, r3
 8003184:	f000 fa30 	bl	80035e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2140      	movs	r1, #64	; 0x40
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fa87 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 8003194:	e00c      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4619      	mov	r1, r3
 80031a0:	4610      	mov	r0, r2
 80031a2:	f000 fa7e 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 80031a6:	e003      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
      break;
 80031ac:	e000      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
	...

08003214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a29      	ldr	r2, [pc, #164]	; (80032cc <TIM_Base_SetConfig+0xb8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00b      	beq.n	8003244 <TIM_Base_SetConfig+0x30>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003232:	d007      	beq.n	8003244 <TIM_Base_SetConfig+0x30>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a26      	ldr	r2, [pc, #152]	; (80032d0 <TIM_Base_SetConfig+0xbc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d003      	beq.n	8003244 <TIM_Base_SetConfig+0x30>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a25      	ldr	r2, [pc, #148]	; (80032d4 <TIM_Base_SetConfig+0xc0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d108      	bne.n	8003256 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a1c      	ldr	r2, [pc, #112]	; (80032cc <TIM_Base_SetConfig+0xb8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00b      	beq.n	8003276 <TIM_Base_SetConfig+0x62>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003264:	d007      	beq.n	8003276 <TIM_Base_SetConfig+0x62>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a19      	ldr	r2, [pc, #100]	; (80032d0 <TIM_Base_SetConfig+0xbc>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d003      	beq.n	8003276 <TIM_Base_SetConfig+0x62>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <TIM_Base_SetConfig+0xc0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d108      	bne.n	8003288 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800327c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a07      	ldr	r2, [pc, #28]	; (80032cc <TIM_Base_SetConfig+0xb8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d103      	bne.n	80032bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	615a      	str	r2, [r3, #20]
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	40012c00 	.word	0x40012c00
 80032d0:	40000400 	.word	0x40000400
 80032d4:	40000800 	.word	0x40000800

080032d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f023 0201 	bic.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0303 	bic.w	r3, r3, #3
 800330e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f023 0302 	bic.w	r3, r3, #2
 8003320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <TIM_OC1_SetConfig+0xc8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d10c      	bne.n	800334e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f023 0308 	bic.w	r3, r3, #8
 800333a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f023 0304 	bic.w	r3, r3, #4
 800334c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <TIM_OC1_SetConfig+0xc8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d111      	bne.n	800337a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800335c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	621a      	str	r2, [r3, #32]
}
 8003394:	bf00      	nop
 8003396:	371c      	adds	r7, #28
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40012c00 	.word	0x40012c00

080033a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	f023 0210 	bic.w	r2, r3, #16
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0320 	bic.w	r3, r3, #32
 80033ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <TIM_OC2_SetConfig+0xd0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d10d      	bne.n	8003420 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800340a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800341e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a14      	ldr	r2, [pc, #80]	; (8003474 <TIM_OC2_SetConfig+0xd0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d113      	bne.n	8003450 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800342e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003436:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	621a      	str	r2, [r3, #32]
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	40012c00 	.word	0x40012c00

08003478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0303 	bic.w	r3, r3, #3
 80034ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <TIM_OC3_SetConfig+0xd0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d10d      	bne.n	80034f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	021b      	lsls	r3, r3, #8
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a14      	ldr	r2, [pc, #80]	; (8003548 <TIM_OC3_SetConfig+0xd0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d113      	bne.n	8003522 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	621a      	str	r2, [r3, #32]
}
 800353c:	bf00      	nop
 800353e:	371c      	adds	r7, #28
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40012c00 	.word	0x40012c00

0800354c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800357a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	031b      	lsls	r3, r3, #12
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a0f      	ldr	r2, [pc, #60]	; (80035e4 <TIM_OC4_SetConfig+0x98>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d109      	bne.n	80035c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	019b      	lsls	r3, r3, #6
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	621a      	str	r2, [r3, #32]
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	40012c00 	.word	0x40012c00

080035e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f023 0201 	bic.w	r2, r3, #1
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f023 030a 	bic.w	r3, r3, #10
 8003624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	621a      	str	r2, [r3, #32]
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	f023 0210 	bic.w	r2, r3, #16
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800366e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	031b      	lsls	r3, r3, #12
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003680:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	621a      	str	r2, [r3, #32]
}
 8003698:	bf00      	nop
 800369a:	371c      	adds	r7, #28
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	f043 0307 	orr.w	r3, r3, #7
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	609a      	str	r2, [r3, #8]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b087      	sub	sp, #28
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
 80036e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	021a      	lsls	r2, r3, #8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	431a      	orrs	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	609a      	str	r2, [r3, #8]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	2201      	movs	r2, #1
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a1a      	ldr	r2, [r3, #32]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	43db      	mvns	r3, r3
 8003736:	401a      	ands	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a1a      	ldr	r2, [r3, #32]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 031f 	and.w	r3, r3, #31
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	431a      	orrs	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	621a      	str	r2, [r3, #32]
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr

0800375c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003770:	2302      	movs	r3, #2
 8003772:	e046      	b.n	8003802 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a16      	ldr	r2, [pc, #88]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00e      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c0:	d009      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a12      	ldr	r2, [pc, #72]	; (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d004      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a10      	ldr	r2, [pc, #64]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d10c      	bne.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr
 800380c:	40012c00 	.word	0x40012c00
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800

08003818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e042      	b.n	80038d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fd ff7a 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2224      	movs	r2, #36	; 0x24
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800387e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f91d 	bl	8003ac0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003894:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	; 0x28
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	4613      	mov	r3, r2
 80038ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d16d      	bne.n	80039d8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <HAL_UART_Transmit+0x2c>
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e066      	b.n	80039da <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2221      	movs	r2, #33	; 0x21
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800391a:	f7fe f937 	bl	8001b8c <HAL_GetTick>
 800391e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	88fa      	ldrh	r2, [r7, #6]
 8003924:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	88fa      	ldrh	r2, [r7, #6]
 800392a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003934:	d108      	bne.n	8003948 <HAL_UART_Transmit+0x6c>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d104      	bne.n	8003948 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	e003      	b.n	8003950 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800394c:	2300      	movs	r3, #0
 800394e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003950:	e02a      	b.n	80039a8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2200      	movs	r2, #0
 800395a:	2180      	movs	r1, #128	; 0x80
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f840 	bl	80039e2 <UART_WaitOnFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e036      	b.n	80039da <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10b      	bne.n	800398a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003980:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	3302      	adds	r3, #2
 8003986:	61bb      	str	r3, [r7, #24]
 8003988:	e007      	b.n	800399a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	781a      	ldrb	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	3301      	adds	r3, #1
 8003998:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1cf      	bne.n	8003952 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2200      	movs	r2, #0
 80039ba:	2140      	movs	r1, #64	; 0x40
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f810 	bl	80039e2 <UART_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e006      	b.n	80039da <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	e000      	b.n	80039da <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
  }
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b090      	sub	sp, #64	; 0x40
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	603b      	str	r3, [r7, #0]
 80039ee:	4613      	mov	r3, r2
 80039f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f2:	e050      	b.n	8003a96 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fa:	d04c      	beq.n	8003a96 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d007      	beq.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a02:	f7fe f8c3 	bl	8001b8c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d241      	bcs.n	8003a96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	330c      	adds	r3, #12
 8003a18:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	e853 3f00 	ldrex	r3, [r3]
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a32:	637a      	str	r2, [r7, #52]	; 0x34
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a3a:	e841 2300 	strex	r3, r2, [r1]
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e5      	bne.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3314      	adds	r3, #20
 8003a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	613b      	str	r3, [r7, #16]
   return(result);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3314      	adds	r3, #20
 8003a64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a66:	623a      	str	r2, [r7, #32]
 8003a68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	69f9      	ldr	r1, [r7, #28]
 8003a6c:	6a3a      	ldr	r2, [r7, #32]
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e5      	bne.n	8003a46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e00f      	b.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	bf0c      	ite	eq
 8003aa6:	2301      	moveq	r3, #1
 8003aa8:	2300      	movne	r3, #0
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	461a      	mov	r2, r3
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d09f      	beq.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3740      	adds	r7, #64	; 0x40
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003afa:	f023 030c 	bic.w	r3, r3, #12
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6812      	ldr	r2, [r2, #0]
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a2c      	ldr	r2, [pc, #176]	; (8003bd4 <UART_SetConfig+0x114>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d103      	bne.n	8003b30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b28:	f7fe fef0 	bl	800290c <HAL_RCC_GetPCLK2Freq>
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	e002      	b.n	8003b36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b30:	f7fe fed8 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 8003b34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009a      	lsls	r2, r3, #2
 8003b40:	441a      	add	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4c:	4a22      	ldr	r2, [pc, #136]	; (8003bd8 <UART_SetConfig+0x118>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	0119      	lsls	r1, r3, #4
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009a      	lsls	r2, r3, #2
 8003b60:	441a      	add	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b6c:	4b1a      	ldr	r3, [pc, #104]	; (8003bd8 <UART_SetConfig+0x118>)
 8003b6e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	2064      	movs	r0, #100	; 0x64
 8003b76:	fb00 f303 	mul.w	r3, r0, r3
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	3332      	adds	r3, #50	; 0x32
 8003b80:	4a15      	ldr	r2, [pc, #84]	; (8003bd8 <UART_SetConfig+0x118>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b8c:	4419      	add	r1, r3
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	009a      	lsls	r2, r3, #2
 8003b98:	441a      	add	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <UART_SetConfig+0x118>)
 8003ba6:	fba3 0302 	umull	r0, r3, r3, r2
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	2064      	movs	r0, #100	; 0x64
 8003bae:	fb00 f303 	mul.w	r3, r0, r3
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	3332      	adds	r3, #50	; 0x32
 8003bb8:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <UART_SetConfig+0x118>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	f003 020f 	and.w	r2, r3, #15
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	440a      	add	r2, r1
 8003bca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40013800 	.word	0x40013800
 8003bd8:	51eb851f 	.word	0x51eb851f

08003bdc <__errno>:
 8003bdc:	4b01      	ldr	r3, [pc, #4]	; (8003be4 <__errno+0x8>)
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000034 	.word	0x20000034

08003be8 <__libc_init_array>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	2600      	movs	r6, #0
 8003bec:	4d0c      	ldr	r5, [pc, #48]	; (8003c20 <__libc_init_array+0x38>)
 8003bee:	4c0d      	ldr	r4, [pc, #52]	; (8003c24 <__libc_init_array+0x3c>)
 8003bf0:	1b64      	subs	r4, r4, r5
 8003bf2:	10a4      	asrs	r4, r4, #2
 8003bf4:	42a6      	cmp	r6, r4
 8003bf6:	d109      	bne.n	8003c0c <__libc_init_array+0x24>
 8003bf8:	f000 fc6c 	bl	80044d4 <_init>
 8003bfc:	2600      	movs	r6, #0
 8003bfe:	4d0a      	ldr	r5, [pc, #40]	; (8003c28 <__libc_init_array+0x40>)
 8003c00:	4c0a      	ldr	r4, [pc, #40]	; (8003c2c <__libc_init_array+0x44>)
 8003c02:	1b64      	subs	r4, r4, r5
 8003c04:	10a4      	asrs	r4, r4, #2
 8003c06:	42a6      	cmp	r6, r4
 8003c08:	d105      	bne.n	8003c16 <__libc_init_array+0x2e>
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
 8003c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c10:	4798      	blx	r3
 8003c12:	3601      	adds	r6, #1
 8003c14:	e7ee      	b.n	8003bf4 <__libc_init_array+0xc>
 8003c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c1a:	4798      	blx	r3
 8003c1c:	3601      	adds	r6, #1
 8003c1e:	e7f2      	b.n	8003c06 <__libc_init_array+0x1e>
 8003c20:	0800457c 	.word	0x0800457c
 8003c24:	0800457c 	.word	0x0800457c
 8003c28:	0800457c 	.word	0x0800457c
 8003c2c:	08004580 	.word	0x08004580

08003c30 <malloc>:
 8003c30:	4b02      	ldr	r3, [pc, #8]	; (8003c3c <malloc+0xc>)
 8003c32:	4601      	mov	r1, r0
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	f000 b85f 	b.w	8003cf8 <_malloc_r>
 8003c3a:	bf00      	nop
 8003c3c:	20000034 	.word	0x20000034

08003c40 <free>:
 8003c40:	4b02      	ldr	r3, [pc, #8]	; (8003c4c <free+0xc>)
 8003c42:	4601      	mov	r1, r0
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	f000 b80b 	b.w	8003c60 <_free_r>
 8003c4a:	bf00      	nop
 8003c4c:	20000034 	.word	0x20000034

08003c50 <memset>:
 8003c50:	4603      	mov	r3, r0
 8003c52:	4402      	add	r2, r0
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d100      	bne.n	8003c5a <memset+0xa>
 8003c58:	4770      	bx	lr
 8003c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c5e:	e7f9      	b.n	8003c54 <memset+0x4>

08003c60 <_free_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4605      	mov	r5, r0
 8003c64:	2900      	cmp	r1, #0
 8003c66:	d043      	beq.n	8003cf0 <_free_r+0x90>
 8003c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c6c:	1f0c      	subs	r4, r1, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bfb8      	it	lt
 8003c72:	18e4      	addlt	r4, r4, r3
 8003c74:	f000 f8ca 	bl	8003e0c <__malloc_lock>
 8003c78:	4a1e      	ldr	r2, [pc, #120]	; (8003cf4 <_free_r+0x94>)
 8003c7a:	6813      	ldr	r3, [r2, #0]
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	b933      	cbnz	r3, 8003c8e <_free_r+0x2e>
 8003c80:	6063      	str	r3, [r4, #4]
 8003c82:	6014      	str	r4, [r2, #0]
 8003c84:	4628      	mov	r0, r5
 8003c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c8a:	f000 b8c5 	b.w	8003e18 <__malloc_unlock>
 8003c8e:	42a3      	cmp	r3, r4
 8003c90:	d90a      	bls.n	8003ca8 <_free_r+0x48>
 8003c92:	6821      	ldr	r1, [r4, #0]
 8003c94:	1862      	adds	r2, r4, r1
 8003c96:	4293      	cmp	r3, r2
 8003c98:	bf01      	itttt	eq
 8003c9a:	681a      	ldreq	r2, [r3, #0]
 8003c9c:	685b      	ldreq	r3, [r3, #4]
 8003c9e:	1852      	addeq	r2, r2, r1
 8003ca0:	6022      	streq	r2, [r4, #0]
 8003ca2:	6063      	str	r3, [r4, #4]
 8003ca4:	6004      	str	r4, [r0, #0]
 8003ca6:	e7ed      	b.n	8003c84 <_free_r+0x24>
 8003ca8:	461a      	mov	r2, r3
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	b10b      	cbz	r3, 8003cb2 <_free_r+0x52>
 8003cae:	42a3      	cmp	r3, r4
 8003cb0:	d9fa      	bls.n	8003ca8 <_free_r+0x48>
 8003cb2:	6811      	ldr	r1, [r2, #0]
 8003cb4:	1850      	adds	r0, r2, r1
 8003cb6:	42a0      	cmp	r0, r4
 8003cb8:	d10b      	bne.n	8003cd2 <_free_r+0x72>
 8003cba:	6820      	ldr	r0, [r4, #0]
 8003cbc:	4401      	add	r1, r0
 8003cbe:	1850      	adds	r0, r2, r1
 8003cc0:	4283      	cmp	r3, r0
 8003cc2:	6011      	str	r1, [r2, #0]
 8003cc4:	d1de      	bne.n	8003c84 <_free_r+0x24>
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	4401      	add	r1, r0
 8003ccc:	6011      	str	r1, [r2, #0]
 8003cce:	6053      	str	r3, [r2, #4]
 8003cd0:	e7d8      	b.n	8003c84 <_free_r+0x24>
 8003cd2:	d902      	bls.n	8003cda <_free_r+0x7a>
 8003cd4:	230c      	movs	r3, #12
 8003cd6:	602b      	str	r3, [r5, #0]
 8003cd8:	e7d4      	b.n	8003c84 <_free_r+0x24>
 8003cda:	6820      	ldr	r0, [r4, #0]
 8003cdc:	1821      	adds	r1, r4, r0
 8003cde:	428b      	cmp	r3, r1
 8003ce0:	bf01      	itttt	eq
 8003ce2:	6819      	ldreq	r1, [r3, #0]
 8003ce4:	685b      	ldreq	r3, [r3, #4]
 8003ce6:	1809      	addeq	r1, r1, r0
 8003ce8:	6021      	streq	r1, [r4, #0]
 8003cea:	6063      	str	r3, [r4, #4]
 8003cec:	6054      	str	r4, [r2, #4]
 8003cee:	e7c9      	b.n	8003c84 <_free_r+0x24>
 8003cf0:	bd38      	pop	{r3, r4, r5, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000168 	.word	0x20000168

08003cf8 <_malloc_r>:
 8003cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfa:	1ccd      	adds	r5, r1, #3
 8003cfc:	f025 0503 	bic.w	r5, r5, #3
 8003d00:	3508      	adds	r5, #8
 8003d02:	2d0c      	cmp	r5, #12
 8003d04:	bf38      	it	cc
 8003d06:	250c      	movcc	r5, #12
 8003d08:	2d00      	cmp	r5, #0
 8003d0a:	4606      	mov	r6, r0
 8003d0c:	db01      	blt.n	8003d12 <_malloc_r+0x1a>
 8003d0e:	42a9      	cmp	r1, r5
 8003d10:	d903      	bls.n	8003d1a <_malloc_r+0x22>
 8003d12:	230c      	movs	r3, #12
 8003d14:	6033      	str	r3, [r6, #0]
 8003d16:	2000      	movs	r0, #0
 8003d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d1a:	f000 f877 	bl	8003e0c <__malloc_lock>
 8003d1e:	4921      	ldr	r1, [pc, #132]	; (8003da4 <_malloc_r+0xac>)
 8003d20:	680a      	ldr	r2, [r1, #0]
 8003d22:	4614      	mov	r4, r2
 8003d24:	b99c      	cbnz	r4, 8003d4e <_malloc_r+0x56>
 8003d26:	4f20      	ldr	r7, [pc, #128]	; (8003da8 <_malloc_r+0xb0>)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	b923      	cbnz	r3, 8003d36 <_malloc_r+0x3e>
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	4630      	mov	r0, r6
 8003d30:	f000 f83c 	bl	8003dac <_sbrk_r>
 8003d34:	6038      	str	r0, [r7, #0]
 8003d36:	4629      	mov	r1, r5
 8003d38:	4630      	mov	r0, r6
 8003d3a:	f000 f837 	bl	8003dac <_sbrk_r>
 8003d3e:	1c43      	adds	r3, r0, #1
 8003d40:	d123      	bne.n	8003d8a <_malloc_r+0x92>
 8003d42:	230c      	movs	r3, #12
 8003d44:	4630      	mov	r0, r6
 8003d46:	6033      	str	r3, [r6, #0]
 8003d48:	f000 f866 	bl	8003e18 <__malloc_unlock>
 8003d4c:	e7e3      	b.n	8003d16 <_malloc_r+0x1e>
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	1b5b      	subs	r3, r3, r5
 8003d52:	d417      	bmi.n	8003d84 <_malloc_r+0x8c>
 8003d54:	2b0b      	cmp	r3, #11
 8003d56:	d903      	bls.n	8003d60 <_malloc_r+0x68>
 8003d58:	6023      	str	r3, [r4, #0]
 8003d5a:	441c      	add	r4, r3
 8003d5c:	6025      	str	r5, [r4, #0]
 8003d5e:	e004      	b.n	8003d6a <_malloc_r+0x72>
 8003d60:	6863      	ldr	r3, [r4, #4]
 8003d62:	42a2      	cmp	r2, r4
 8003d64:	bf0c      	ite	eq
 8003d66:	600b      	streq	r3, [r1, #0]
 8003d68:	6053      	strne	r3, [r2, #4]
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	f000 f854 	bl	8003e18 <__malloc_unlock>
 8003d70:	f104 000b 	add.w	r0, r4, #11
 8003d74:	1d23      	adds	r3, r4, #4
 8003d76:	f020 0007 	bic.w	r0, r0, #7
 8003d7a:	1ac2      	subs	r2, r0, r3
 8003d7c:	d0cc      	beq.n	8003d18 <_malloc_r+0x20>
 8003d7e:	1a1b      	subs	r3, r3, r0
 8003d80:	50a3      	str	r3, [r4, r2]
 8003d82:	e7c9      	b.n	8003d18 <_malloc_r+0x20>
 8003d84:	4622      	mov	r2, r4
 8003d86:	6864      	ldr	r4, [r4, #4]
 8003d88:	e7cc      	b.n	8003d24 <_malloc_r+0x2c>
 8003d8a:	1cc4      	adds	r4, r0, #3
 8003d8c:	f024 0403 	bic.w	r4, r4, #3
 8003d90:	42a0      	cmp	r0, r4
 8003d92:	d0e3      	beq.n	8003d5c <_malloc_r+0x64>
 8003d94:	1a21      	subs	r1, r4, r0
 8003d96:	4630      	mov	r0, r6
 8003d98:	f000 f808 	bl	8003dac <_sbrk_r>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d1dd      	bne.n	8003d5c <_malloc_r+0x64>
 8003da0:	e7cf      	b.n	8003d42 <_malloc_r+0x4a>
 8003da2:	bf00      	nop
 8003da4:	20000168 	.word	0x20000168
 8003da8:	2000016c 	.word	0x2000016c

08003dac <_sbrk_r>:
 8003dac:	b538      	push	{r3, r4, r5, lr}
 8003dae:	2300      	movs	r3, #0
 8003db0:	4d05      	ldr	r5, [pc, #20]	; (8003dc8 <_sbrk_r+0x1c>)
 8003db2:	4604      	mov	r4, r0
 8003db4:	4608      	mov	r0, r1
 8003db6:	602b      	str	r3, [r5, #0]
 8003db8:	f7fd fd56 	bl	8001868 <_sbrk>
 8003dbc:	1c43      	adds	r3, r0, #1
 8003dbe:	d102      	bne.n	8003dc6 <_sbrk_r+0x1a>
 8003dc0:	682b      	ldr	r3, [r5, #0]
 8003dc2:	b103      	cbz	r3, 8003dc6 <_sbrk_r+0x1a>
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	bd38      	pop	{r3, r4, r5, pc}
 8003dc8:	200005a4 	.word	0x200005a4

08003dcc <siprintf>:
 8003dcc:	b40e      	push	{r1, r2, r3}
 8003dce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dd2:	b500      	push	{lr}
 8003dd4:	b09c      	sub	sp, #112	; 0x70
 8003dd6:	ab1d      	add	r3, sp, #116	; 0x74
 8003dd8:	9002      	str	r0, [sp, #8]
 8003dda:	9006      	str	r0, [sp, #24]
 8003ddc:	9107      	str	r1, [sp, #28]
 8003dde:	9104      	str	r1, [sp, #16]
 8003de0:	4808      	ldr	r0, [pc, #32]	; (8003e04 <siprintf+0x38>)
 8003de2:	4909      	ldr	r1, [pc, #36]	; (8003e08 <siprintf+0x3c>)
 8003de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003de8:	9105      	str	r1, [sp, #20]
 8003dea:	6800      	ldr	r0, [r0, #0]
 8003dec:	a902      	add	r1, sp, #8
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	f000 f874 	bl	8003edc <_svfiprintf_r>
 8003df4:	2200      	movs	r2, #0
 8003df6:	9b02      	ldr	r3, [sp, #8]
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	b01c      	add	sp, #112	; 0x70
 8003dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e00:	b003      	add	sp, #12
 8003e02:	4770      	bx	lr
 8003e04:	20000034 	.word	0x20000034
 8003e08:	ffff0208 	.word	0xffff0208

08003e0c <__malloc_lock>:
 8003e0c:	4801      	ldr	r0, [pc, #4]	; (8003e14 <__malloc_lock+0x8>)
 8003e0e:	f000 bafb 	b.w	8004408 <__retarget_lock_acquire_recursive>
 8003e12:	bf00      	nop
 8003e14:	200005ac 	.word	0x200005ac

08003e18 <__malloc_unlock>:
 8003e18:	4801      	ldr	r0, [pc, #4]	; (8003e20 <__malloc_unlock+0x8>)
 8003e1a:	f000 baf6 	b.w	800440a <__retarget_lock_release_recursive>
 8003e1e:	bf00      	nop
 8003e20:	200005ac 	.word	0x200005ac

08003e24 <__ssputs_r>:
 8003e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e28:	688e      	ldr	r6, [r1, #8]
 8003e2a:	4682      	mov	sl, r0
 8003e2c:	429e      	cmp	r6, r3
 8003e2e:	460c      	mov	r4, r1
 8003e30:	4690      	mov	r8, r2
 8003e32:	461f      	mov	r7, r3
 8003e34:	d838      	bhi.n	8003ea8 <__ssputs_r+0x84>
 8003e36:	898a      	ldrh	r2, [r1, #12]
 8003e38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e3c:	d032      	beq.n	8003ea4 <__ssputs_r+0x80>
 8003e3e:	6825      	ldr	r5, [r4, #0]
 8003e40:	6909      	ldr	r1, [r1, #16]
 8003e42:	3301      	adds	r3, #1
 8003e44:	eba5 0901 	sub.w	r9, r5, r1
 8003e48:	6965      	ldr	r5, [r4, #20]
 8003e4a:	444b      	add	r3, r9
 8003e4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e54:	106d      	asrs	r5, r5, #1
 8003e56:	429d      	cmp	r5, r3
 8003e58:	bf38      	it	cc
 8003e5a:	461d      	movcc	r5, r3
 8003e5c:	0553      	lsls	r3, r2, #21
 8003e5e:	d531      	bpl.n	8003ec4 <__ssputs_r+0xa0>
 8003e60:	4629      	mov	r1, r5
 8003e62:	f7ff ff49 	bl	8003cf8 <_malloc_r>
 8003e66:	4606      	mov	r6, r0
 8003e68:	b950      	cbnz	r0, 8003e80 <__ssputs_r+0x5c>
 8003e6a:	230c      	movs	r3, #12
 8003e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e70:	f8ca 3000 	str.w	r3, [sl]
 8003e74:	89a3      	ldrh	r3, [r4, #12]
 8003e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e7a:	81a3      	strh	r3, [r4, #12]
 8003e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e80:	464a      	mov	r2, r9
 8003e82:	6921      	ldr	r1, [r4, #16]
 8003e84:	f000 fad0 	bl	8004428 <memcpy>
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e92:	81a3      	strh	r3, [r4, #12]
 8003e94:	6126      	str	r6, [r4, #16]
 8003e96:	444e      	add	r6, r9
 8003e98:	6026      	str	r6, [r4, #0]
 8003e9a:	463e      	mov	r6, r7
 8003e9c:	6165      	str	r5, [r4, #20]
 8003e9e:	eba5 0509 	sub.w	r5, r5, r9
 8003ea2:	60a5      	str	r5, [r4, #8]
 8003ea4:	42be      	cmp	r6, r7
 8003ea6:	d900      	bls.n	8003eaa <__ssputs_r+0x86>
 8003ea8:	463e      	mov	r6, r7
 8003eaa:	4632      	mov	r2, r6
 8003eac:	4641      	mov	r1, r8
 8003eae:	6820      	ldr	r0, [r4, #0]
 8003eb0:	f000 fac8 	bl	8004444 <memmove>
 8003eb4:	68a3      	ldr	r3, [r4, #8]
 8003eb6:	6822      	ldr	r2, [r4, #0]
 8003eb8:	1b9b      	subs	r3, r3, r6
 8003eba:	4432      	add	r2, r6
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	60a3      	str	r3, [r4, #8]
 8003ec0:	6022      	str	r2, [r4, #0]
 8003ec2:	e7db      	b.n	8003e7c <__ssputs_r+0x58>
 8003ec4:	462a      	mov	r2, r5
 8003ec6:	f000 fad7 	bl	8004478 <_realloc_r>
 8003eca:	4606      	mov	r6, r0
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d1e1      	bne.n	8003e94 <__ssputs_r+0x70>
 8003ed0:	4650      	mov	r0, sl
 8003ed2:	6921      	ldr	r1, [r4, #16]
 8003ed4:	f7ff fec4 	bl	8003c60 <_free_r>
 8003ed8:	e7c7      	b.n	8003e6a <__ssputs_r+0x46>
	...

08003edc <_svfiprintf_r>:
 8003edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee0:	4698      	mov	r8, r3
 8003ee2:	898b      	ldrh	r3, [r1, #12]
 8003ee4:	4607      	mov	r7, r0
 8003ee6:	061b      	lsls	r3, r3, #24
 8003ee8:	460d      	mov	r5, r1
 8003eea:	4614      	mov	r4, r2
 8003eec:	b09d      	sub	sp, #116	; 0x74
 8003eee:	d50e      	bpl.n	8003f0e <_svfiprintf_r+0x32>
 8003ef0:	690b      	ldr	r3, [r1, #16]
 8003ef2:	b963      	cbnz	r3, 8003f0e <_svfiprintf_r+0x32>
 8003ef4:	2140      	movs	r1, #64	; 0x40
 8003ef6:	f7ff feff 	bl	8003cf8 <_malloc_r>
 8003efa:	6028      	str	r0, [r5, #0]
 8003efc:	6128      	str	r0, [r5, #16]
 8003efe:	b920      	cbnz	r0, 8003f0a <_svfiprintf_r+0x2e>
 8003f00:	230c      	movs	r3, #12
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	f04f 30ff 	mov.w	r0, #4294967295
 8003f08:	e0d1      	b.n	80040ae <_svfiprintf_r+0x1d2>
 8003f0a:	2340      	movs	r3, #64	; 0x40
 8003f0c:	616b      	str	r3, [r5, #20]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	9309      	str	r3, [sp, #36]	; 0x24
 8003f12:	2320      	movs	r3, #32
 8003f14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f18:	2330      	movs	r3, #48	; 0x30
 8003f1a:	f04f 0901 	mov.w	r9, #1
 8003f1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80040c8 <_svfiprintf_r+0x1ec>
 8003f26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f2a:	4623      	mov	r3, r4
 8003f2c:	469a      	mov	sl, r3
 8003f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f32:	b10a      	cbz	r2, 8003f38 <_svfiprintf_r+0x5c>
 8003f34:	2a25      	cmp	r2, #37	; 0x25
 8003f36:	d1f9      	bne.n	8003f2c <_svfiprintf_r+0x50>
 8003f38:	ebba 0b04 	subs.w	fp, sl, r4
 8003f3c:	d00b      	beq.n	8003f56 <_svfiprintf_r+0x7a>
 8003f3e:	465b      	mov	r3, fp
 8003f40:	4622      	mov	r2, r4
 8003f42:	4629      	mov	r1, r5
 8003f44:	4638      	mov	r0, r7
 8003f46:	f7ff ff6d 	bl	8003e24 <__ssputs_r>
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	f000 80aa 	beq.w	80040a4 <_svfiprintf_r+0x1c8>
 8003f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f52:	445a      	add	r2, fp
 8003f54:	9209      	str	r2, [sp, #36]	; 0x24
 8003f56:	f89a 3000 	ldrb.w	r3, [sl]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80a2 	beq.w	80040a4 <_svfiprintf_r+0x1c8>
 8003f60:	2300      	movs	r3, #0
 8003f62:	f04f 32ff 	mov.w	r2, #4294967295
 8003f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f6a:	f10a 0a01 	add.w	sl, sl, #1
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	9307      	str	r3, [sp, #28]
 8003f72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f76:	931a      	str	r3, [sp, #104]	; 0x68
 8003f78:	4654      	mov	r4, sl
 8003f7a:	2205      	movs	r2, #5
 8003f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f80:	4851      	ldr	r0, [pc, #324]	; (80040c8 <_svfiprintf_r+0x1ec>)
 8003f82:	f000 fa43 	bl	800440c <memchr>
 8003f86:	9a04      	ldr	r2, [sp, #16]
 8003f88:	b9d8      	cbnz	r0, 8003fc2 <_svfiprintf_r+0xe6>
 8003f8a:	06d0      	lsls	r0, r2, #27
 8003f8c:	bf44      	itt	mi
 8003f8e:	2320      	movmi	r3, #32
 8003f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f94:	0711      	lsls	r1, r2, #28
 8003f96:	bf44      	itt	mi
 8003f98:	232b      	movmi	r3, #43	; 0x2b
 8003f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8003fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8003fa4:	d015      	beq.n	8003fd2 <_svfiprintf_r+0xf6>
 8003fa6:	4654      	mov	r4, sl
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f04f 0c0a 	mov.w	ip, #10
 8003fae:	9a07      	ldr	r2, [sp, #28]
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fb6:	3b30      	subs	r3, #48	; 0x30
 8003fb8:	2b09      	cmp	r3, #9
 8003fba:	d94e      	bls.n	800405a <_svfiprintf_r+0x17e>
 8003fbc:	b1b0      	cbz	r0, 8003fec <_svfiprintf_r+0x110>
 8003fbe:	9207      	str	r2, [sp, #28]
 8003fc0:	e014      	b.n	8003fec <_svfiprintf_r+0x110>
 8003fc2:	eba0 0308 	sub.w	r3, r0, r8
 8003fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	46a2      	mov	sl, r4
 8003fce:	9304      	str	r3, [sp, #16]
 8003fd0:	e7d2      	b.n	8003f78 <_svfiprintf_r+0x9c>
 8003fd2:	9b03      	ldr	r3, [sp, #12]
 8003fd4:	1d19      	adds	r1, r3, #4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	9103      	str	r1, [sp, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bfbb      	ittet	lt
 8003fde:	425b      	neglt	r3, r3
 8003fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8003fe4:	9307      	strge	r3, [sp, #28]
 8003fe6:	9307      	strlt	r3, [sp, #28]
 8003fe8:	bfb8      	it	lt
 8003fea:	9204      	strlt	r2, [sp, #16]
 8003fec:	7823      	ldrb	r3, [r4, #0]
 8003fee:	2b2e      	cmp	r3, #46	; 0x2e
 8003ff0:	d10c      	bne.n	800400c <_svfiprintf_r+0x130>
 8003ff2:	7863      	ldrb	r3, [r4, #1]
 8003ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ff6:	d135      	bne.n	8004064 <_svfiprintf_r+0x188>
 8003ff8:	9b03      	ldr	r3, [sp, #12]
 8003ffa:	3402      	adds	r4, #2
 8003ffc:	1d1a      	adds	r2, r3, #4
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	9203      	str	r2, [sp, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	bfb8      	it	lt
 8004006:	f04f 33ff 	movlt.w	r3, #4294967295
 800400a:	9305      	str	r3, [sp, #20]
 800400c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040d8 <_svfiprintf_r+0x1fc>
 8004010:	2203      	movs	r2, #3
 8004012:	4650      	mov	r0, sl
 8004014:	7821      	ldrb	r1, [r4, #0]
 8004016:	f000 f9f9 	bl	800440c <memchr>
 800401a:	b140      	cbz	r0, 800402e <_svfiprintf_r+0x152>
 800401c:	2340      	movs	r3, #64	; 0x40
 800401e:	eba0 000a 	sub.w	r0, r0, sl
 8004022:	fa03 f000 	lsl.w	r0, r3, r0
 8004026:	9b04      	ldr	r3, [sp, #16]
 8004028:	3401      	adds	r4, #1
 800402a:	4303      	orrs	r3, r0
 800402c:	9304      	str	r3, [sp, #16]
 800402e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004032:	2206      	movs	r2, #6
 8004034:	4825      	ldr	r0, [pc, #148]	; (80040cc <_svfiprintf_r+0x1f0>)
 8004036:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800403a:	f000 f9e7 	bl	800440c <memchr>
 800403e:	2800      	cmp	r0, #0
 8004040:	d038      	beq.n	80040b4 <_svfiprintf_r+0x1d8>
 8004042:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <_svfiprintf_r+0x1f4>)
 8004044:	bb1b      	cbnz	r3, 800408e <_svfiprintf_r+0x1b2>
 8004046:	9b03      	ldr	r3, [sp, #12]
 8004048:	3307      	adds	r3, #7
 800404a:	f023 0307 	bic.w	r3, r3, #7
 800404e:	3308      	adds	r3, #8
 8004050:	9303      	str	r3, [sp, #12]
 8004052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004054:	4433      	add	r3, r6
 8004056:	9309      	str	r3, [sp, #36]	; 0x24
 8004058:	e767      	b.n	8003f2a <_svfiprintf_r+0x4e>
 800405a:	460c      	mov	r4, r1
 800405c:	2001      	movs	r0, #1
 800405e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004062:	e7a5      	b.n	8003fb0 <_svfiprintf_r+0xd4>
 8004064:	2300      	movs	r3, #0
 8004066:	f04f 0c0a 	mov.w	ip, #10
 800406a:	4619      	mov	r1, r3
 800406c:	3401      	adds	r4, #1
 800406e:	9305      	str	r3, [sp, #20]
 8004070:	4620      	mov	r0, r4
 8004072:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004076:	3a30      	subs	r2, #48	; 0x30
 8004078:	2a09      	cmp	r2, #9
 800407a:	d903      	bls.n	8004084 <_svfiprintf_r+0x1a8>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0c5      	beq.n	800400c <_svfiprintf_r+0x130>
 8004080:	9105      	str	r1, [sp, #20]
 8004082:	e7c3      	b.n	800400c <_svfiprintf_r+0x130>
 8004084:	4604      	mov	r4, r0
 8004086:	2301      	movs	r3, #1
 8004088:	fb0c 2101 	mla	r1, ip, r1, r2
 800408c:	e7f0      	b.n	8004070 <_svfiprintf_r+0x194>
 800408e:	ab03      	add	r3, sp, #12
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	462a      	mov	r2, r5
 8004094:	4638      	mov	r0, r7
 8004096:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <_svfiprintf_r+0x1f8>)
 8004098:	a904      	add	r1, sp, #16
 800409a:	f3af 8000 	nop.w
 800409e:	1c42      	adds	r2, r0, #1
 80040a0:	4606      	mov	r6, r0
 80040a2:	d1d6      	bne.n	8004052 <_svfiprintf_r+0x176>
 80040a4:	89ab      	ldrh	r3, [r5, #12]
 80040a6:	065b      	lsls	r3, r3, #25
 80040a8:	f53f af2c 	bmi.w	8003f04 <_svfiprintf_r+0x28>
 80040ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040ae:	b01d      	add	sp, #116	; 0x74
 80040b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b4:	ab03      	add	r3, sp, #12
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	462a      	mov	r2, r5
 80040ba:	4638      	mov	r0, r7
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <_svfiprintf_r+0x1f8>)
 80040be:	a904      	add	r1, sp, #16
 80040c0:	f000 f87c 	bl	80041bc <_printf_i>
 80040c4:	e7eb      	b.n	800409e <_svfiprintf_r+0x1c2>
 80040c6:	bf00      	nop
 80040c8:	08004546 	.word	0x08004546
 80040cc:	08004550 	.word	0x08004550
 80040d0:	00000000 	.word	0x00000000
 80040d4:	08003e25 	.word	0x08003e25
 80040d8:	0800454c 	.word	0x0800454c

080040dc <_printf_common>:
 80040dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e0:	4616      	mov	r6, r2
 80040e2:	4699      	mov	r9, r3
 80040e4:	688a      	ldr	r2, [r1, #8]
 80040e6:	690b      	ldr	r3, [r1, #16]
 80040e8:	4607      	mov	r7, r0
 80040ea:	4293      	cmp	r3, r2
 80040ec:	bfb8      	it	lt
 80040ee:	4613      	movlt	r3, r2
 80040f0:	6033      	str	r3, [r6, #0]
 80040f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040f6:	460c      	mov	r4, r1
 80040f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040fc:	b10a      	cbz	r2, 8004102 <_printf_common+0x26>
 80040fe:	3301      	adds	r3, #1
 8004100:	6033      	str	r3, [r6, #0]
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	0699      	lsls	r1, r3, #26
 8004106:	bf42      	ittt	mi
 8004108:	6833      	ldrmi	r3, [r6, #0]
 800410a:	3302      	addmi	r3, #2
 800410c:	6033      	strmi	r3, [r6, #0]
 800410e:	6825      	ldr	r5, [r4, #0]
 8004110:	f015 0506 	ands.w	r5, r5, #6
 8004114:	d106      	bne.n	8004124 <_printf_common+0x48>
 8004116:	f104 0a19 	add.w	sl, r4, #25
 800411a:	68e3      	ldr	r3, [r4, #12]
 800411c:	6832      	ldr	r2, [r6, #0]
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	42ab      	cmp	r3, r5
 8004122:	dc28      	bgt.n	8004176 <_printf_common+0x9a>
 8004124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004128:	1e13      	subs	r3, r2, #0
 800412a:	6822      	ldr	r2, [r4, #0]
 800412c:	bf18      	it	ne
 800412e:	2301      	movne	r3, #1
 8004130:	0692      	lsls	r2, r2, #26
 8004132:	d42d      	bmi.n	8004190 <_printf_common+0xb4>
 8004134:	4649      	mov	r1, r9
 8004136:	4638      	mov	r0, r7
 8004138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800413c:	47c0      	blx	r8
 800413e:	3001      	adds	r0, #1
 8004140:	d020      	beq.n	8004184 <_printf_common+0xa8>
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	68e5      	ldr	r5, [r4, #12]
 8004146:	f003 0306 	and.w	r3, r3, #6
 800414a:	2b04      	cmp	r3, #4
 800414c:	bf18      	it	ne
 800414e:	2500      	movne	r5, #0
 8004150:	6832      	ldr	r2, [r6, #0]
 8004152:	f04f 0600 	mov.w	r6, #0
 8004156:	68a3      	ldr	r3, [r4, #8]
 8004158:	bf08      	it	eq
 800415a:	1aad      	subeq	r5, r5, r2
 800415c:	6922      	ldr	r2, [r4, #16]
 800415e:	bf08      	it	eq
 8004160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004164:	4293      	cmp	r3, r2
 8004166:	bfc4      	itt	gt
 8004168:	1a9b      	subgt	r3, r3, r2
 800416a:	18ed      	addgt	r5, r5, r3
 800416c:	341a      	adds	r4, #26
 800416e:	42b5      	cmp	r5, r6
 8004170:	d11a      	bne.n	80041a8 <_printf_common+0xcc>
 8004172:	2000      	movs	r0, #0
 8004174:	e008      	b.n	8004188 <_printf_common+0xac>
 8004176:	2301      	movs	r3, #1
 8004178:	4652      	mov	r2, sl
 800417a:	4649      	mov	r1, r9
 800417c:	4638      	mov	r0, r7
 800417e:	47c0      	blx	r8
 8004180:	3001      	adds	r0, #1
 8004182:	d103      	bne.n	800418c <_printf_common+0xb0>
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800418c:	3501      	adds	r5, #1
 800418e:	e7c4      	b.n	800411a <_printf_common+0x3e>
 8004190:	2030      	movs	r0, #48	; 0x30
 8004192:	18e1      	adds	r1, r4, r3
 8004194:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800419e:	4422      	add	r2, r4
 80041a0:	3302      	adds	r3, #2
 80041a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041a6:	e7c5      	b.n	8004134 <_printf_common+0x58>
 80041a8:	2301      	movs	r3, #1
 80041aa:	4622      	mov	r2, r4
 80041ac:	4649      	mov	r1, r9
 80041ae:	4638      	mov	r0, r7
 80041b0:	47c0      	blx	r8
 80041b2:	3001      	adds	r0, #1
 80041b4:	d0e6      	beq.n	8004184 <_printf_common+0xa8>
 80041b6:	3601      	adds	r6, #1
 80041b8:	e7d9      	b.n	800416e <_printf_common+0x92>
	...

080041bc <_printf_i>:
 80041bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c0:	460c      	mov	r4, r1
 80041c2:	7e27      	ldrb	r7, [r4, #24]
 80041c4:	4691      	mov	r9, r2
 80041c6:	2f78      	cmp	r7, #120	; 0x78
 80041c8:	4680      	mov	r8, r0
 80041ca:	469a      	mov	sl, r3
 80041cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041d2:	d807      	bhi.n	80041e4 <_printf_i+0x28>
 80041d4:	2f62      	cmp	r7, #98	; 0x62
 80041d6:	d80a      	bhi.n	80041ee <_printf_i+0x32>
 80041d8:	2f00      	cmp	r7, #0
 80041da:	f000 80d9 	beq.w	8004390 <_printf_i+0x1d4>
 80041de:	2f58      	cmp	r7, #88	; 0x58
 80041e0:	f000 80a4 	beq.w	800432c <_printf_i+0x170>
 80041e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041ec:	e03a      	b.n	8004264 <_printf_i+0xa8>
 80041ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041f2:	2b15      	cmp	r3, #21
 80041f4:	d8f6      	bhi.n	80041e4 <_printf_i+0x28>
 80041f6:	a001      	add	r0, pc, #4	; (adr r0, 80041fc <_printf_i+0x40>)
 80041f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041fc:	08004255 	.word	0x08004255
 8004200:	08004269 	.word	0x08004269
 8004204:	080041e5 	.word	0x080041e5
 8004208:	080041e5 	.word	0x080041e5
 800420c:	080041e5 	.word	0x080041e5
 8004210:	080041e5 	.word	0x080041e5
 8004214:	08004269 	.word	0x08004269
 8004218:	080041e5 	.word	0x080041e5
 800421c:	080041e5 	.word	0x080041e5
 8004220:	080041e5 	.word	0x080041e5
 8004224:	080041e5 	.word	0x080041e5
 8004228:	08004377 	.word	0x08004377
 800422c:	08004299 	.word	0x08004299
 8004230:	08004359 	.word	0x08004359
 8004234:	080041e5 	.word	0x080041e5
 8004238:	080041e5 	.word	0x080041e5
 800423c:	08004399 	.word	0x08004399
 8004240:	080041e5 	.word	0x080041e5
 8004244:	08004299 	.word	0x08004299
 8004248:	080041e5 	.word	0x080041e5
 800424c:	080041e5 	.word	0x080041e5
 8004250:	08004361 	.word	0x08004361
 8004254:	680b      	ldr	r3, [r1, #0]
 8004256:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800425a:	1d1a      	adds	r2, r3, #4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	600a      	str	r2, [r1, #0]
 8004260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004264:	2301      	movs	r3, #1
 8004266:	e0a4      	b.n	80043b2 <_printf_i+0x1f6>
 8004268:	6825      	ldr	r5, [r4, #0]
 800426a:	6808      	ldr	r0, [r1, #0]
 800426c:	062e      	lsls	r6, r5, #24
 800426e:	f100 0304 	add.w	r3, r0, #4
 8004272:	d50a      	bpl.n	800428a <_printf_i+0xce>
 8004274:	6805      	ldr	r5, [r0, #0]
 8004276:	600b      	str	r3, [r1, #0]
 8004278:	2d00      	cmp	r5, #0
 800427a:	da03      	bge.n	8004284 <_printf_i+0xc8>
 800427c:	232d      	movs	r3, #45	; 0x2d
 800427e:	426d      	negs	r5, r5
 8004280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004284:	230a      	movs	r3, #10
 8004286:	485e      	ldr	r0, [pc, #376]	; (8004400 <_printf_i+0x244>)
 8004288:	e019      	b.n	80042be <_printf_i+0x102>
 800428a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800428e:	6805      	ldr	r5, [r0, #0]
 8004290:	600b      	str	r3, [r1, #0]
 8004292:	bf18      	it	ne
 8004294:	b22d      	sxthne	r5, r5
 8004296:	e7ef      	b.n	8004278 <_printf_i+0xbc>
 8004298:	680b      	ldr	r3, [r1, #0]
 800429a:	6825      	ldr	r5, [r4, #0]
 800429c:	1d18      	adds	r0, r3, #4
 800429e:	6008      	str	r0, [r1, #0]
 80042a0:	0628      	lsls	r0, r5, #24
 80042a2:	d501      	bpl.n	80042a8 <_printf_i+0xec>
 80042a4:	681d      	ldr	r5, [r3, #0]
 80042a6:	e002      	b.n	80042ae <_printf_i+0xf2>
 80042a8:	0669      	lsls	r1, r5, #25
 80042aa:	d5fb      	bpl.n	80042a4 <_printf_i+0xe8>
 80042ac:	881d      	ldrh	r5, [r3, #0]
 80042ae:	2f6f      	cmp	r7, #111	; 0x6f
 80042b0:	bf0c      	ite	eq
 80042b2:	2308      	moveq	r3, #8
 80042b4:	230a      	movne	r3, #10
 80042b6:	4852      	ldr	r0, [pc, #328]	; (8004400 <_printf_i+0x244>)
 80042b8:	2100      	movs	r1, #0
 80042ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042be:	6866      	ldr	r6, [r4, #4]
 80042c0:	2e00      	cmp	r6, #0
 80042c2:	bfa8      	it	ge
 80042c4:	6821      	ldrge	r1, [r4, #0]
 80042c6:	60a6      	str	r6, [r4, #8]
 80042c8:	bfa4      	itt	ge
 80042ca:	f021 0104 	bicge.w	r1, r1, #4
 80042ce:	6021      	strge	r1, [r4, #0]
 80042d0:	b90d      	cbnz	r5, 80042d6 <_printf_i+0x11a>
 80042d2:	2e00      	cmp	r6, #0
 80042d4:	d04d      	beq.n	8004372 <_printf_i+0x1b6>
 80042d6:	4616      	mov	r6, r2
 80042d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80042dc:	fb03 5711 	mls	r7, r3, r1, r5
 80042e0:	5dc7      	ldrb	r7, [r0, r7]
 80042e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042e6:	462f      	mov	r7, r5
 80042e8:	42bb      	cmp	r3, r7
 80042ea:	460d      	mov	r5, r1
 80042ec:	d9f4      	bls.n	80042d8 <_printf_i+0x11c>
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d10b      	bne.n	800430a <_printf_i+0x14e>
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	07df      	lsls	r7, r3, #31
 80042f6:	d508      	bpl.n	800430a <_printf_i+0x14e>
 80042f8:	6923      	ldr	r3, [r4, #16]
 80042fa:	6861      	ldr	r1, [r4, #4]
 80042fc:	4299      	cmp	r1, r3
 80042fe:	bfde      	ittt	le
 8004300:	2330      	movle	r3, #48	; 0x30
 8004302:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004306:	f106 36ff 	addle.w	r6, r6, #4294967295
 800430a:	1b92      	subs	r2, r2, r6
 800430c:	6122      	str	r2, [r4, #16]
 800430e:	464b      	mov	r3, r9
 8004310:	4621      	mov	r1, r4
 8004312:	4640      	mov	r0, r8
 8004314:	f8cd a000 	str.w	sl, [sp]
 8004318:	aa03      	add	r2, sp, #12
 800431a:	f7ff fedf 	bl	80040dc <_printf_common>
 800431e:	3001      	adds	r0, #1
 8004320:	d14c      	bne.n	80043bc <_printf_i+0x200>
 8004322:	f04f 30ff 	mov.w	r0, #4294967295
 8004326:	b004      	add	sp, #16
 8004328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432c:	4834      	ldr	r0, [pc, #208]	; (8004400 <_printf_i+0x244>)
 800432e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004332:	680e      	ldr	r6, [r1, #0]
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	f856 5b04 	ldr.w	r5, [r6], #4
 800433a:	061f      	lsls	r7, r3, #24
 800433c:	600e      	str	r6, [r1, #0]
 800433e:	d514      	bpl.n	800436a <_printf_i+0x1ae>
 8004340:	07d9      	lsls	r1, r3, #31
 8004342:	bf44      	itt	mi
 8004344:	f043 0320 	orrmi.w	r3, r3, #32
 8004348:	6023      	strmi	r3, [r4, #0]
 800434a:	b91d      	cbnz	r5, 8004354 <_printf_i+0x198>
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	f023 0320 	bic.w	r3, r3, #32
 8004352:	6023      	str	r3, [r4, #0]
 8004354:	2310      	movs	r3, #16
 8004356:	e7af      	b.n	80042b8 <_printf_i+0xfc>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	f043 0320 	orr.w	r3, r3, #32
 800435e:	6023      	str	r3, [r4, #0]
 8004360:	2378      	movs	r3, #120	; 0x78
 8004362:	4828      	ldr	r0, [pc, #160]	; (8004404 <_printf_i+0x248>)
 8004364:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004368:	e7e3      	b.n	8004332 <_printf_i+0x176>
 800436a:	065e      	lsls	r6, r3, #25
 800436c:	bf48      	it	mi
 800436e:	b2ad      	uxthmi	r5, r5
 8004370:	e7e6      	b.n	8004340 <_printf_i+0x184>
 8004372:	4616      	mov	r6, r2
 8004374:	e7bb      	b.n	80042ee <_printf_i+0x132>
 8004376:	680b      	ldr	r3, [r1, #0]
 8004378:	6826      	ldr	r6, [r4, #0]
 800437a:	1d1d      	adds	r5, r3, #4
 800437c:	6960      	ldr	r0, [r4, #20]
 800437e:	600d      	str	r5, [r1, #0]
 8004380:	0635      	lsls	r5, r6, #24
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	d501      	bpl.n	800438a <_printf_i+0x1ce>
 8004386:	6018      	str	r0, [r3, #0]
 8004388:	e002      	b.n	8004390 <_printf_i+0x1d4>
 800438a:	0671      	lsls	r1, r6, #25
 800438c:	d5fb      	bpl.n	8004386 <_printf_i+0x1ca>
 800438e:	8018      	strh	r0, [r3, #0]
 8004390:	2300      	movs	r3, #0
 8004392:	4616      	mov	r6, r2
 8004394:	6123      	str	r3, [r4, #16]
 8004396:	e7ba      	b.n	800430e <_printf_i+0x152>
 8004398:	680b      	ldr	r3, [r1, #0]
 800439a:	1d1a      	adds	r2, r3, #4
 800439c:	600a      	str	r2, [r1, #0]
 800439e:	681e      	ldr	r6, [r3, #0]
 80043a0:	2100      	movs	r1, #0
 80043a2:	4630      	mov	r0, r6
 80043a4:	6862      	ldr	r2, [r4, #4]
 80043a6:	f000 f831 	bl	800440c <memchr>
 80043aa:	b108      	cbz	r0, 80043b0 <_printf_i+0x1f4>
 80043ac:	1b80      	subs	r0, r0, r6
 80043ae:	6060      	str	r0, [r4, #4]
 80043b0:	6863      	ldr	r3, [r4, #4]
 80043b2:	6123      	str	r3, [r4, #16]
 80043b4:	2300      	movs	r3, #0
 80043b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043ba:	e7a8      	b.n	800430e <_printf_i+0x152>
 80043bc:	4632      	mov	r2, r6
 80043be:	4649      	mov	r1, r9
 80043c0:	4640      	mov	r0, r8
 80043c2:	6923      	ldr	r3, [r4, #16]
 80043c4:	47d0      	blx	sl
 80043c6:	3001      	adds	r0, #1
 80043c8:	d0ab      	beq.n	8004322 <_printf_i+0x166>
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	079b      	lsls	r3, r3, #30
 80043ce:	d413      	bmi.n	80043f8 <_printf_i+0x23c>
 80043d0:	68e0      	ldr	r0, [r4, #12]
 80043d2:	9b03      	ldr	r3, [sp, #12]
 80043d4:	4298      	cmp	r0, r3
 80043d6:	bfb8      	it	lt
 80043d8:	4618      	movlt	r0, r3
 80043da:	e7a4      	b.n	8004326 <_printf_i+0x16a>
 80043dc:	2301      	movs	r3, #1
 80043de:	4632      	mov	r2, r6
 80043e0:	4649      	mov	r1, r9
 80043e2:	4640      	mov	r0, r8
 80043e4:	47d0      	blx	sl
 80043e6:	3001      	adds	r0, #1
 80043e8:	d09b      	beq.n	8004322 <_printf_i+0x166>
 80043ea:	3501      	adds	r5, #1
 80043ec:	68e3      	ldr	r3, [r4, #12]
 80043ee:	9903      	ldr	r1, [sp, #12]
 80043f0:	1a5b      	subs	r3, r3, r1
 80043f2:	42ab      	cmp	r3, r5
 80043f4:	dcf2      	bgt.n	80043dc <_printf_i+0x220>
 80043f6:	e7eb      	b.n	80043d0 <_printf_i+0x214>
 80043f8:	2500      	movs	r5, #0
 80043fa:	f104 0619 	add.w	r6, r4, #25
 80043fe:	e7f5      	b.n	80043ec <_printf_i+0x230>
 8004400:	08004557 	.word	0x08004557
 8004404:	08004568 	.word	0x08004568

08004408 <__retarget_lock_acquire_recursive>:
 8004408:	4770      	bx	lr

0800440a <__retarget_lock_release_recursive>:
 800440a:	4770      	bx	lr

0800440c <memchr>:
 800440c:	4603      	mov	r3, r0
 800440e:	b510      	push	{r4, lr}
 8004410:	b2c9      	uxtb	r1, r1
 8004412:	4402      	add	r2, r0
 8004414:	4293      	cmp	r3, r2
 8004416:	4618      	mov	r0, r3
 8004418:	d101      	bne.n	800441e <memchr+0x12>
 800441a:	2000      	movs	r0, #0
 800441c:	e003      	b.n	8004426 <memchr+0x1a>
 800441e:	7804      	ldrb	r4, [r0, #0]
 8004420:	3301      	adds	r3, #1
 8004422:	428c      	cmp	r4, r1
 8004424:	d1f6      	bne.n	8004414 <memchr+0x8>
 8004426:	bd10      	pop	{r4, pc}

08004428 <memcpy>:
 8004428:	440a      	add	r2, r1
 800442a:	4291      	cmp	r1, r2
 800442c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004430:	d100      	bne.n	8004434 <memcpy+0xc>
 8004432:	4770      	bx	lr
 8004434:	b510      	push	{r4, lr}
 8004436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800443a:	4291      	cmp	r1, r2
 800443c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004440:	d1f9      	bne.n	8004436 <memcpy+0xe>
 8004442:	bd10      	pop	{r4, pc}

08004444 <memmove>:
 8004444:	4288      	cmp	r0, r1
 8004446:	b510      	push	{r4, lr}
 8004448:	eb01 0402 	add.w	r4, r1, r2
 800444c:	d902      	bls.n	8004454 <memmove+0x10>
 800444e:	4284      	cmp	r4, r0
 8004450:	4623      	mov	r3, r4
 8004452:	d807      	bhi.n	8004464 <memmove+0x20>
 8004454:	1e43      	subs	r3, r0, #1
 8004456:	42a1      	cmp	r1, r4
 8004458:	d008      	beq.n	800446c <memmove+0x28>
 800445a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800445e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004462:	e7f8      	b.n	8004456 <memmove+0x12>
 8004464:	4601      	mov	r1, r0
 8004466:	4402      	add	r2, r0
 8004468:	428a      	cmp	r2, r1
 800446a:	d100      	bne.n	800446e <memmove+0x2a>
 800446c:	bd10      	pop	{r4, pc}
 800446e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004472:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004476:	e7f7      	b.n	8004468 <memmove+0x24>

08004478 <_realloc_r>:
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	4607      	mov	r7, r0
 800447c:	4614      	mov	r4, r2
 800447e:	460e      	mov	r6, r1
 8004480:	b921      	cbnz	r1, 800448c <_realloc_r+0x14>
 8004482:	4611      	mov	r1, r2
 8004484:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004488:	f7ff bc36 	b.w	8003cf8 <_malloc_r>
 800448c:	b922      	cbnz	r2, 8004498 <_realloc_r+0x20>
 800448e:	f7ff fbe7 	bl	8003c60 <_free_r>
 8004492:	4625      	mov	r5, r4
 8004494:	4628      	mov	r0, r5
 8004496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004498:	f000 f814 	bl	80044c4 <_malloc_usable_size_r>
 800449c:	42a0      	cmp	r0, r4
 800449e:	d20f      	bcs.n	80044c0 <_realloc_r+0x48>
 80044a0:	4621      	mov	r1, r4
 80044a2:	4638      	mov	r0, r7
 80044a4:	f7ff fc28 	bl	8003cf8 <_malloc_r>
 80044a8:	4605      	mov	r5, r0
 80044aa:	2800      	cmp	r0, #0
 80044ac:	d0f2      	beq.n	8004494 <_realloc_r+0x1c>
 80044ae:	4631      	mov	r1, r6
 80044b0:	4622      	mov	r2, r4
 80044b2:	f7ff ffb9 	bl	8004428 <memcpy>
 80044b6:	4631      	mov	r1, r6
 80044b8:	4638      	mov	r0, r7
 80044ba:	f7ff fbd1 	bl	8003c60 <_free_r>
 80044be:	e7e9      	b.n	8004494 <_realloc_r+0x1c>
 80044c0:	4635      	mov	r5, r6
 80044c2:	e7e7      	b.n	8004494 <_realloc_r+0x1c>

080044c4 <_malloc_usable_size_r>:
 80044c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044c8:	1f18      	subs	r0, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	bfbc      	itt	lt
 80044ce:	580b      	ldrlt	r3, [r1, r0]
 80044d0:	18c0      	addlt	r0, r0, r3
 80044d2:	4770      	bx	lr

080044d4 <_init>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr

080044e0 <_fini>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr
