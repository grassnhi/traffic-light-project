
traffic-light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cd4  08003cd4  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08003cd4  08003cd4  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cd4  08003cd4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cd8  08003cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08003cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000098  08003d74  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08003d74  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fcc  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286f  00000000  00000000  0003308d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00035900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  000365f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d1f  00000000  00000000  000371b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010823  00000000  00000000  0004fecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b135  00000000  00000000  000606f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb827  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003754  00000000  00000000  000eb87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c4c 	.word	0x08003c4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08003c4c 	.word	0x08003c4c

0800014c <displayUART>:


#include "stdio.h"
#include "main.h"

void displayUART(int counter, UART_HandleTypeDef huart2) {
 800014c:	b084      	sub	sp, #16
 800014e:	b580      	push	{r7, lr}
 8000150:	b084      	sub	sp, #16
 8000152:	af00      	add	r7, sp, #0
 8000154:	6078      	str	r0, [r7, #4]
 8000156:	f107 001c 	add.w	r0, r7, #28
 800015a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int t = counter / 10;
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	4a13      	ldr	r2, [pc, #76]	; (80001b0 <displayUART+0x64>)
 8000162:	fb82 1203 	smull	r1, r2, r2, r3
 8000166:	1092      	asrs	r2, r2, #2
 8000168:	17db      	asrs	r3, r3, #31
 800016a:	1ad3      	subs	r3, r2, r3
 800016c:	60fb      	str	r3, [r7, #12]
	int u = counter % 10;
 800016e:	687a      	ldr	r2, [r7, #4]
 8000170:	4b0f      	ldr	r3, [pc, #60]	; (80001b0 <displayUART+0x64>)
 8000172:	fb83 1302 	smull	r1, r3, r3, r2
 8000176:	1099      	asrs	r1, r3, #2
 8000178:	17d3      	asrs	r3, r2, #31
 800017a:	1ac9      	subs	r1, r1, r3
 800017c:	460b      	mov	r3, r1
 800017e:	009b      	lsls	r3, r3, #2
 8000180:	440b      	add	r3, r1
 8000182:	005b      	lsls	r3, r3, #1
 8000184:	1ad3      	subs	r3, r2, r3
 8000186:	60bb      	str	r3, [r7, #8]
	sprintf(str, "!7SEG1=%d#\r\n", counter);
 8000188:	687a      	ldr	r2, [r7, #4]
 800018a:	490a      	ldr	r1, [pc, #40]	; (80001b4 <displayUART+0x68>)
 800018c:	480a      	ldr	r0, [pc, #40]	; (80001b8 <displayUART+0x6c>)
 800018e:	f003 f923 	bl	80033d8 <siprintf>
	HAL_UART_Transmit(&huart2, (void*)str, sizeof(str), 1000);
 8000192:	f107 001c 	add.w	r0, r7, #28
 8000196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019a:	2232      	movs	r2, #50	; 0x32
 800019c:	4906      	ldr	r1, [pc, #24]	; (80001b8 <displayUART+0x6c>)
 800019e:	f002 ff69 	bl	8003074 <HAL_UART_Transmit>
}
 80001a2:	bf00      	nop
 80001a4:	3710      	adds	r7, #16
 80001a6:	46bd      	mov	sp, r7
 80001a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr
 80001b0:	66666667 	.word	0x66666667
 80001b4:	08003c64 	.word	0x08003c64
 80001b8:	20000184 	.word	0x20000184

080001bc <traffic_light>:
 */

#include "main.h"


void traffic_light(int color) {
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	switch (color) {
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d018      	beq.n	80001fc <traffic_light+0x40>
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	f2c0 8083 	blt.w	80002d8 <traffic_light+0x11c>
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	2b36      	cmp	r3, #54	; 0x36
 80001d6:	dc7f      	bgt.n	80002d8 <traffic_light+0x11c>
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2b33      	cmp	r3, #51	; 0x33
 80001dc:	db7c      	blt.n	80002d8 <traffic_light+0x11c>
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	3b33      	subs	r3, #51	; 0x33
 80001e2:	2b03      	cmp	r3, #3
 80001e4:	d878      	bhi.n	80002d8 <traffic_light+0x11c>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <traffic_light+0x30>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000281 	.word	0x08000281
 80001f0:	080002ad 	.word	0x080002ad
 80001f4:	08000229 	.word	0x08000229
 80001f8:	08000255 	.word	0x08000255
		case INIT:
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000202:	4838      	ldr	r0, [pc, #224]	; (80002e4 <traffic_light+0x128>)
 8000204:	f001 fc07 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 8000208:	2200      	movs	r2, #0
 800020a:	2108      	movs	r1, #8
 800020c:	4836      	ldr	r0, [pc, #216]	; (80002e8 <traffic_light+0x12c>)
 800020e:	f001 fc02 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 8000212:	2200      	movs	r2, #0
 8000214:	2120      	movs	r1, #32
 8000216:	4834      	ldr	r0, [pc, #208]	; (80002e8 <traffic_light+0x12c>)
 8000218:	f001 fbfd 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2110      	movs	r1, #16
 8000220:	4831      	ldr	r0, [pc, #196]	; (80002e8 <traffic_light+0x12c>)
 8000222:	f001 fbf8 	bl	8001a16 <HAL_GPIO_WritePin>
			break;
 8000226:	e058      	b.n	80002da <traffic_light+0x11e>
		case GREEN2:
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, SET);
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800022e:	482d      	ldr	r0, [pc, #180]	; (80002e4 <traffic_light+0x128>)
 8000230:	f001 fbf1 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	2108      	movs	r1, #8
 8000238:	482b      	ldr	r0, [pc, #172]	; (80002e8 <traffic_light+0x12c>)
 800023a:	f001 fbec 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	2120      	movs	r1, #32
 8000242:	4829      	ldr	r0, [pc, #164]	; (80002e8 <traffic_light+0x12c>)
 8000244:	f001 fbe7 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, SET);
 8000248:	2201      	movs	r2, #1
 800024a:	2110      	movs	r1, #16
 800024c:	4826      	ldr	r0, [pc, #152]	; (80002e8 <traffic_light+0x12c>)
 800024e:	f001 fbe2 	bl	8001a16 <HAL_GPIO_WritePin>
			break;
 8000252:	e042      	b.n	80002da <traffic_light+0x11e>
		case AMBER2:
            HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, SET);
 8000254:	2201      	movs	r2, #1
 8000256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025a:	4822      	ldr	r0, [pc, #136]	; (80002e4 <traffic_light+0x128>)
 800025c:	f001 fbdb 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	2108      	movs	r1, #8
 8000264:	4820      	ldr	r0, [pc, #128]	; (80002e8 <traffic_light+0x12c>)
 8000266:	f001 fbd6 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, SET);
 800026a:	2201      	movs	r2, #1
 800026c:	2120      	movs	r1, #32
 800026e:	481e      	ldr	r0, [pc, #120]	; (80002e8 <traffic_light+0x12c>)
 8000270:	f001 fbd1 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, SET);
 8000274:	2201      	movs	r2, #1
 8000276:	2110      	movs	r1, #16
 8000278:	481b      	ldr	r0, [pc, #108]	; (80002e8 <traffic_light+0x12c>)
 800027a:	f001 fbcc 	bl	8001a16 <HAL_GPIO_WritePin>
			break;
 800027e:	e02c      	b.n	80002da <traffic_light+0x11e>
		case GREEN1:
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000286:	4817      	ldr	r0, [pc, #92]	; (80002e4 <traffic_light+0x128>)
 8000288:	f001 fbc5 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2108      	movs	r1, #8
 8000290:	4815      	ldr	r0, [pc, #84]	; (80002e8 <traffic_light+0x12c>)
 8000292:	f001 fbc0 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4813      	ldr	r0, [pc, #76]	; (80002e8 <traffic_light+0x12c>)
 800029c:	f001 fbbb 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2110      	movs	r1, #16
 80002a4:	4810      	ldr	r0, [pc, #64]	; (80002e8 <traffic_light+0x12c>)
 80002a6:	f001 fbb6 	bl	8001a16 <HAL_GPIO_WritePin>
			break;
 80002aa:	e016      	b.n	80002da <traffic_light+0x11e>
        case AMBER1:
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b2:	480c      	ldr	r0, [pc, #48]	; (80002e4 <traffic_light+0x128>)
 80002b4:	f001 fbaf 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2108      	movs	r1, #8
 80002bc:	480a      	ldr	r0, [pc, #40]	; (80002e8 <traffic_light+0x12c>)
 80002be:	f001 fbaa 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	2120      	movs	r1, #32
 80002c6:	4808      	ldr	r0, [pc, #32]	; (80002e8 <traffic_light+0x12c>)
 80002c8:	f001 fba5 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2110      	movs	r1, #16
 80002d0:	4805      	ldr	r0, [pc, #20]	; (80002e8 <traffic_light+0x12c>)
 80002d2:	f001 fba0 	bl	8001a16 <HAL_GPIO_WritePin>
			break;
 80002d6:	e000      	b.n	80002da <traffic_light+0x11e>
		default:
			break;
 80002d8:	bf00      	nop
	}
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40010800 	.word	0x40010800
 80002e8:	40010c00 	.word	0x40010c00

080002ec <set_blinky>:

int toggle = 0;
void set_blinky(int color) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	switch (color) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b21      	cmp	r3, #33	; 0x21
 80002f8:	d055      	beq.n	80003a6 <set_blinky+0xba>
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b21      	cmp	r3, #33	; 0x21
 80002fe:	dc66      	bgt.n	80003ce <set_blinky+0xe2>
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d003      	beq.n	800030e <set_blinky+0x22>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2b1f      	cmp	r3, #31
 800030a:	d016      	beq.n	800033a <set_blinky+0x4e>
            HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
            HAL_GPIO_TogglePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin);
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
			break;
		default:
			break;
 800030c:	e05f      	b.n	80003ce <set_blinky+0xe2>
			HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000314:	4830      	ldr	r0, [pc, #192]	; (80003d8 <set_blinky+0xec>)
 8000316:	f001 fb7e 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2108      	movs	r1, #8
 800031e:	482f      	ldr	r0, [pc, #188]	; (80003dc <set_blinky+0xf0>)
 8000320:	f001 fb79 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	2120      	movs	r1, #32
 8000328:	482c      	ldr	r0, [pc, #176]	; (80003dc <set_blinky+0xf0>)
 800032a:	f001 fb74 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	2110      	movs	r1, #16
 8000332:	482a      	ldr	r0, [pc, #168]	; (80003dc <set_blinky+0xf0>)
 8000334:	f001 fb6f 	bl	8001a16 <HAL_GPIO_WritePin>
            break;
 8000338:	e04a      	b.n	80003d0 <set_blinky+0xe4>
			if (toggle == 0) {
 800033a:	4b29      	ldr	r3, [pc, #164]	; (80003e0 <set_blinky+0xf4>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d118      	bne.n	8000374 <set_blinky+0x88>
                HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, SET);
 8000342:	2201      	movs	r2, #1
 8000344:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000348:	4823      	ldr	r0, [pc, #140]	; (80003d8 <set_blinky+0xec>)
 800034a:	f001 fb64 	bl	8001a16 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, SET);
 800034e:	2201      	movs	r2, #1
 8000350:	2108      	movs	r1, #8
 8000352:	4822      	ldr	r0, [pc, #136]	; (80003dc <set_blinky+0xf0>)
 8000354:	f001 fb5f 	bl	8001a16 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, SET);
 8000358:	2201      	movs	r2, #1
 800035a:	2120      	movs	r1, #32
 800035c:	481f      	ldr	r0, [pc, #124]	; (80003dc <set_blinky+0xf0>)
 800035e:	f001 fb5a 	bl	8001a16 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, SET);
 8000362:	2201      	movs	r2, #1
 8000364:	2110      	movs	r1, #16
 8000366:	481d      	ldr	r0, [pc, #116]	; (80003dc <set_blinky+0xf0>)
 8000368:	f001 fb55 	bl	8001a16 <HAL_GPIO_WritePin>
                toggle = 1;
 800036c:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <set_blinky+0xf4>)
 800036e:	2201      	movs	r2, #1
 8000370:	601a      	str	r2, [r3, #0]
			break;
 8000372:	e02d      	b.n	80003d0 <set_blinky+0xe4>
                HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800037a:	4817      	ldr	r0, [pc, #92]	; (80003d8 <set_blinky+0xec>)
 800037c:	f001 fb4b 	bl	8001a16 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin, RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2108      	movs	r1, #8
 8000384:	4815      	ldr	r0, [pc, #84]	; (80003dc <set_blinky+0xf0>)
 8000386:	f001 fb46 	bl	8001a16 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2120      	movs	r1, #32
 800038e:	4813      	ldr	r0, [pc, #76]	; (80003dc <set_blinky+0xf0>)
 8000390:	f001 fb41 	bl	8001a16 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin, RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2110      	movs	r1, #16
 8000398:	4810      	ldr	r0, [pc, #64]	; (80003dc <set_blinky+0xf0>)
 800039a:	f001 fb3c 	bl	8001a16 <HAL_GPIO_WritePin>
                toggle = 0;
 800039e:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <set_blinky+0xf4>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
			break;
 80003a4:	e014      	b.n	80003d0 <set_blinky+0xe4>
			HAL_GPIO_TogglePin(TLIGHT12_GPIO_Port, TLIGHT12_Pin);
 80003a6:	2108      	movs	r1, #8
 80003a8:	480c      	ldr	r0, [pc, #48]	; (80003dc <set_blinky+0xf0>)
 80003aa:	f001 fb4c 	bl	8001a46 <HAL_GPIO_TogglePin>
            HAL_GPIO_WritePin(TLIGHT11_GPIO_Port, TLIGHT11_Pin, RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b4:	4808      	ldr	r0, [pc, #32]	; (80003d8 <set_blinky+0xec>)
 80003b6:	f001 fb2e 	bl	8001a16 <HAL_GPIO_WritePin>
            HAL_GPIO_TogglePin(TLIGHT22_GPIO_Port, TLIGHT22_Pin);
 80003ba:	2110      	movs	r1, #16
 80003bc:	4807      	ldr	r0, [pc, #28]	; (80003dc <set_blinky+0xf0>)
 80003be:	f001 fb42 	bl	8001a46 <HAL_GPIO_TogglePin>
            HAL_GPIO_WritePin(TLIGHT21_GPIO_Port, TLIGHT21_Pin, RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2120      	movs	r1, #32
 80003c6:	4805      	ldr	r0, [pc, #20]	; (80003dc <set_blinky+0xf0>)
 80003c8:	f001 fb25 	bl	8001a16 <HAL_GPIO_WritePin>
			break;
 80003cc:	e000      	b.n	80003d0 <set_blinky+0xe4>
			break;
 80003ce:	bf00      	nop
	}
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40010800 	.word	0x40010800
 80003dc:	40010c00 	.word	0x40010c00
 80003e0:	200000b4 	.word	0x200000b4

080003e4 <fsm_automatic_init>:
 *      Author: PC
 */

#include "fsm_automatic.h"

void fsm_automatic_init(){
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
	current_state = GREEN2;
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <fsm_automatic_init+0x24>)
 80003ea:	2235      	movs	r2, #53	; 0x35
 80003ec:	601a      	str	r2, [r3, #0]
	counter1 = RED;
 80003ee:	4b07      	ldr	r3, [pc, #28]	; (800040c <fsm_automatic_init+0x28>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a07      	ldr	r2, [pc, #28]	; (8000410 <fsm_automatic_init+0x2c>)
 80003f4:	6013      	str	r3, [r2, #0]
	counter2 = GREEN;
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <fsm_automatic_init+0x30>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a07      	ldr	r2, [pc, #28]	; (8000418 <fsm_automatic_init+0x34>)
 80003fc:	6013      	str	r3, [r2, #0]
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	20000180 	.word	0x20000180
 800040c:	20000000 	.word	0x20000000
 8000410:	200000c4 	.word	0x200000c4
 8000414:	20000008 	.word	0x20000008
 8000418:	200000c8 	.word	0x200000c8

0800041c <fsm_automatic_run>:

void fsm_automatic_run() {
 800041c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041e:	b093      	sub	sp, #76	; 0x4c
 8000420:	af10      	add	r7, sp, #64	; 0x40
	switch(current_state){
 8000422:	4bad      	ldr	r3, [pc, #692]	; (80006d8 <fsm_automatic_run+0x2bc>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	3b33      	subs	r3, #51	; 0x33
 8000428:	2b03      	cmp	r3, #3
 800042a:	f200 8163 	bhi.w	80006f4 <fsm_automatic_run+0x2d8>
 800042e:	a201      	add	r2, pc, #4	; (adr r2, 8000434 <fsm_automatic_run+0x18>)
 8000430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000434:	0800058f 	.word	0x0800058f
 8000438:	08000633 	.word	0x08000633
 800043c:	08000445 	.word	0x08000445
 8000440:	080004e9 	.word	0x080004e9

	case GREEN2:
		traffic_light(GREEN2);
 8000444:	2035      	movs	r0, #53	; 0x35
 8000446:	f7ff feb9 	bl	80001bc <traffic_light>

		if (timer_flag[0] == 1) {
 800044a:	4ba4      	ldr	r3, [pc, #656]	; (80006dc <fsm_automatic_run+0x2c0>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d113      	bne.n	800047a <fsm_automatic_run+0x5e>
			counter2 = RED - GREEN;
 8000452:	4ba3      	ldr	r3, [pc, #652]	; (80006e0 <fsm_automatic_run+0x2c4>)
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	4ba3      	ldr	r3, [pc, #652]	; (80006e4 <fsm_automatic_run+0x2c8>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	4aa2      	ldr	r2, [pc, #648]	; (80006e8 <fsm_automatic_run+0x2cc>)
 800045e:	6013      	str	r3, [r2, #0]
			current_state = AMBER2;
 8000460:	4b9d      	ldr	r3, [pc, #628]	; (80006d8 <fsm_automatic_run+0x2bc>)
 8000462:	2236      	movs	r2, #54	; 0x36
 8000464:	601a      	str	r2, [r3, #0]
			setTimer(0, counter2 * 1000);
 8000466:	4ba0      	ldr	r3, [pc, #640]	; (80006e8 <fsm_automatic_run+0x2cc>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800046e:	fb02 f303 	mul.w	r3, r2, r3
 8000472:	4619      	mov	r1, r3
 8000474:	2000      	movs	r0, #0
 8000476:	f000 fdbd 	bl	8000ff4 <setTimer>
		}
		if (timer_flag[2] == 1) {
 800047a:	4b98      	ldr	r3, [pc, #608]	; (80006dc <fsm_automatic_run+0x2c0>)
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	2b01      	cmp	r3, #1
 8000480:	f040 813a 	bne.w	80006f8 <fsm_automatic_run+0x2dc>
			displayUART(counter1, huart2);
 8000484:	4b99      	ldr	r3, [pc, #612]	; (80006ec <fsm_automatic_run+0x2d0>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	4e99      	ldr	r6, [pc, #612]	; (80006f0 <fsm_automatic_run+0x2d4>)
 800048c:	466d      	mov	r5, sp
 800048e:	f106 040c 	add.w	r4, r6, #12
 8000492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800049a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800049c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800049e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80004a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80004a6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80004aa:	6878      	ldr	r0, [r7, #4]
 80004ac:	f7ff fe4e 	bl	800014c <displayUART>
			displayUART(counter2, huart2);
 80004b0:	4b8d      	ldr	r3, [pc, #564]	; (80006e8 <fsm_automatic_run+0x2cc>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	4e8e      	ldr	r6, [pc, #568]	; (80006f0 <fsm_automatic_run+0x2d4>)
 80004b8:	466d      	mov	r5, sp
 80004ba:	f106 040c 	add.w	r4, r6, #12
 80004be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004ca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80004ce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80004d2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f7ff fe38 	bl	800014c <displayUART>
			setTimer(2, 1000);
 80004dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004e0:	2002      	movs	r0, #2
 80004e2:	f000 fd87 	bl	8000ff4 <setTimer>
		}

		break;
 80004e6:	e107      	b.n	80006f8 <fsm_automatic_run+0x2dc>

	case AMBER2:
		traffic_light(AMBER2);
 80004e8:	2036      	movs	r0, #54	; 0x36
 80004ea:	f7ff fe67 	bl	80001bc <traffic_light>

		if (timer_flag[0] == 1) {
 80004ee:	4b7b      	ldr	r3, [pc, #492]	; (80006dc <fsm_automatic_run+0x2c0>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d114      	bne.n	8000520 <fsm_automatic_run+0x104>
			counter1 = GREEN;
 80004f6:	4b7b      	ldr	r3, [pc, #492]	; (80006e4 <fsm_automatic_run+0x2c8>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a7c      	ldr	r2, [pc, #496]	; (80006ec <fsm_automatic_run+0x2d0>)
 80004fc:	6013      	str	r3, [r2, #0]
			counter2 = RED;
 80004fe:	4b78      	ldr	r3, [pc, #480]	; (80006e0 <fsm_automatic_run+0x2c4>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a79      	ldr	r2, [pc, #484]	; (80006e8 <fsm_automatic_run+0x2cc>)
 8000504:	6013      	str	r3, [r2, #0]
			current_state = GREEN1;
 8000506:	4b74      	ldr	r3, [pc, #464]	; (80006d8 <fsm_automatic_run+0x2bc>)
 8000508:	2233      	movs	r2, #51	; 0x33
 800050a:	601a      	str	r2, [r3, #0]
			setTimer(0, counter1 * 1000);
 800050c:	4b77      	ldr	r3, [pc, #476]	; (80006ec <fsm_automatic_run+0x2d0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000514:	fb02 f303 	mul.w	r3, r2, r3
 8000518:	4619      	mov	r1, r3
 800051a:	2000      	movs	r0, #0
 800051c:	f000 fd6a 	bl	8000ff4 <setTimer>
		}
		if (timer_flag[2] == 1) {
 8000520:	4b6e      	ldr	r3, [pc, #440]	; (80006dc <fsm_automatic_run+0x2c0>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	2b01      	cmp	r3, #1
 8000526:	f040 80e9 	bne.w	80006fc <fsm_automatic_run+0x2e0>
			displayUART(counter1, huart2);
 800052a:	4b70      	ldr	r3, [pc, #448]	; (80006ec <fsm_automatic_run+0x2d0>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	4e6f      	ldr	r6, [pc, #444]	; (80006f0 <fsm_automatic_run+0x2d4>)
 8000532:	466d      	mov	r5, sp
 8000534:	f106 040c 	add.w	r4, r6, #12
 8000538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800053a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800053c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800053e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000544:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000548:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800054c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f7ff fdfb 	bl	800014c <displayUART>
			displayUART(counter2, huart2);
 8000556:	4b64      	ldr	r3, [pc, #400]	; (80006e8 <fsm_automatic_run+0x2cc>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4e64      	ldr	r6, [pc, #400]	; (80006f0 <fsm_automatic_run+0x2d4>)
 800055e:	466d      	mov	r5, sp
 8000560:	f106 040c 	add.w	r4, r6, #12
 8000564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800056a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800056c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800056e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000570:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000574:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000578:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f7ff fde5 	bl	800014c <displayUART>
			setTimer(2, 1000);
 8000582:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000586:	2002      	movs	r0, #2
 8000588:	f000 fd34 	bl	8000ff4 <setTimer>
		}

		break;
 800058c:	e0b6      	b.n	80006fc <fsm_automatic_run+0x2e0>

	case GREEN1:
		traffic_light(GREEN1);
 800058e:	2033      	movs	r0, #51	; 0x33
 8000590:	f7ff fe14 	bl	80001bc <traffic_light>

		if (timer_flag[0] == 1) {
 8000594:	4b51      	ldr	r3, [pc, #324]	; (80006dc <fsm_automatic_run+0x2c0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d113      	bne.n	80005c4 <fsm_automatic_run+0x1a8>
			counter1 = RED - GREEN;
 800059c:	4b50      	ldr	r3, [pc, #320]	; (80006e0 <fsm_automatic_run+0x2c4>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	4b50      	ldr	r3, [pc, #320]	; (80006e4 <fsm_automatic_run+0x2c8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	4a51      	ldr	r2, [pc, #324]	; (80006ec <fsm_automatic_run+0x2d0>)
 80005a8:	6013      	str	r3, [r2, #0]
			current_state = AMBER1;
 80005aa:	4b4b      	ldr	r3, [pc, #300]	; (80006d8 <fsm_automatic_run+0x2bc>)
 80005ac:	2234      	movs	r2, #52	; 0x34
 80005ae:	601a      	str	r2, [r3, #0]
			setTimer(0, counter1 * 1000);
 80005b0:	4b4e      	ldr	r3, [pc, #312]	; (80006ec <fsm_automatic_run+0x2d0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b8:	fb02 f303 	mul.w	r3, r2, r3
 80005bc:	4619      	mov	r1, r3
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 fd18 	bl	8000ff4 <setTimer>
		}
		if (timer_flag[2] == 1) {
 80005c4:	4b45      	ldr	r3, [pc, #276]	; (80006dc <fsm_automatic_run+0x2c0>)
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	f040 8099 	bne.w	8000700 <fsm_automatic_run+0x2e4>
			displayUART(counter1, huart2);
 80005ce:	4b47      	ldr	r3, [pc, #284]	; (80006ec <fsm_automatic_run+0x2d0>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4e46      	ldr	r6, [pc, #280]	; (80006f0 <fsm_automatic_run+0x2d4>)
 80005d6:	466d      	mov	r5, sp
 80005d8:	f106 040c 	add.w	r4, r6, #12
 80005dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80005ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80005f0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff fda9 	bl	800014c <displayUART>
			displayUART(counter2, huart2);
 80005fa:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <fsm_automatic_run+0x2cc>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4e3b      	ldr	r6, [pc, #236]	; (80006f0 <fsm_automatic_run+0x2d4>)
 8000602:	466d      	mov	r5, sp
 8000604:	f106 040c 	add.w	r4, r6, #12
 8000608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800060a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800060c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800060e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000614:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000618:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800061c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f7ff fd93 	bl	800014c <displayUART>
			setTimer(2, 1000);
 8000626:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800062a:	2002      	movs	r0, #2
 800062c:	f000 fce2 	bl	8000ff4 <setTimer>
		}

		break;
 8000630:	e066      	b.n	8000700 <fsm_automatic_run+0x2e4>

	case AMBER1:
		traffic_light(AMBER1);
 8000632:	2034      	movs	r0, #52	; 0x34
 8000634:	f7ff fdc2 	bl	80001bc <traffic_light>

		if (timer_flag[0] == 1) {
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <fsm_automatic_run+0x2c0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d114      	bne.n	800066a <fsm_automatic_run+0x24e>
			counter1 = RED;
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <fsm_automatic_run+0x2c4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a29      	ldr	r2, [pc, #164]	; (80006ec <fsm_automatic_run+0x2d0>)
 8000646:	6013      	str	r3, [r2, #0]
			counter2 = GREEN;
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <fsm_automatic_run+0x2c8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a26      	ldr	r2, [pc, #152]	; (80006e8 <fsm_automatic_run+0x2cc>)
 800064e:	6013      	str	r3, [r2, #0]
			current_state = GREEN2;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <fsm_automatic_run+0x2bc>)
 8000652:	2235      	movs	r2, #53	; 0x35
 8000654:	601a      	str	r2, [r3, #0]
			setTimer(0, counter2 * 1000);
 8000656:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <fsm_automatic_run+0x2cc>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800065e:	fb02 f303 	mul.w	r3, r2, r3
 8000662:	4619      	mov	r1, r3
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fcc5 	bl	8000ff4 <setTimer>
		}
		if (timer_flag[2] == 1) {
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <fsm_automatic_run+0x2c0>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d148      	bne.n	8000704 <fsm_automatic_run+0x2e8>
			displayUART(counter1, huart2);
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <fsm_automatic_run+0x2d0>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4e1d      	ldr	r6, [pc, #116]	; (80006f0 <fsm_automatic_run+0x2d4>)
 800067a:	466d      	mov	r5, sp
 800067c:	f106 040c 	add.w	r4, r6, #12
 8000680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800068a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800068c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000690:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000694:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff fd57 	bl	800014c <displayUART>
			displayUART(counter2, huart2);
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <fsm_automatic_run+0x2cc>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4e12      	ldr	r6, [pc, #72]	; (80006f0 <fsm_automatic_run+0x2d4>)
 80006a6:	466d      	mov	r5, sp
 80006a8:	f106 040c 	add.w	r4, r6, #12
 80006ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006b8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80006bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80006c0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff fd41 	bl	800014c <displayUART>
			setTimer(2, 1000);
 80006ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006ce:	2002      	movs	r0, #2
 80006d0:	f000 fc90 	bl	8000ff4 <setTimer>
		}

		break;
 80006d4:	e016      	b.n	8000704 <fsm_automatic_run+0x2e8>
 80006d6:	bf00      	nop
 80006d8:	20000180 	.word	0x20000180
 80006dc:	20000150 	.word	0x20000150
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000008 	.word	0x20000008
 80006e8:	200000c8 	.word	0x200000c8
 80006ec:	200000c4 	.word	0x200000c4
 80006f0:	20000248 	.word	0x20000248

	default:
		break;
 80006f4:	bf00      	nop
 80006f6:	e006      	b.n	8000706 <fsm_automatic_run+0x2ea>
		break;
 80006f8:	bf00      	nop
 80006fa:	e004      	b.n	8000706 <fsm_automatic_run+0x2ea>
		break;
 80006fc:	bf00      	nop
 80006fe:	e002      	b.n	8000706 <fsm_automatic_run+0x2ea>
		break;
 8000700:	bf00      	nop
 8000702:	e000      	b.n	8000706 <fsm_automatic_run+0x2ea>
		break;
 8000704:	bf00      	nop
	}
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800070e:	bf00      	nop

08000710 <fsm>:
 *  Created on: Nov 20, 2023
 *      Author: Admin
 */
#include "fsm_main.h"

void fsm(){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

	switch(status){
 8000714:	4b3d      	ldr	r3, [pc, #244]	; (800080c <fsm+0xfc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d875      	bhi.n	8000808 <fsm+0xf8>
 800071c:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <fsm+0x14>)
 800071e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000722:	bf00      	nop
 8000724:	08000735 	.word	0x08000735
 8000728:	0800076f 	.word	0x0800076f
 800072c:	0800078b 	.word	0x0800078b
 8000730:	080007d1 	.word	0x080007d1
	case INIT:
		fsm_automatic_init();
 8000734:	f7ff fe56 	bl	80003e4 <fsm_automatic_init>
		traffic_light(INIT);
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff fd3f 	bl	80001bc <traffic_light>
		ped_status = PED_OFF;
 800073e:	4b34      	ldr	r3, [pc, #208]	; (8000810 <fsm+0x100>)
 8000740:	2229      	movs	r2, #41	; 0x29
 8000742:	601a      	str	r2, [r3, #0]
		clearAllTimer();
 8000744:	f000 fc8c 	bl	8001060 <clearAllTimer>
		setTimer(0, GREEN * 1000);	// Timer RED1_GREEN2
 8000748:	4b32      	ldr	r3, [pc, #200]	; (8000814 <fsm+0x104>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000750:	fb02 f303 	mul.w	r3, r2, r3
 8000754:	4619      	mov	r1, r3
 8000756:	2000      	movs	r0, #0
 8000758:	f000 fc4c 	bl	8000ff4 <setTimer>
		setTimer(2, 1000);			// Timer UART
 800075c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000760:	2002      	movs	r0, #2
 8000762:	f000 fc47 	bl	8000ff4 <setTimer>
		status = AUTO;
 8000766:	4b29      	ldr	r3, [pc, #164]	; (800080c <fsm+0xfc>)
 8000768:	2201      	movs	r2, #1
 800076a:	601a      	str	r2, [r3, #0]
		break;
 800076c:	e04c      	b.n	8000808 <fsm+0xf8>
	case AUTO:
		fsm_automatic_run();
 800076e:	f7ff fe55 	bl	800041c <fsm_automatic_run>
		if(isButtonPressed(0) == 1){
 8000772:	2000      	movs	r0, #0
 8000774:	f000 f9d2 	bl	8000b1c <isButtonPressed>
 8000778:	4603      	mov	r3, r0
 800077a:	2b01      	cmp	r3, #1
 800077c:	d13f      	bne.n	80007fe <fsm+0xee>
			clearAllTimer();
 800077e:	f000 fc6f 	bl	8001060 <clearAllTimer>
			status = MANUAL;
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <fsm+0xfc>)
 8000784:	2202      	movs	r2, #2
 8000786:	601a      	str	r2, [r3, #0]
		}
		break;
 8000788:	e039      	b.n	80007fe <fsm+0xee>
	case MANUAL:
		fsm_manual_run();
 800078a:	f000 f847 	bl	800081c <fsm_manual_run>
		if(isButtonPressed(0) == 1){
 800078e:	2000      	movs	r0, #0
 8000790:	f000 f9c4 	bl	8000b1c <isButtonPressed>
 8000794:	4603      	mov	r3, r0
 8000796:	2b01      	cmp	r3, #1
 8000798:	d110      	bne.n	80007bc <fsm+0xac>
			clearAllTimer();
 800079a:	f000 fc61 	bl	8001060 <clearAllTimer>
			set_blinky(INIT);
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff fda4 	bl	80002ec <set_blinky>
			setTimer(3, 500);
 80007a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007a8:	2003      	movs	r0, #3
 80007aa:	f000 fc23 	bl	8000ff4 <setTimer>
			status = TURNING;
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <fsm+0xfc>)
 80007b0:	2203      	movs	r2, #3
 80007b2:	601a      	str	r2, [r3, #0]
			turn_state = AUTO_AMBER;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <fsm+0x108>)
 80007b6:	221f      	movs	r2, #31
 80007b8:	601a      	str	r2, [r3, #0]

		}else if(isButtonPressed(2) == 1){
			status = AUTO;
		}
		break;
 80007ba:	e022      	b.n	8000802 <fsm+0xf2>
		}else if(isButtonPressed(2) == 1){
 80007bc:	2002      	movs	r0, #2
 80007be:	f000 f9ad 	bl	8000b1c <isButtonPressed>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d11c      	bne.n	8000802 <fsm+0xf2>
			status = AUTO;
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <fsm+0xfc>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	601a      	str	r2, [r3, #0]
		break;
 80007ce:	e018      	b.n	8000802 <fsm+0xf2>
	case TURNING:
		fsm_turning_run(turn_state);
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <fsm+0x108>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f873 	bl	80008c0 <fsm_turning_run>
		if(isButtonPressed(0) == 1){
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 f99e 	bl	8000b1c <isButtonPressed>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d10f      	bne.n	8000806 <fsm+0xf6>
			if(turn_state == AUTO_AMBER){
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <fsm+0x108>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b1f      	cmp	r3, #31
 80007ec:	d103      	bne.n	80007f6 <fsm+0xe6>
				turn_state = AUTO_GREEN;
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <fsm+0x108>)
 80007f0:	2221      	movs	r2, #33	; 0x21
 80007f2:	601a      	str	r2, [r3, #0]
			}else{
				status = INIT;
			}
		}
		break;
 80007f4:	e007      	b.n	8000806 <fsm+0xf6>
				status = INIT;
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <fsm+0xfc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
		break;
 80007fc:	e003      	b.n	8000806 <fsm+0xf6>
		break;
 80007fe:	bf00      	nop
 8000800:	e002      	b.n	8000808 <fsm+0xf8>
		break;
 8000802:	bf00      	nop
 8000804:	e000      	b.n	8000808 <fsm+0xf8>
		break;
 8000806:	bf00      	nop
}
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000b8 	.word	0x200000b8
 8000810:	200000bc 	.word	0x200000bc
 8000814:	20000008 	.word	0x20000008
 8000818:	200000c0 	.word	0x200000c0

0800081c <fsm_manual_run>:
 *  Created on: Nov 13, 2023
 *      Author: Admin
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	switch(current_state){
 8000820:	4b26      	ldr	r3, [pc, #152]	; (80008bc <fsm_manual_run+0xa0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	3b33      	subs	r3, #51	; 0x33
 8000826:	2b03      	cmp	r3, #3
 8000828:	d845      	bhi.n	80008b6 <fsm_manual_run+0x9a>
 800082a:	a201      	add	r2, pc, #4	; (adr r2, 8000830 <fsm_manual_run+0x14>)
 800082c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000830:	08000841 	.word	0x08000841
 8000834:	0800085b 	.word	0x0800085b
 8000838:	08000875 	.word	0x08000875
 800083c:	0800088f 	.word	0x0800088f
	case GREEN1:
		traffic_light(GREEN1);
 8000840:	2033      	movs	r0, #51	; 0x33
 8000842:	f7ff fcbb 	bl	80001bc <traffic_light>
		if(isButtonPressed(1)){
 8000846:	2001      	movs	r0, #1
 8000848:	f000 f968 	bl	8000b1c <isButtonPressed>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d02a      	beq.n	80008a8 <fsm_manual_run+0x8c>
			current_state = AMBER1;
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <fsm_manual_run+0xa0>)
 8000854:	2234      	movs	r2, #52	; 0x34
 8000856:	601a      	str	r2, [r3, #0]
		}
		break;
 8000858:	e026      	b.n	80008a8 <fsm_manual_run+0x8c>
	case AMBER1:
		traffic_light(AMBER1);
 800085a:	2034      	movs	r0, #52	; 0x34
 800085c:	f7ff fcae 	bl	80001bc <traffic_light>
		if(isButtonPressed(1)){
 8000860:	2001      	movs	r0, #1
 8000862:	f000 f95b 	bl	8000b1c <isButtonPressed>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d01f      	beq.n	80008ac <fsm_manual_run+0x90>
			current_state = GREEN2;
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <fsm_manual_run+0xa0>)
 800086e:	2235      	movs	r2, #53	; 0x35
 8000870:	601a      	str	r2, [r3, #0]
		}
		break;
 8000872:	e01b      	b.n	80008ac <fsm_manual_run+0x90>
	case GREEN2:
		traffic_light(GREEN2);
 8000874:	2035      	movs	r0, #53	; 0x35
 8000876:	f7ff fca1 	bl	80001bc <traffic_light>
		if(isButtonPressed(1)){
 800087a:	2001      	movs	r0, #1
 800087c:	f000 f94e 	bl	8000b1c <isButtonPressed>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d014      	beq.n	80008b0 <fsm_manual_run+0x94>
			current_state = AMBER2;
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <fsm_manual_run+0xa0>)
 8000888:	2236      	movs	r2, #54	; 0x36
 800088a:	601a      	str	r2, [r3, #0]
		}
		break;
 800088c:	e010      	b.n	80008b0 <fsm_manual_run+0x94>
	case AMBER2:
		traffic_light(AMBER2);
 800088e:	2036      	movs	r0, #54	; 0x36
 8000890:	f7ff fc94 	bl	80001bc <traffic_light>
		if(isButtonPressed(1)){
 8000894:	2001      	movs	r0, #1
 8000896:	f000 f941 	bl	8000b1c <isButtonPressed>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d009      	beq.n	80008b4 <fsm_manual_run+0x98>
			current_state = GREEN1;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <fsm_manual_run+0xa0>)
 80008a2:	2233      	movs	r2, #51	; 0x33
 80008a4:	601a      	str	r2, [r3, #0]
		}
		break;
 80008a6:	e005      	b.n	80008b4 <fsm_manual_run+0x98>
		break;
 80008a8:	bf00      	nop
 80008aa:	e004      	b.n	80008b6 <fsm_manual_run+0x9a>
		break;
 80008ac:	bf00      	nop
 80008ae:	e002      	b.n	80008b6 <fsm_manual_run+0x9a>
		break;
 80008b0:	bf00      	nop
 80008b2:	e000      	b.n	80008b6 <fsm_manual_run+0x9a>
		break;
 80008b4:	bf00      	nop
	}
};
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000180 	.word	0x20000180

080008c0 <fsm_turning_run>:

#include "main.h"



void fsm_turning_run(int turn_state) {
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c2:	b093      	sub	sp, #76	; 0x4c
 80008c4:	af10      	add	r7, sp, #64	; 0x40
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b1f      	subs	r3, #31
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	f200 810d 	bhi.w	8000aec <fsm_turning_run+0x22c>
 80008d2:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <fsm_turning_run+0x18>)
 80008d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d8:	080008e9 	.word	0x080008e9
 80008dc:	08000955 	.word	0x08000955
 80008e0:	080009ed 	.word	0x080009ed
 80008e4:	08000a57 	.word	0x08000a57
	switch(turn_state){

	case AUTO_AMBER:
		

		if (timer_flag[3] == 1) {
 80008e8:	4b87      	ldr	r3, [pc, #540]	; (8000b08 <fsm_turning_run+0x248>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d107      	bne.n	8000900 <fsm_turning_run+0x40>
			setTimer(3, 500);
 80008f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008f4:	2003      	movs	r0, #3
 80008f6:	f000 fb7d 	bl	8000ff4 <setTimer>
            set_blinky(AUTO_AMBER);
 80008fa:	201f      	movs	r0, #31
 80008fc:	f7ff fcf6 	bl	80002ec <set_blinky>
		}
		if(isButtonPressed(1)){
 8000900:	2001      	movs	r0, #1
 8000902:	f000 f90b 	bl	8000b1c <isButtonPressed>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	f000 80f1 	beq.w	8000af0 <fsm_turning_run+0x230>
			turn_state = ADJ_AMBER;
 800090e:	2320      	movs	r3, #32
 8000910:	607b      	str	r3, [r7, #4]
            AMBER++;
 8000912:	4b7e      	ldr	r3, [pc, #504]	; (8000b0c <fsm_turning_run+0x24c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	3301      	adds	r3, #1
 8000918:	4a7c      	ldr	r2, [pc, #496]	; (8000b0c <fsm_turning_run+0x24c>)
 800091a:	6013      	str	r3, [r2, #0]
            RED++;
 800091c:	4b7c      	ldr	r3, [pc, #496]	; (8000b10 <fsm_turning_run+0x250>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	4a7b      	ldr	r2, [pc, #492]	; (8000b10 <fsm_turning_run+0x250>)
 8000924:	6013      	str	r3, [r2, #0]
            displayUART(AMBER, huart2);
 8000926:	4b79      	ldr	r3, [pc, #484]	; (8000b0c <fsm_turning_run+0x24c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	4e79      	ldr	r6, [pc, #484]	; (8000b14 <fsm_turning_run+0x254>)
 800092e:	466d      	mov	r5, sp
 8000930:	f106 040c 	add.w	r4, r6, #12
 8000934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800093a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800093c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800093e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000940:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000944:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000948:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800094c:	6838      	ldr	r0, [r7, #0]
 800094e:	f7ff fbfd 	bl	800014c <displayUART>
		}
		break;
 8000952:	e0cd      	b.n	8000af0 <fsm_turning_run+0x230>

	case ADJ_AMBER:
		if (timer_flag[3] == 1) {
 8000954:	4b6c      	ldr	r3, [pc, #432]	; (8000b08 <fsm_turning_run+0x248>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d107      	bne.n	800096c <fsm_turning_run+0xac>
			setTimer(3, 500);
 800095c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000960:	2003      	movs	r0, #3
 8000962:	f000 fb47 	bl	8000ff4 <setTimer>
            set_blinky(AUTO_AMBER);
 8000966:	201f      	movs	r0, #31
 8000968:	f7ff fcc0 	bl	80002ec <set_blinky>
		}
		if(isButtonPressed(1)){
 800096c:	2001      	movs	r0, #1
 800096e:	f000 f8d5 	bl	8000b1c <isButtonPressed>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d02f      	beq.n	80009d8 <fsm_turning_run+0x118>
			turn_state = ADJ_AMBER;
 8000978:	2320      	movs	r3, #32
 800097a:	607b      	str	r3, [r7, #4]
            AMBER++;
 800097c:	4b63      	ldr	r3, [pc, #396]	; (8000b0c <fsm_turning_run+0x24c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	3301      	adds	r3, #1
 8000982:	4a62      	ldr	r2, [pc, #392]	; (8000b0c <fsm_turning_run+0x24c>)
 8000984:	6013      	str	r3, [r2, #0]
            RED++;
 8000986:	4b62      	ldr	r3, [pc, #392]	; (8000b10 <fsm_turning_run+0x250>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	3301      	adds	r3, #1
 800098c:	4a60      	ldr	r2, [pc, #384]	; (8000b10 <fsm_turning_run+0x250>)
 800098e:	6013      	str	r3, [r2, #0]
            if(AMBER == 100){
 8000990:	4b5e      	ldr	r3, [pc, #376]	; (8000b0c <fsm_turning_run+0x24c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b64      	cmp	r3, #100	; 0x64
 8000996:	d109      	bne.n	80009ac <fsm_turning_run+0xec>
                AMBER = 1;
 8000998:	4b5c      	ldr	r3, [pc, #368]	; (8000b0c <fsm_turning_run+0x24c>)
 800099a:	2201      	movs	r2, #1
 800099c:	601a      	str	r2, [r3, #0]
                RED = AMBER + GREEN;
 800099e:	4b5b      	ldr	r3, [pc, #364]	; (8000b0c <fsm_turning_run+0x24c>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4b5d      	ldr	r3, [pc, #372]	; (8000b18 <fsm_turning_run+0x258>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	4a59      	ldr	r2, [pc, #356]	; (8000b10 <fsm_turning_run+0x250>)
 80009aa:	6013      	str	r3, [r2, #0]
            }
            displayUART(AMBER, huart2);
 80009ac:	4b57      	ldr	r3, [pc, #348]	; (8000b0c <fsm_turning_run+0x24c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4e58      	ldr	r6, [pc, #352]	; (8000b14 <fsm_turning_run+0x254>)
 80009b4:	466d      	mov	r5, sp
 80009b6:	f106 040c 	add.w	r4, r6, #12
 80009ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80009ca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80009ce:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80009d2:	6838      	ldr	r0, [r7, #0]
 80009d4:	f7ff fbba 	bl	800014c <displayUART>
		}
		if(isButtonPressed(2)){
 80009d8:	2002      	movs	r0, #2
 80009da:	f000 f89f 	bl	8000b1c <isButtonPressed>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	f000 8087 	beq.w	8000af4 <fsm_turning_run+0x234>
			turn_state = AUTO_AMBER;
 80009e6:	231f      	movs	r3, #31
 80009e8:	607b      	str	r3, [r7, #4]
		}
        break;
 80009ea:	e083      	b.n	8000af4 <fsm_turning_run+0x234>

	case AUTO_GREEN:
		if (timer_flag[3] == 1) {
 80009ec:	4b46      	ldr	r3, [pc, #280]	; (8000b08 <fsm_turning_run+0x248>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d107      	bne.n	8000a04 <fsm_turning_run+0x144>
			setTimer(3, 500);
 80009f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 fafb 	bl	8000ff4 <setTimer>
            set_blinky(AUTO_GREEN);
 80009fe:	2021      	movs	r0, #33	; 0x21
 8000a00:	f7ff fc74 	bl	80002ec <set_blinky>
		}
		if(isButtonPressed(1)){
 8000a04:	2001      	movs	r0, #1
 8000a06:	f000 f889 	bl	8000b1c <isButtonPressed>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d073      	beq.n	8000af8 <fsm_turning_run+0x238>
			turn_state = ADJ_GREEN;
 8000a10:	2322      	movs	r3, #34	; 0x22
 8000a12:	607b      	str	r3, [r7, #4]
            GREEN++;
 8000a14:	4b40      	ldr	r3, [pc, #256]	; (8000b18 <fsm_turning_run+0x258>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	4a3f      	ldr	r2, [pc, #252]	; (8000b18 <fsm_turning_run+0x258>)
 8000a1c:	6013      	str	r3, [r2, #0]
            RED++;
 8000a1e:	4b3c      	ldr	r3, [pc, #240]	; (8000b10 <fsm_turning_run+0x250>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	4a3a      	ldr	r2, [pc, #232]	; (8000b10 <fsm_turning_run+0x250>)
 8000a26:	6013      	str	r3, [r2, #0]
            displayUART(GREEN, huart2);
 8000a28:	4b3b      	ldr	r3, [pc, #236]	; (8000b18 <fsm_turning_run+0x258>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4e39      	ldr	r6, [pc, #228]	; (8000b14 <fsm_turning_run+0x254>)
 8000a30:	466d      	mov	r5, sp
 8000a32:	f106 040c 	add.w	r4, r6, #12
 8000a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a42:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a46:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000a4a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000a4e:	6838      	ldr	r0, [r7, #0]
 8000a50:	f7ff fb7c 	bl	800014c <displayUART>
		}
		break;
 8000a54:	e050      	b.n	8000af8 <fsm_turning_run+0x238>

	case ADJ_GREEN:
		if (timer_flag[3] == 1) {
 8000a56:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <fsm_turning_run+0x248>)
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d107      	bne.n	8000a6e <fsm_turning_run+0x1ae>
			setTimer(3, 500);
 8000a5e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a62:	2003      	movs	r0, #3
 8000a64:	f000 fac6 	bl	8000ff4 <setTimer>
            set_blinky(AUTO_AMBER);
 8000a68:	201f      	movs	r0, #31
 8000a6a:	f7ff fc3f 	bl	80002ec <set_blinky>
		}
		if(isButtonPressed(1)){
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f000 f854 	bl	8000b1c <isButtonPressed>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d02f      	beq.n	8000ada <fsm_turning_run+0x21a>
			turn_state = ADJ_AMBER;
 8000a7a:	2320      	movs	r3, #32
 8000a7c:	607b      	str	r3, [r7, #4]
            AMBER++;
 8000a7e:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <fsm_turning_run+0x24c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	4a21      	ldr	r2, [pc, #132]	; (8000b0c <fsm_turning_run+0x24c>)
 8000a86:	6013      	str	r3, [r2, #0]
            RED++;
 8000a88:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <fsm_turning_run+0x250>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	4a20      	ldr	r2, [pc, #128]	; (8000b10 <fsm_turning_run+0x250>)
 8000a90:	6013      	str	r3, [r2, #0]
            if(AMBER == 100){
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <fsm_turning_run+0x24c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b64      	cmp	r3, #100	; 0x64
 8000a98:	d109      	bne.n	8000aae <fsm_turning_run+0x1ee>
                AMBER = 1;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <fsm_turning_run+0x24c>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]
                RED = AMBER + GREEN;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <fsm_turning_run+0x24c>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <fsm_turning_run+0x258>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a19      	ldr	r2, [pc, #100]	; (8000b10 <fsm_turning_run+0x250>)
 8000aac:	6013      	str	r3, [r2, #0]
            }
            displayUART(AMBER, huart2);
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <fsm_turning_run+0x24c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	4e17      	ldr	r6, [pc, #92]	; (8000b14 <fsm_turning_run+0x254>)
 8000ab6:	466d      	mov	r5, sp
 8000ab8:	f106 040c 	add.w	r4, r6, #12
 8000abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ac8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000acc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000ad0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000ad4:	6838      	ldr	r0, [r7, #0]
 8000ad6:	f7ff fb39 	bl	800014c <displayUART>
		}
		if(isButtonPressed(2)){
 8000ada:	2002      	movs	r0, #2
 8000adc:	f000 f81e 	bl	8000b1c <isButtonPressed>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00a      	beq.n	8000afc <fsm_turning_run+0x23c>
			turn_state = AUTO_GREEN;
 8000ae6:	2321      	movs	r3, #33	; 0x21
 8000ae8:	607b      	str	r3, [r7, #4]
		}
        break;
 8000aea:	e007      	b.n	8000afc <fsm_turning_run+0x23c>

	default:
		break;
 8000aec:	bf00      	nop
 8000aee:	e006      	b.n	8000afe <fsm_turning_run+0x23e>
		break;
 8000af0:	bf00      	nop
 8000af2:	e004      	b.n	8000afe <fsm_turning_run+0x23e>
        break;
 8000af4:	bf00      	nop
 8000af6:	e002      	b.n	8000afe <fsm_turning_run+0x23e>
		break;
 8000af8:	bf00      	nop
 8000afa:	e000      	b.n	8000afe <fsm_turning_run+0x23e>
        break;
 8000afc:	bf00      	nop
	}
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000150 	.word	0x20000150
 8000b0c:	20000004 	.word	0x20000004
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000248 	.word	0x20000248
 8000b18:	20000008 	.word	0x20000008

08000b1c <isButtonPressed>:
		TimeOutForKeyPress[i] =  500;
		button_flag[i] = 0;
	}
}

int isButtonPressed(int index){
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	if(index >= NO_OF_BUTTONS){
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	dd01      	ble.n	8000b2e <isButtonPressed+0x12>
		return 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e00d      	b.n	8000b4a <isButtonPressed+0x2e>
	}
	if(button_flag[index] == 1){
 8000b2e:	4a09      	ldr	r2, [pc, #36]	; (8000b54 <isButtonPressed+0x38>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d106      	bne.n	8000b48 <isButtonPressed+0x2c>
		button_flag[index] = 0;
 8000b3a:	4a06      	ldr	r2, [pc, #24]	; (8000b54 <isButtonPressed+0x38>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <isButtonPressed+0x2e>
	}
	return 0;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	2000011c 	.word	0x2000011c

08000b58 <subKeyProcess>:

void subKeyProcess(int index){
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <subKeyProcess+0x1c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2101      	movs	r1, #1
 8000b66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	2000011c 	.word	0x2000011c

08000b78 <getKeyInput>:

void getKeyInput(){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	e058      	b.n	8000c36 <getKeyInput+0xbe>
		KeyReg2[i] = KeyReg1[i];
 8000b84:	4a30      	ldr	r2, [pc, #192]	; (8000c48 <getKeyInput+0xd0>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b8c:	492f      	ldr	r1, [pc, #188]	; (8000c4c <getKeyInput+0xd4>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000b94:	4a2e      	ldr	r2, [pc, #184]	; (8000c50 <getKeyInput+0xd8>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b9c:	492a      	ldr	r1, [pc, #168]	; (8000c48 <getKeyInput+0xd0>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON_PORT[i], BUTTON_PIN[i]);
 8000ba4:	4a2b      	ldr	r2, [pc, #172]	; (8000c54 <getKeyInput+0xdc>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bac:	492a      	ldr	r1, [pc, #168]	; (8000c58 <getKeyInput+0xe0>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4610      	mov	r0, r2
 8000bb8:	f000 ff16 	bl	80019e8 <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <getKeyInput+0xd8>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000bc8:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <getKeyInput+0xd0>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bd0:	491f      	ldr	r1, [pc, #124]	; (8000c50 <getKeyInput+0xd8>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d129      	bne.n	8000c30 <getKeyInput+0xb8>
 8000bdc:	4a1a      	ldr	r2, [pc, #104]	; (8000c48 <getKeyInput+0xd0>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000be4:	4919      	ldr	r1, [pc, #100]	; (8000c4c <getKeyInput+0xd4>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d11f      	bne.n	8000c30 <getKeyInput+0xb8>
		if (KeyReg2[i] != KeyReg3[i]){
 8000bf0:	4a16      	ldr	r2, [pc, #88]	; (8000c4c <getKeyInput+0xd4>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bf8:	4918      	ldr	r1, [pc, #96]	; (8000c5c <getKeyInput+0xe4>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d015      	beq.n	8000c30 <getKeyInput+0xb8>
		  KeyReg3[i] = KeyReg2[i];
 8000c04:	4a11      	ldr	r2, [pc, #68]	; (8000c4c <getKeyInput+0xd4>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c0c:	4913      	ldr	r1, [pc, #76]	; (8000c5c <getKeyInput+0xe4>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  if (KeyReg3[i] == PRESSED_STATE){
 8000c14:	4a11      	ldr	r2, [pc, #68]	; (8000c5c <getKeyInput+0xe4>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d107      	bne.n	8000c30 <getKeyInput+0xb8>
			TimeOutForKeyPress[i] = DURATION_FOR_AUTO_INCREASING;
 8000c20:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <getKeyInput+0xe8>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2164      	movs	r1, #100	; 0x64
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			subKeyProcess(i);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ff94 	bl	8000b58 <subKeyProcess>
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3301      	adds	r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	dda3      	ble.n	8000b84 <getKeyInput+0xc>
		  }
		}
		}
	}

}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000dc 	.word	0x200000dc
 8000c4c:	200000ec 	.word	0x200000ec
 8000c50:	200000cc 	.word	0x200000cc
 8000c54:	2000000c 	.word	0x2000000c
 8000c58:	2000001c 	.word	0x2000001c
 8000c5c:	200000fc 	.word	0x200000fc
 8000c60:	2000010c 	.word	0x2000010c

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c68:	f000 fbca 	bl	8001400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6c:	f000 f816 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c70:	f000 f93c 	bl	8000eec <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c74:	f000 f84e 	bl	8000d14 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c78:	f000 f898 	bl	8000dac <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000c7c:	f000 f90c 	bl	8000e98 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  current_state = GREEN2;
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <main+0x30>)
 8000c82:	2235      	movs	r2, #53	; 0x35
 8000c84:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 8000c86:	4804      	ldr	r0, [pc, #16]	; (8000c98 <main+0x34>)
 8000c88:	f001 fb54 	bl	8002334 <HAL_TIM_Base_Start_IT>
//    ped_status = PED_OFF;
//    turn_state = AUTO_AMBER;
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm();
 8000c8c:	f7ff fd40 	bl	8000710 <fsm>
 8000c90:	e7fc      	b.n	8000c8c <main+0x28>
 8000c92:	bf00      	nop
 8000c94:	20000180 	.word	0x20000180
 8000c98:	20000200 	.word	0x20000200

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b090      	sub	sp, #64	; 0x40
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0318 	add.w	r3, r7, #24
 8000ca6:	2228      	movs	r2, #40	; 0x28
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 fb8c 	bl	80033c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc6:	2310      	movs	r3, #16
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cce:	f107 0318 	add.w	r3, r7, #24
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fed0 	bl	8001a78 <HAL_RCC_OscConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cde:	f000 f984 	bl	8000fea <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 f93c 	bl	8001f78 <HAL_RCC_ClockConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d06:	f000 f970 	bl	8000fea <Error_Handler>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3740      	adds	r7, #64	; 0x40
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d3a:	223f      	movs	r2, #63	; 0x3f
 8000d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d58:	4813      	ldr	r0, [pc, #76]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d5a:	f001 fa9b 	bl	8002294 <HAL_TIM_Base_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d64:	f000 f941 	bl	8000fea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	4619      	mov	r1, r3
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d76:	f001 fd51 	bl	800281c <HAL_TIM_ConfigClockSource>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d80:	f000 f933 	bl	8000fea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d84:	2300      	movs	r3, #0
 8000d86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d92:	f002 f8af 	bl	8002ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d9c:	f000 f925 	bl	8000fea <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000200 	.word	0x20000200

08000dac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08e      	sub	sp, #56	; 0x38
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc0:	f107 0320 	add.w	r3, r7, #32
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	615a      	str	r2, [r3, #20]
 8000dda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ddc:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000dde:	4a2d      	ldr	r2, [pc, #180]	; (8000e94 <MX_TIM3_Init+0xe8>)
 8000de0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000de2:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000de4:	223f      	movs	r2, #63	; 0x3f
 8000de6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de8:	4b29      	ldr	r3, [pc, #164]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000dee:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000df0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000df4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e02:	4823      	ldr	r0, [pc, #140]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000e04:	f001 fa46 	bl	8002294 <HAL_TIM_Base_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e0e:	f000 f8ec 	bl	8000fea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	481c      	ldr	r0, [pc, #112]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000e20:	f001 fcfc 	bl	800281c <HAL_TIM_ConfigClockSource>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e2a:	f000 f8de 	bl	8000fea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e2e:	4818      	ldr	r0, [pc, #96]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000e30:	f001 fad2 	bl	80023d8 <HAL_TIM_PWM_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e3a:	f000 f8d6 	bl	8000fea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e46:	f107 0320 	add.w	r3, r7, #32
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4810      	ldr	r0, [pc, #64]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000e4e:	f002 f851 	bl	8002ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e58:	f000 f8c7 	bl	8000fea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e5c:	2360      	movs	r3, #96	; 0x60
 8000e5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4619      	mov	r1, r3
 8000e72:	4807      	ldr	r0, [pc, #28]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000e74:	f001 fc10 	bl	8002698 <HAL_TIM_PWM_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e7e:	f000 f8b4 	bl	8000fea <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e82:	4803      	ldr	r0, [pc, #12]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000e84:	f000 f9a2 	bl	80011cc <HAL_TIM_MspPostInit>

}
 8000e88:	bf00      	nop
 8000e8a:	3738      	adds	r7, #56	; 0x38
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200001b8 	.word	0x200001b8
 8000e94:	40000400 	.word	0x40000400

08000e98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <MX_USART2_UART_Init+0x50>)
 8000ea0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ea4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ed0:	f002 f880 	bl	8002fd4 <HAL_UART_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eda:	f000 f886 	bl	8000fea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000248 	.word	0x20000248
 8000ee8:	40004400 	.word	0x40004400

08000eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <MX_GPIO_Init+0xd0>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a2d      	ldr	r2, [pc, #180]	; (8000fbc <MX_GPIO_Init+0xd0>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <MX_GPIO_Init+0xd0>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f18:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <MX_GPIO_Init+0xd0>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a27      	ldr	r2, [pc, #156]	; (8000fbc <MX_GPIO_Init+0xd0>)
 8000f1e:	f043 0308 	orr.w	r3, r3, #8
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <MX_GPIO_Init+0xd0>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0308 	and.w	r3, r3, #8
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLIGHT1_Pin|TLIGHT12_Pin|TLIGHT22_Pin|TLIGHT21_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000f36:	4822      	ldr	r0, [pc, #136]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f38:	f000 fd6d 	bl	8001a16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PLIGHT2_Pin|TLIGHT11_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000f42:	4820      	ldr	r0, [pc, #128]	; (8000fc4 <MX_GPIO_Init+0xd8>)
 8000f44:	f000 fd67 	bl	8001a16 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BT3_Pin BT0_Pin BT1_Pin */
  GPIO_InitStruct.Pin = BT3_Pin|BT0_Pin|BT1_Pin;
 8000f48:	2313      	movs	r3, #19
 8000f4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	4619      	mov	r1, r3
 8000f5a:	481a      	ldr	r0, [pc, #104]	; (8000fc4 <MX_GPIO_Init+0xd8>)
 8000f5c:	f000 fbc0 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT2_Pin */
  GPIO_InitStruct.Pin = BT2_Pin;
 8000f60:	2301      	movs	r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BT2_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	4619      	mov	r1, r3
 8000f72:	4813      	ldr	r0, [pc, #76]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f74:	f000 fbb4 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLIGHT1_Pin TLIGHT12_Pin TLIGHT22_Pin TLIGHT21_Pin */
  GPIO_InitStruct.Pin = PLIGHT1_Pin|TLIGHT12_Pin|TLIGHT22_Pin|TLIGHT21_Pin;
 8000f78:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000f7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2302      	movs	r3, #2
 8000f88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f92:	f000 fba5 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLIGHT2_Pin TLIGHT11_Pin */
  GPIO_InitStruct.Pin = PLIGHT2_Pin|TLIGHT11_Pin;
 8000f96:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000f9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	4619      	mov	r1, r3
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_GPIO_Init+0xd8>)
 8000fb0:	f000 fb96 	bl	80016e0 <HAL_GPIO_Init>

}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010c00 	.word	0x40010c00
 8000fc4:	40010800 	.word	0x40010800

08000fc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd8:	d103      	bne.n	8000fe2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		getKeyInput();
 8000fda:	f7ff fdcd 	bl	8000b78 <getKeyInput>
		timerRun();
 8000fde:	f000 f853 	bl	8001088 <timerRun>
	}else if(htim->Instance == TIM3){

	}
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fee:	b672      	cpsid	i
}
 8000ff0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <Error_Handler+0x8>

08000ff4 <setTimer>:
int TIME_CYCLE = 10; // Time cycle

int timer_counter[NUM_OF_TIMERS] = {0};
int timer_flag[NUM_OF_TIMERS] = {0};

void setTimer(int index, int duration) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIME_CYCLE;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <setTimer+0x30>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	fb92 f2f3 	sdiv	r2, r2, r3
 8001008:	4907      	ldr	r1, [pc, #28]	; (8001028 <setTimer+0x34>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <setTimer+0x38>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2100      	movs	r1, #0
 8001016:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	20000024 	.word	0x20000024
 8001028:	2000012c 	.word	0x2000012c
 800102c:	20000150 	.word	0x20000150

08001030 <clearTimer>:

void clearTimer(int index) {
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	timer_counter[index] = 0;
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <clearTimer+0x28>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2100      	movs	r1, #0
 800103e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_flag[index] = 0;
 8001042:	4a06      	ldr	r2, [pc, #24]	; (800105c <clearTimer+0x2c>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2100      	movs	r1, #0
 8001048:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	2000012c 	.word	0x2000012c
 800105c:	20000150 	.word	0x20000150

08001060 <clearAllTimer>:

void clearAllTimer() {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	e005      	b.n	8001078 <clearAllTimer+0x18>
		clearTimer(i);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ffdf 	bl	8001030 <clearTimer>
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3301      	adds	r3, #1
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b08      	cmp	r3, #8
 800107c:	ddf6      	ble.n	800106c <clearAllTimer+0xc>
	}
}
 800107e:	bf00      	nop
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <timerRun>:

void timerRun(){
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	e01c      	b.n	80010ce <timerRun+0x46>
		if (timer_counter[i] > 0){
 8001094:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <timerRun+0x58>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109c:	2b00      	cmp	r3, #0
 800109e:	dd13      	ble.n	80010c8 <timerRun+0x40>
			timer_counter[i]--;
 80010a0:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <timerRun+0x58>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a8:	1e5a      	subs	r2, r3, #1
 80010aa:	490d      	ldr	r1, [pc, #52]	; (80010e0 <timerRun+0x58>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <timerRun+0x58>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	dc04      	bgt.n	80010c8 <timerRun+0x40>
				timer_flag[i] = 1;
 80010be:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <timerRun+0x5c>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2101      	movs	r1, #1
 80010c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3301      	adds	r3, #1
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	dddf      	ble.n	8001094 <timerRun+0xc>
			}
		}
	}
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	2000012c 	.word	0x2000012c
 80010e4:	20000150 	.word	0x20000150

080010e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_MspInit+0x5c>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a14      	ldr	r2, [pc, #80]	; (8001144 <HAL_MspInit+0x5c>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_MspInit+0x5c>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_MspInit+0x5c>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_MspInit+0x5c>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <HAL_MspInit+0x5c>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_MspInit+0x60>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_MspInit+0x60>)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	40021000 	.word	0x40021000
 8001148:	40010000 	.word	0x40010000

0800114c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800115c:	d114      	bne.n	8001188 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_TIM_Base_MspInit+0x78>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a18      	ldr	r2, [pc, #96]	; (80011c4 <HAL_TIM_Base_MspInit+0x78>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_TIM_Base_MspInit+0x78>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	201c      	movs	r0, #28
 800117c:	f000 fa79 	bl	8001672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001180:	201c      	movs	r0, #28
 8001182:	f000 fa92 	bl	80016aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001186:	e018      	b.n	80011ba <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <HAL_TIM_Base_MspInit+0x7c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d113      	bne.n	80011ba <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <HAL_TIM_Base_MspInit+0x78>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <HAL_TIM_Base_MspInit+0x78>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	61d3      	str	r3, [r2, #28]
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_TIM_Base_MspInit+0x78>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	201d      	movs	r0, #29
 80011b0:	f000 fa5f 	bl	8001672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011b4:	201d      	movs	r0, #29
 80011b6:	f000 fa78 	bl	80016aa <HAL_NVIC_EnableIRQ>
}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40000400 	.word	0x40000400

080011cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <HAL_TIM_MspPostInit+0x58>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d117      	bne.n	800121c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_TIM_MspPostInit+0x5c>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <HAL_TIM_MspPostInit+0x5c>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_TIM_MspPostInit+0x5c>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZ_Pin;
 8001204:	2340      	movs	r3, #64	; 0x40
 8001206:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2302      	movs	r3, #2
 800120e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4619      	mov	r1, r3
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <HAL_TIM_MspPostInit+0x60>)
 8001218:	f000 fa62 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40000400 	.word	0x40000400
 8001228:	40021000 	.word	0x40021000
 800122c:	40010800 	.word	0x40010800

08001230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <HAL_UART_MspInit+0x88>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d12f      	bne.n	80012b0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <HAL_UART_MspInit+0x8c>)
 8001252:	69db      	ldr	r3, [r3, #28]
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_UART_MspInit+0x8c>)
 8001256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125a:	61d3      	str	r3, [r2, #28]
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_UART_MspInit+0x8c>)
 800125e:	69db      	ldr	r3, [r3, #28]
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <HAL_UART_MspInit+0x8c>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a13      	ldr	r2, [pc, #76]	; (80012bc <HAL_UART_MspInit+0x8c>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_UART_MspInit+0x8c>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001280:	2304      	movs	r3, #4
 8001282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	480b      	ldr	r0, [pc, #44]	; (80012c0 <HAL_UART_MspInit+0x90>)
 8001294:	f000 fa24 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001298:	2308      	movs	r3, #8
 800129a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <HAL_UART_MspInit+0x90>)
 80012ac:	f000 fa18 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40004400 	.word	0x40004400
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010800 	.word	0x40010800

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr

080012fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130a:	f000 f8bf 	bl	800148c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <TIM2_IRQHandler+0x10>)
 800131a:	f001 f8b5 	bl	8002488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000200 	.word	0x20000200

08001328 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <TIM3_IRQHandler+0x10>)
 800132e:	f001 f8ab 	bl	8002488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200001b8 	.word	0x200001b8

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f002 f802 	bl	8003374 <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20005000 	.word	0x20005000
 800139c:	00000400 	.word	0x00000400
 80013a0:	20000174 	.word	0x20000174
 80013a4:	200002a8 	.word	0x200002a8

080013a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013b4:	f7ff fff8 	bl	80013a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b8:	480b      	ldr	r0, [pc, #44]	; (80013e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013ba:	490c      	ldr	r1, [pc, #48]	; (80013ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013bc:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013d0:	4c09      	ldr	r4, [pc, #36]	; (80013f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013de:	f001 ffcf 	bl	8003380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013e2:	f7ff fc3f 	bl	8000c64 <main>
  bx lr
 80013e6:	4770      	bx	lr
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80013f0:	08003cdc 	.word	0x08003cdc
  ldr r2, =_sbss
 80013f4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80013f8:	200002a4 	.word	0x200002a4

080013fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC1_2_IRQHandler>
	...

08001400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_Init+0x28>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_Init+0x28>)
 800140a:	f043 0310 	orr.w	r3, r3, #16
 800140e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001410:	2003      	movs	r0, #3
 8001412:	f000 f923 	bl	800165c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001416:	200f      	movs	r0, #15
 8001418:	f000 f808 	bl	800142c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800141c:	f7ff fe64 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40022000 	.word	0x40022000

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_InitTick+0x54>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_InitTick+0x58>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	fbb3 f3f1 	udiv	r3, r3, r1
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f93b 	bl	80016c6 <HAL_SYSTICK_Config>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e00e      	b.n	8001478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d80a      	bhi.n	8001476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001460:	2200      	movs	r2, #0
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f000 f903 	bl	8001672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <HAL_InitTick+0x5c>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000028 	.word	0x20000028
 8001484:	20000030 	.word	0x20000030
 8001488:	2000002c 	.word	0x2000002c

0800148c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_IncTick+0x1c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_IncTick+0x20>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a03      	ldr	r2, [pc, #12]	; (80014ac <HAL_IncTick+0x20>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	20000030 	.word	0x20000030
 80014ac:	20000290 	.word	0x20000290

080014b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return uwTick;
 80014b4:	4b02      	ldr	r3, [pc, #8]	; (80014c0 <HAL_GetTick+0x10>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	20000290 	.word	0x20000290

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0b      	blt.n	8001552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4906      	ldr	r1, [pc, #24]	; (800155c <__NVIC_EnableIRQ+0x34>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	; (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
         );
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001628:	d301      	bcc.n	800162e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162a:	2301      	movs	r3, #1
 800162c:	e00f      	b.n	800164e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <SysTick_Config+0x40>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001636:	210f      	movs	r1, #15
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f7ff ff90 	bl	8001560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <SysTick_Config+0x40>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <SysTick_Config+0x40>)
 8001648:	2207      	movs	r2, #7
 800164a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	e000e010 	.word	0xe000e010

0800165c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff2d 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001684:	f7ff ff42 	bl	800150c <__NVIC_GetPriorityGrouping>
 8001688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	6978      	ldr	r0, [r7, #20]
 8001690:	f7ff ff90 	bl	80015b4 <NVIC_EncodePriority>
 8001694:	4602      	mov	r2, r0
 8001696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff5f 	bl	8001560 <__NVIC_SetPriority>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff35 	bl	8001528 <__NVIC_EnableIRQ>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffa2 	bl	8001618 <SysTick_Config>
 80016d4:	4603      	mov	r3, r0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b08b      	sub	sp, #44	; 0x2c
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f2:	e169      	b.n	80019c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f4:	2201      	movs	r2, #1
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 8158 	bne.w	80019c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4a9a      	ldr	r2, [pc, #616]	; (8001980 <HAL_GPIO_Init+0x2a0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d05e      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 800171c:	4a98      	ldr	r2, [pc, #608]	; (8001980 <HAL_GPIO_Init+0x2a0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d875      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001722:	4a98      	ldr	r2, [pc, #608]	; (8001984 <HAL_GPIO_Init+0x2a4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d058      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001728:	4a96      	ldr	r2, [pc, #600]	; (8001984 <HAL_GPIO_Init+0x2a4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d86f      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800172e:	4a96      	ldr	r2, [pc, #600]	; (8001988 <HAL_GPIO_Init+0x2a8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d052      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001734:	4a94      	ldr	r2, [pc, #592]	; (8001988 <HAL_GPIO_Init+0x2a8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d869      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800173a:	4a94      	ldr	r2, [pc, #592]	; (800198c <HAL_GPIO_Init+0x2ac>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d04c      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001740:	4a92      	ldr	r2, [pc, #584]	; (800198c <HAL_GPIO_Init+0x2ac>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d863      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001746:	4a92      	ldr	r2, [pc, #584]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d046      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 800174c:	4a90      	ldr	r2, [pc, #576]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d85d      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001752:	2b12      	cmp	r3, #18
 8001754:	d82a      	bhi.n	80017ac <HAL_GPIO_Init+0xcc>
 8001756:	2b12      	cmp	r3, #18
 8001758:	d859      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800175a:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <HAL_GPIO_Init+0x80>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	080017db 	.word	0x080017db
 8001764:	080017b5 	.word	0x080017b5
 8001768:	080017c7 	.word	0x080017c7
 800176c:	08001809 	.word	0x08001809
 8001770:	0800180f 	.word	0x0800180f
 8001774:	0800180f 	.word	0x0800180f
 8001778:	0800180f 	.word	0x0800180f
 800177c:	0800180f 	.word	0x0800180f
 8001780:	0800180f 	.word	0x0800180f
 8001784:	0800180f 	.word	0x0800180f
 8001788:	0800180f 	.word	0x0800180f
 800178c:	0800180f 	.word	0x0800180f
 8001790:	0800180f 	.word	0x0800180f
 8001794:	0800180f 	.word	0x0800180f
 8001798:	0800180f 	.word	0x0800180f
 800179c:	0800180f 	.word	0x0800180f
 80017a0:	0800180f 	.word	0x0800180f
 80017a4:	080017bd 	.word	0x080017bd
 80017a8:	080017d1 	.word	0x080017d1
 80017ac:	4a79      	ldr	r2, [pc, #484]	; (8001994 <HAL_GPIO_Init+0x2b4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017b2:	e02c      	b.n	800180e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	623b      	str	r3, [r7, #32]
          break;
 80017ba:	e029      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	3304      	adds	r3, #4
 80017c2:	623b      	str	r3, [r7, #32]
          break;
 80017c4:	e024      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	3308      	adds	r3, #8
 80017cc:	623b      	str	r3, [r7, #32]
          break;
 80017ce:	e01f      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	330c      	adds	r3, #12
 80017d6:	623b      	str	r3, [r7, #32]
          break;
 80017d8:	e01a      	b.n	8001810 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017e2:	2304      	movs	r3, #4
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e013      	b.n	8001810 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f0:	2308      	movs	r3, #8
 80017f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	611a      	str	r2, [r3, #16]
          break;
 80017fa:	e009      	b.n	8001810 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017fc:	2308      	movs	r3, #8
 80017fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	615a      	str	r2, [r3, #20]
          break;
 8001806:	e003      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
          break;
 800180c:	e000      	b.n	8001810 <HAL_GPIO_Init+0x130>
          break;
 800180e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2bff      	cmp	r3, #255	; 0xff
 8001814:	d801      	bhi.n	800181a <HAL_GPIO_Init+0x13a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	e001      	b.n	800181e <HAL_GPIO_Init+0x13e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3304      	adds	r3, #4
 800181e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2bff      	cmp	r3, #255	; 0xff
 8001824:	d802      	bhi.n	800182c <HAL_GPIO_Init+0x14c>
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	e002      	b.n	8001832 <HAL_GPIO_Init+0x152>
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	3b08      	subs	r3, #8
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	210f      	movs	r1, #15
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	6a39      	ldr	r1, [r7, #32]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	431a      	orrs	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 80b1 	beq.w	80019c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001860:	4b4d      	ldr	r3, [pc, #308]	; (8001998 <HAL_GPIO_Init+0x2b8>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a4c      	ldr	r2, [pc, #304]	; (8001998 <HAL_GPIO_Init+0x2b8>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b4a      	ldr	r3, [pc, #296]	; (8001998 <HAL_GPIO_Init+0x2b8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001878:	4a48      	ldr	r2, [pc, #288]	; (800199c <HAL_GPIO_Init+0x2bc>)
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001884:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	220f      	movs	r2, #15
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a40      	ldr	r2, [pc, #256]	; (80019a0 <HAL_GPIO_Init+0x2c0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d013      	beq.n	80018cc <HAL_GPIO_Init+0x1ec>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a3f      	ldr	r2, [pc, #252]	; (80019a4 <HAL_GPIO_Init+0x2c4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d00d      	beq.n	80018c8 <HAL_GPIO_Init+0x1e8>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a3e      	ldr	r2, [pc, #248]	; (80019a8 <HAL_GPIO_Init+0x2c8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d007      	beq.n	80018c4 <HAL_GPIO_Init+0x1e4>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a3d      	ldr	r2, [pc, #244]	; (80019ac <HAL_GPIO_Init+0x2cc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_GPIO_Init+0x1e0>
 80018bc:	2303      	movs	r3, #3
 80018be:	e006      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c0:	2304      	movs	r3, #4
 80018c2:	e004      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e002      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018cc:	2300      	movs	r3, #0
 80018ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d0:	f002 0203 	and.w	r2, r2, #3
 80018d4:	0092      	lsls	r2, r2, #2
 80018d6:	4093      	lsls	r3, r2
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018de:	492f      	ldr	r1, [pc, #188]	; (800199c <HAL_GPIO_Init+0x2bc>)
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	3302      	adds	r3, #2
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	492c      	ldr	r1, [pc, #176]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	608b      	str	r3, [r1, #8]
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	43db      	mvns	r3, r3
 800190e:	4928      	ldr	r1, [pc, #160]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001910:	4013      	ands	r3, r2
 8001912:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	4922      	ldr	r1, [pc, #136]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	60cb      	str	r3, [r1, #12]
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	43db      	mvns	r3, r3
 8001936:	491e      	ldr	r1, [pc, #120]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001938:	4013      	ands	r3, r2
 800193a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4918      	ldr	r1, [pc, #96]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	43db      	mvns	r3, r3
 800195e:	4914      	ldr	r1, [pc, #80]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001960:	4013      	ands	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d021      	beq.n	80019b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	490e      	ldr	r1, [pc, #56]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
 800197c:	e021      	b.n	80019c2 <HAL_GPIO_Init+0x2e2>
 800197e:	bf00      	nop
 8001980:	10320000 	.word	0x10320000
 8001984:	10310000 	.word	0x10310000
 8001988:	10220000 	.word	0x10220000
 800198c:	10210000 	.word	0x10210000
 8001990:	10120000 	.word	0x10120000
 8001994:	10110000 	.word	0x10110000
 8001998:	40021000 	.word	0x40021000
 800199c:	40010000 	.word	0x40010000
 80019a0:	40010800 	.word	0x40010800
 80019a4:	40010c00 	.word	0x40010c00
 80019a8:	40011000 	.word	0x40011000
 80019ac:	40011400 	.word	0x40011400
 80019b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_GPIO_Init+0x304>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	4909      	ldr	r1, [pc, #36]	; (80019e4 <HAL_GPIO_Init+0x304>)
 80019be:	4013      	ands	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	3301      	adds	r3, #1
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	fa22 f303 	lsr.w	r3, r2, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f47f ae8e 	bne.w	80016f4 <HAL_GPIO_Init+0x14>
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	372c      	adds	r7, #44	; 0x2c
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e001      	b.n	8001a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	807b      	strh	r3, [r7, #2]
 8001a22:	4613      	mov	r3, r2
 8001a24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a26:	787b      	ldrb	r3, [r7, #1]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2c:	887a      	ldrh	r2, [r7, #2]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a32:	e003      	b.n	8001a3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	041a      	lsls	r2, r3, #16
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	611a      	str	r2, [r3, #16]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b085      	sub	sp, #20
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a58:	887a      	ldrh	r2, [r7, #2]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	041a      	lsls	r2, r3, #16
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	887b      	ldrh	r3, [r7, #2]
 8001a66:	400b      	ands	r3, r1
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	611a      	str	r2, [r3, #16]
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e26c      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8087 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a98:	4b92      	ldr	r3, [pc, #584]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d00c      	beq.n	8001abe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aa4:	4b8f      	ldr	r3, [pc, #572]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d112      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x5e>
 8001ab0:	4b8c      	ldr	r3, [pc, #560]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abc:	d10b      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abe:	4b89      	ldr	r3, [pc, #548]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d06c      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x12c>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d168      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e246      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x76>
 8001ae0:	4b80      	ldr	r3, [pc, #512]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a7f      	ldr	r2, [pc, #508]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e02e      	b.n	8001b4c <HAL_RCC_OscConfig+0xd4>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x98>
 8001af6:	4b7b      	ldr	r3, [pc, #492]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a7a      	ldr	r2, [pc, #488]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b78      	ldr	r3, [pc, #480]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a77      	ldr	r2, [pc, #476]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e01d      	b.n	8001b4c <HAL_RCC_OscConfig+0xd4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0xbc>
 8001b1a:	4b72      	ldr	r3, [pc, #456]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a71      	ldr	r2, [pc, #452]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	4b6f      	ldr	r3, [pc, #444]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a6e      	ldr	r2, [pc, #440]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e00b      	b.n	8001b4c <HAL_RCC_OscConfig+0xd4>
 8001b34:	4b6b      	ldr	r3, [pc, #428]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a6a      	ldr	r2, [pc, #424]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b68      	ldr	r3, [pc, #416]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a67      	ldr	r2, [pc, #412]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d013      	beq.n	8001b7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff fcac 	bl	80014b0 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff fca8 	bl	80014b0 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e1fa      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	4b5d      	ldr	r3, [pc, #372]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0xe4>
 8001b7a:	e014      	b.n	8001ba6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fc98 	bl	80014b0 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff fc94 	bl	80014b0 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1e6      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b96:	4b53      	ldr	r3, [pc, #332]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x10c>
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d063      	beq.n	8001c7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bb2:	4b4c      	ldr	r3, [pc, #304]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bbe:	4b49      	ldr	r3, [pc, #292]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d11c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x18c>
 8001bca:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d116      	bne.n	8001c04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd6:	4b43      	ldr	r3, [pc, #268]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <HAL_RCC_OscConfig+0x176>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e1ba      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4939      	ldr	r1, [pc, #228]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	e03a      	b.n	8001c7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d020      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c0c:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7ff fc4d 	bl	80014b0 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fc49 	bl	80014b0 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e19b      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4927      	ldr	r1, [pc, #156]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
 8001c4c:	e015      	b.n	8001c7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fc2c 	bl	80014b0 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5c:	f7ff fc28 	bl	80014b0 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e17a      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d03a      	beq.n	8001cfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d019      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c94:	f7ff fc0c 	bl	80014b0 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fc08 	bl	80014b0 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e15a      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f000 facc 	bl	8002258 <RCC_Delay>
 8001cc0:	e01c      	b.n	8001cfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc8:	f7ff fbf2 	bl	80014b0 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cce:	e00f      	b.n	8001cf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fbee 	bl	80014b0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d908      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e140      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	42420000 	.word	0x42420000
 8001cec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf0:	4b9e      	ldr	r3, [pc, #632]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1e9      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80a6 	beq.w	8001e56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0e:	4b97      	ldr	r3, [pc, #604]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10d      	bne.n	8001d36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4b94      	ldr	r3, [pc, #592]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	4a93      	ldr	r2, [pc, #588]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	61d3      	str	r3, [r2, #28]
 8001d26:	4b91      	ldr	r3, [pc, #580]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d32:	2301      	movs	r3, #1
 8001d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	4b8e      	ldr	r3, [pc, #568]	; (8001f70 <HAL_RCC_OscConfig+0x4f8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d118      	bne.n	8001d74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d42:	4b8b      	ldr	r3, [pc, #556]	; (8001f70 <HAL_RCC_OscConfig+0x4f8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a8a      	ldr	r2, [pc, #552]	; (8001f70 <HAL_RCC_OscConfig+0x4f8>)
 8001d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4e:	f7ff fbaf 	bl	80014b0 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d56:	f7ff fbab 	bl	80014b0 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b64      	cmp	r3, #100	; 0x64
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e0fd      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	4b81      	ldr	r3, [pc, #516]	; (8001f70 <HAL_RCC_OscConfig+0x4f8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x312>
 8001d7c:	4b7b      	ldr	r3, [pc, #492]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4a7a      	ldr	r2, [pc, #488]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6213      	str	r3, [r2, #32]
 8001d88:	e02d      	b.n	8001de6 <HAL_RCC_OscConfig+0x36e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x334>
 8001d92:	4b76      	ldr	r3, [pc, #472]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a75      	ldr	r2, [pc, #468]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	6213      	str	r3, [r2, #32]
 8001d9e:	4b73      	ldr	r3, [pc, #460]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4a72      	ldr	r2, [pc, #456]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	f023 0304 	bic.w	r3, r3, #4
 8001da8:	6213      	str	r3, [r2, #32]
 8001daa:	e01c      	b.n	8001de6 <HAL_RCC_OscConfig+0x36e>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b05      	cmp	r3, #5
 8001db2:	d10c      	bne.n	8001dce <HAL_RCC_OscConfig+0x356>
 8001db4:	4b6d      	ldr	r3, [pc, #436]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a6c      	ldr	r2, [pc, #432]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	4b6a      	ldr	r3, [pc, #424]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4a69      	ldr	r2, [pc, #420]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6213      	str	r3, [r2, #32]
 8001dcc:	e00b      	b.n	8001de6 <HAL_RCC_OscConfig+0x36e>
 8001dce:	4b67      	ldr	r3, [pc, #412]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4a66      	ldr	r2, [pc, #408]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	6213      	str	r3, [r2, #32]
 8001dda:	4b64      	ldr	r3, [pc, #400]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4a63      	ldr	r2, [pc, #396]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	f023 0304 	bic.w	r3, r3, #4
 8001de4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d015      	beq.n	8001e1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7ff fb5f 	bl	80014b0 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df6:	f7ff fb5b 	bl	80014b0 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e0ab      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0c:	4b57      	ldr	r3, [pc, #348]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0ee      	beq.n	8001df6 <HAL_RCC_OscConfig+0x37e>
 8001e18:	e014      	b.n	8001e44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fb49 	bl	80014b0 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7ff fb45 	bl	80014b0 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e095      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e38:	4b4c      	ldr	r3, [pc, #304]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1ee      	bne.n	8001e22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e44:	7dfb      	ldrb	r3, [r7, #23]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d105      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4a:	4b48      	ldr	r3, [pc, #288]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	4a47      	ldr	r2, [pc, #284]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 8081 	beq.w	8001f62 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e60:	4b42      	ldr	r3, [pc, #264]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d061      	beq.n	8001f30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d146      	bne.n	8001f02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e74:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <HAL_RCC_OscConfig+0x4fc>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7ff fb19 	bl	80014b0 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e82:	f7ff fb15 	bl	80014b0 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e067      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e94:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f0      	bne.n	8001e82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea8:	d108      	bne.n	8001ebc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eaa:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	492d      	ldr	r1, [pc, #180]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a19      	ldr	r1, [r3, #32]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	4927      	ldr	r1, [pc, #156]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <HAL_RCC_OscConfig+0x4fc>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7ff fae9 	bl	80014b0 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7ff fae5 	bl	80014b0 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e037      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x46a>
 8001f00:	e02f      	b.n	8001f62 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f02:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <HAL_RCC_OscConfig+0x4fc>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff fad2 	bl	80014b0 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff face 	bl	80014b0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e020      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x498>
 8001f2e:	e018      	b.n	8001f62 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e013      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d106      	bne.n	8001f5e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40007000 	.word	0x40007000
 8001f74:	42420060 	.word	0x42420060

08001f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0d0      	b.n	800212e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b6a      	ldr	r3, [pc, #424]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d910      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b67      	ldr	r3, [pc, #412]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 0207 	bic.w	r2, r3, #7
 8001fa2:	4965      	ldr	r1, [pc, #404]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b63      	ldr	r3, [pc, #396]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0b8      	b.n	800212e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d020      	beq.n	800200a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd4:	4b59      	ldr	r3, [pc, #356]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4a58      	ldr	r2, [pc, #352]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fec:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4a52      	ldr	r2, [pc, #328]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ff6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff8:	4b50      	ldr	r3, [pc, #320]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	494d      	ldr	r1, [pc, #308]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d040      	beq.n	8002098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	4b47      	ldr	r3, [pc, #284]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d115      	bne.n	8002056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e07f      	b.n	800212e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002036:	4b41      	ldr	r3, [pc, #260]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d109      	bne.n	8002056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e073      	b.n	800212e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002046:	4b3d      	ldr	r3, [pc, #244]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e06b      	b.n	800212e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002056:	4b39      	ldr	r3, [pc, #228]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f023 0203 	bic.w	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4936      	ldr	r1, [pc, #216]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002068:	f7ff fa22 	bl	80014b0 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206e:	e00a      	b.n	8002086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002070:	f7ff fa1e 	bl	80014b0 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e053      	b.n	800212e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 020c 	and.w	r2, r3, #12
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	429a      	cmp	r2, r3
 8002096:	d1eb      	bne.n	8002070 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002098:	4b27      	ldr	r3, [pc, #156]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d210      	bcs.n	80020c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 0207 	bic.w	r2, r3, #7
 80020ae:	4922      	ldr	r1, [pc, #136]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e032      	b.n	800212e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4916      	ldr	r1, [pc, #88]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d009      	beq.n	8002106 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	490e      	ldr	r1, [pc, #56]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002106:	f000 f821 	bl	800214c <HAL_RCC_GetSysClockFreq>
 800210a:	4602      	mov	r2, r0
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	490a      	ldr	r1, [pc, #40]	; (8002140 <HAL_RCC_ClockConfig+0x1c8>)
 8002118:	5ccb      	ldrb	r3, [r1, r3]
 800211a:	fa22 f303 	lsr.w	r3, r2, r3
 800211e:	4a09      	ldr	r2, [pc, #36]	; (8002144 <HAL_RCC_ClockConfig+0x1cc>)
 8002120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCC_ClockConfig+0x1d0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff f980 	bl	800142c <HAL_InitTick>

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40022000 	.word	0x40022000
 800213c:	40021000 	.word	0x40021000
 8002140:	08003c74 	.word	0x08003c74
 8002144:	20000028 	.word	0x20000028
 8002148:	2000002c 	.word	0x2000002c

0800214c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b04      	cmp	r3, #4
 8002174:	d002      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x30>
 8002176:	2b08      	cmp	r3, #8
 8002178:	d003      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x36>
 800217a:	e027      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800217e:	613b      	str	r3, [r7, #16]
      break;
 8002180:	e027      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	0c9b      	lsrs	r3, r3, #18
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800218c:	5cd3      	ldrb	r3, [r2, r3]
 800218e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d010      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	0c5b      	lsrs	r3, r3, #17
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a0d      	ldr	r2, [pc, #52]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ae:	fb02 f203 	mul.w	r2, r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	e004      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021c0:	fb02 f303 	mul.w	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	613b      	str	r3, [r7, #16]
      break;
 80021ca:	e002      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ce:	613b      	str	r3, [r7, #16]
      break;
 80021d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d2:	693b      	ldr	r3, [r7, #16]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	007a1200 	.word	0x007a1200
 80021e8:	08003c8c 	.word	0x08003c8c
 80021ec:	08003c9c 	.word	0x08003c9c
 80021f0:	003d0900 	.word	0x003d0900

080021f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f8:	4b02      	ldr	r3, [pc, #8]	; (8002204 <HAL_RCC_GetHCLKFreq+0x10>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	20000028 	.word	0x20000028

08002208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800220c:	f7ff fff2 	bl	80021f4 <HAL_RCC_GetHCLKFreq>
 8002210:	4602      	mov	r2, r0
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	4903      	ldr	r1, [pc, #12]	; (800222c <HAL_RCC_GetPCLK1Freq+0x24>)
 800221e:	5ccb      	ldrb	r3, [r1, r3]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	08003c84 	.word	0x08003c84

08002230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002234:	f7ff ffde 	bl	80021f4 <HAL_RCC_GetHCLKFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	0adb      	lsrs	r3, r3, #11
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4903      	ldr	r1, [pc, #12]	; (8002254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	08003c84 	.word	0x08003c84

08002258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <RCC_Delay+0x34>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <RCC_Delay+0x38>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	0a5b      	lsrs	r3, r3, #9
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002274:	bf00      	nop
  }
  while (Delay --);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	60fa      	str	r2, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f9      	bne.n	8002274 <RCC_Delay+0x1c>
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	20000028 	.word	0x20000028
 8002290:	10624dd3 	.word	0x10624dd3

08002294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e041      	b.n	800232a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe ff46 	bl	800114c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3304      	adds	r3, #4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4610      	mov	r0, r2
 80022d4:	f000 fb8e 	bl	80029f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d001      	beq.n	800234c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e03a      	b.n	80023c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a18      	ldr	r2, [pc, #96]	; (80023cc <HAL_TIM_Base_Start_IT+0x98>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00e      	beq.n	800238c <HAL_TIM_Base_Start_IT+0x58>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002376:	d009      	beq.n	800238c <HAL_TIM_Base_Start_IT+0x58>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d004      	beq.n	800238c <HAL_TIM_Base_Start_IT+0x58>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a13      	ldr	r2, [pc, #76]	; (80023d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d111      	bne.n	80023b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b06      	cmp	r3, #6
 800239c:	d010      	beq.n	80023c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0201 	orr.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ae:	e007      	b.n	80023c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	40012c00 	.word	0x40012c00
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800

080023d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e041      	b.n	800246e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f839 	bl	8002476 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3304      	adds	r3, #4
 8002414:	4619      	mov	r1, r3
 8002416:	4610      	mov	r0, r2
 8002418:	f000 faec 	bl	80029f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b02      	cmp	r3, #2
 800249c:	d122      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d11b      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0202 	mvn.w	r2, #2
 80024b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fa76 	bl	80029bc <HAL_TIM_IC_CaptureCallback>
 80024d0:	e005      	b.n	80024de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fa69 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 fa78 	bl	80029ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d122      	bne.n	8002538 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d11b      	bne.n	8002538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0204 	mvn.w	r2, #4
 8002508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2202      	movs	r2, #2
 800250e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fa4c 	bl	80029bc <HAL_TIM_IC_CaptureCallback>
 8002524:	e005      	b.n	8002532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fa3f 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fa4e 	bl	80029ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b08      	cmp	r3, #8
 8002544:	d122      	bne.n	800258c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b08      	cmp	r3, #8
 8002552:	d11b      	bne.n	800258c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0208 	mvn.w	r2, #8
 800255c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2204      	movs	r2, #4
 8002562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fa22 	bl	80029bc <HAL_TIM_IC_CaptureCallback>
 8002578:	e005      	b.n	8002586 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fa15 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fa24 	bl	80029ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b10      	cmp	r3, #16
 8002598:	d122      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d11b      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0210 	mvn.w	r2, #16
 80025b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2208      	movs	r2, #8
 80025b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f9f8 	bl	80029bc <HAL_TIM_IC_CaptureCallback>
 80025cc:	e005      	b.n	80025da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f9eb 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f9fa 	bl	80029ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d10e      	bne.n	800260c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d107      	bne.n	800260c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0201 	mvn.w	r2, #1
 8002604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe fcde 	bl	8000fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002616:	2b80      	cmp	r3, #128	; 0x80
 8002618:	d10e      	bne.n	8002638 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d107      	bne.n	8002638 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fcc5 	bl	8002fc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	2b40      	cmp	r3, #64	; 0x40
 8002644:	d10e      	bne.n	8002664 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002650:	2b40      	cmp	r3, #64	; 0x40
 8002652:	d107      	bne.n	8002664 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800265c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f9be 	bl	80029e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b20      	cmp	r3, #32
 8002670:	d10e      	bne.n	8002690 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b20      	cmp	r3, #32
 800267e:	d107      	bne.n	8002690 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0220 	mvn.w	r2, #32
 8002688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fc90 	bl	8002fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e0ae      	b.n	8002814 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b0c      	cmp	r3, #12
 80026c2:	f200 809f 	bhi.w	8002804 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80026c6:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026cc:	08002701 	.word	0x08002701
 80026d0:	08002805 	.word	0x08002805
 80026d4:	08002805 	.word	0x08002805
 80026d8:	08002805 	.word	0x08002805
 80026dc:	08002741 	.word	0x08002741
 80026e0:	08002805 	.word	0x08002805
 80026e4:	08002805 	.word	0x08002805
 80026e8:	08002805 	.word	0x08002805
 80026ec:	08002783 	.word	0x08002783
 80026f0:	08002805 	.word	0x08002805
 80026f4:	08002805 	.word	0x08002805
 80026f8:	08002805 	.word	0x08002805
 80026fc:	080027c3 	.word	0x080027c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f9d6 	bl	8002ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0208 	orr.w	r2, r2, #8
 800271a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0204 	bic.w	r2, r2, #4
 800272a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6999      	ldr	r1, [r3, #24]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	619a      	str	r2, [r3, #24]
      break;
 800273e:	e064      	b.n	800280a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fa1c 	bl	8002b84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699a      	ldr	r2, [r3, #24]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800275a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699a      	ldr	r2, [r3, #24]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800276a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6999      	ldr	r1, [r3, #24]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	021a      	lsls	r2, r3, #8
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	619a      	str	r2, [r3, #24]
      break;
 8002780:	e043      	b.n	800280a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	4618      	mov	r0, r3
 800278a:	f000 fa65 	bl	8002c58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0208 	orr.w	r2, r2, #8
 800279c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69da      	ldr	r2, [r3, #28]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0204 	bic.w	r2, r2, #4
 80027ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69d9      	ldr	r1, [r3, #28]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	61da      	str	r2, [r3, #28]
      break;
 80027c0:	e023      	b.n	800280a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68b9      	ldr	r1, [r7, #8]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 faaf 	bl	8002d2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	69da      	ldr	r2, [r3, #28]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	69da      	ldr	r2, [r3, #28]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69d9      	ldr	r1, [r3, #28]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	021a      	lsls	r2, r3, #8
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	61da      	str	r2, [r3, #28]
      break;
 8002802:	e002      	b.n	800280a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	75fb      	strb	r3, [r7, #23]
      break;
 8002808:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002812:	7dfb      	ldrb	r3, [r7, #23]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_TIM_ConfigClockSource+0x1c>
 8002834:	2302      	movs	r3, #2
 8002836:	e0b4      	b.n	80029a2 <HAL_TIM_ConfigClockSource+0x186>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800285e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002870:	d03e      	beq.n	80028f0 <HAL_TIM_ConfigClockSource+0xd4>
 8002872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002876:	f200 8087 	bhi.w	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 800287a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287e:	f000 8086 	beq.w	800298e <HAL_TIM_ConfigClockSource+0x172>
 8002882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002886:	d87f      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 8002888:	2b70      	cmp	r3, #112	; 0x70
 800288a:	d01a      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0xa6>
 800288c:	2b70      	cmp	r3, #112	; 0x70
 800288e:	d87b      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 8002890:	2b60      	cmp	r3, #96	; 0x60
 8002892:	d050      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x11a>
 8002894:	2b60      	cmp	r3, #96	; 0x60
 8002896:	d877      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 8002898:	2b50      	cmp	r3, #80	; 0x50
 800289a:	d03c      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0xfa>
 800289c:	2b50      	cmp	r3, #80	; 0x50
 800289e:	d873      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 80028a0:	2b40      	cmp	r3, #64	; 0x40
 80028a2:	d058      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x13a>
 80028a4:	2b40      	cmp	r3, #64	; 0x40
 80028a6:	d86f      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 80028a8:	2b30      	cmp	r3, #48	; 0x30
 80028aa:	d064      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x15a>
 80028ac:	2b30      	cmp	r3, #48	; 0x30
 80028ae:	d86b      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d060      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x15a>
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d867      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d05c      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x15a>
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d05a      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x15a>
 80028c0:	e062      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6899      	ldr	r1, [r3, #8]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f000 faf0 	bl	8002eb6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	609a      	str	r2, [r3, #8]
      break;
 80028ee:	e04f      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6899      	ldr	r1, [r3, #8]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f000 fad9 	bl	8002eb6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002912:	609a      	str	r2, [r3, #8]
      break;
 8002914:	e03c      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6859      	ldr	r1, [r3, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	461a      	mov	r2, r3
 8002924:	f000 fa50 	bl	8002dc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2150      	movs	r1, #80	; 0x50
 800292e:	4618      	mov	r0, r3
 8002930:	f000 faa7 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002934:	e02c      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	461a      	mov	r2, r3
 8002944:	f000 fa6e 	bl	8002e24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2160      	movs	r1, #96	; 0x60
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fa97 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002954:	e01c      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	461a      	mov	r2, r3
 8002964:	f000 fa30 	bl	8002dc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2140      	movs	r1, #64	; 0x40
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fa87 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002974:	e00c      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4619      	mov	r1, r3
 8002980:	4610      	mov	r0, r2
 8002982:	f000 fa7e 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002986:	e003      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      break;
 800298c:	e000      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800298e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
	...

080029f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a29      	ldr	r2, [pc, #164]	; (8002aac <TIM_Base_SetConfig+0xb8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00b      	beq.n	8002a24 <TIM_Base_SetConfig+0x30>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a12:	d007      	beq.n	8002a24 <TIM_Base_SetConfig+0x30>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a26      	ldr	r2, [pc, #152]	; (8002ab0 <TIM_Base_SetConfig+0xbc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d003      	beq.n	8002a24 <TIM_Base_SetConfig+0x30>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a25      	ldr	r2, [pc, #148]	; (8002ab4 <TIM_Base_SetConfig+0xc0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d108      	bne.n	8002a36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a1c      	ldr	r2, [pc, #112]	; (8002aac <TIM_Base_SetConfig+0xb8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00b      	beq.n	8002a56 <TIM_Base_SetConfig+0x62>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a44:	d007      	beq.n	8002a56 <TIM_Base_SetConfig+0x62>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <TIM_Base_SetConfig+0xbc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d003      	beq.n	8002a56 <TIM_Base_SetConfig+0x62>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <TIM_Base_SetConfig+0xc0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d108      	bne.n	8002a68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <TIM_Base_SetConfig+0xb8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d103      	bne.n	8002a9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	615a      	str	r2, [r3, #20]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	40012c00 	.word	0x40012c00
 8002ab0:	40000400 	.word	0x40000400
 8002ab4:	40000800 	.word	0x40000800

08002ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f023 0201 	bic.w	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0303 	bic.w	r3, r3, #3
 8002aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f023 0302 	bic.w	r3, r3, #2
 8002b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <TIM_OC1_SetConfig+0xc8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d10c      	bne.n	8002b2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f023 0308 	bic.w	r3, r3, #8
 8002b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f023 0304 	bic.w	r3, r3, #4
 8002b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <TIM_OC1_SetConfig+0xc8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d111      	bne.n	8002b5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	621a      	str	r2, [r3, #32]
}
 8002b74:	bf00      	nop
 8002b76:	371c      	adds	r7, #28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40012c00 	.word	0x40012c00

08002b84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f023 0210 	bic.w	r2, r3, #16
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f023 0320 	bic.w	r3, r3, #32
 8002bce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <TIM_OC2_SetConfig+0xd0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d10d      	bne.n	8002c00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <TIM_OC2_SetConfig+0xd0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d113      	bne.n	8002c30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	621a      	str	r2, [r3, #32]
}
 8002c4a:	bf00      	nop
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	40012c00 	.word	0x40012c00

08002c58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0303 	bic.w	r3, r3, #3
 8002c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a1d      	ldr	r2, [pc, #116]	; (8002d28 <TIM_OC3_SetConfig+0xd0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d10d      	bne.n	8002cd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <TIM_OC3_SetConfig+0xd0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d113      	bne.n	8002d02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	621a      	str	r2, [r3, #32]
}
 8002d1c:	bf00      	nop
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40012c00 	.word	0x40012c00

08002d2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	031b      	lsls	r3, r3, #12
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a0f      	ldr	r2, [pc, #60]	; (8002dc4 <TIM_OC4_SetConfig+0x98>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d109      	bne.n	8002da0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	019b      	lsls	r3, r3, #6
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	621a      	str	r2, [r3, #32]
}
 8002dba:	bf00      	nop
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr
 8002dc4:	40012c00 	.word	0x40012c00

08002dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	f023 0201 	bic.w	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f023 030a 	bic.w	r3, r3, #10
 8002e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	621a      	str	r2, [r3, #32]
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f023 0210 	bic.w	r2, r3, #16
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	031b      	lsls	r3, r3, #12
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	621a      	str	r2, [r3, #32]
}
 8002e78:	bf00      	nop
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f043 0307 	orr.w	r3, r3, #7
 8002ea4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	609a      	str	r2, [r3, #8]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b087      	sub	sp, #28
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	021a      	lsls	r2, r3, #8
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	609a      	str	r2, [r3, #8]
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e046      	b.n	8002f9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a16      	ldr	r2, [pc, #88]	; (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00e      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f58:	d009      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a12      	ldr	r2, [pc, #72]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a10      	ldr	r2, [pc, #64]	; (8002fac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10c      	bne.n	8002f88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800

08002fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e042      	b.n	800306c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe f918 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2224      	movs	r2, #36	; 0x24
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f91d 	bl	8003258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800302c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800303c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800304c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	4613      	mov	r3, r2
 8003082:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b20      	cmp	r3, #32
 8003092:	d16d      	bne.n	8003170 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_UART_Transmit+0x2c>
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e066      	b.n	8003172 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2221      	movs	r2, #33	; 0x21
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030b2:	f7fe f9fd 	bl	80014b0 <HAL_GetTick>
 80030b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	88fa      	ldrh	r2, [r7, #6]
 80030bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	88fa      	ldrh	r2, [r7, #6]
 80030c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030cc:	d108      	bne.n	80030e0 <HAL_UART_Transmit+0x6c>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d104      	bne.n	80030e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	e003      	b.n	80030e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030e8:	e02a      	b.n	8003140 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2200      	movs	r2, #0
 80030f2:	2180      	movs	r1, #128	; 0x80
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f840 	bl	800317a <UART_WaitOnFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e036      	b.n	8003172 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10b      	bne.n	8003122 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003118:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	3302      	adds	r3, #2
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	e007      	b.n	8003132 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	781a      	ldrb	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	3301      	adds	r3, #1
 8003130:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1cf      	bne.n	80030ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2200      	movs	r2, #0
 8003152:	2140      	movs	r1, #64	; 0x40
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f810 	bl	800317a <UART_WaitOnFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e006      	b.n	8003172 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e000      	b.n	8003172 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
  }
}
 8003172:	4618      	mov	r0, r3
 8003174:	3720      	adds	r7, #32
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b090      	sub	sp, #64	; 0x40
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	4613      	mov	r3, r2
 8003188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800318a:	e050      	b.n	800322e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003192:	d04c      	beq.n	800322e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <UART_WaitOnFlagUntilTimeout+0x30>
 800319a:	f7fe f989 	bl	80014b0 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d241      	bcs.n	800322e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	330c      	adds	r3, #12
 80031b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	330c      	adds	r3, #12
 80031c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031ca:	637a      	str	r2, [r7, #52]	; 0x34
 80031cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031d2:	e841 2300 	strex	r3, r2, [r1]
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e5      	bne.n	80031aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3314      	adds	r3, #20
 80031e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	e853 3f00 	ldrex	r3, [r3]
 80031ec:	613b      	str	r3, [r7, #16]
   return(result);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	3314      	adds	r3, #20
 80031fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031fe:	623a      	str	r2, [r7, #32]
 8003200:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	69f9      	ldr	r1, [r7, #28]
 8003204:	6a3a      	ldr	r2, [r7, #32]
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	61bb      	str	r3, [r7, #24]
   return(result);
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e5      	bne.n	80031de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e00f      	b.n	800324e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4013      	ands	r3, r2
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	429a      	cmp	r2, r3
 800323c:	bf0c      	ite	eq
 800323e:	2301      	moveq	r3, #1
 8003240:	2300      	movne	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	461a      	mov	r2, r3
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	429a      	cmp	r2, r3
 800324a:	d09f      	beq.n	800318c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3740      	adds	r7, #64	; 0x40
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003292:	f023 030c 	bic.w	r3, r3, #12
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	430b      	orrs	r3, r1
 800329e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a2c      	ldr	r2, [pc, #176]	; (800336c <UART_SetConfig+0x114>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d103      	bne.n	80032c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032c0:	f7fe ffb6 	bl	8002230 <HAL_RCC_GetPCLK2Freq>
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	e002      	b.n	80032ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032c8:	f7fe ff9e 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 80032cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	009a      	lsls	r2, r3, #2
 80032d8:	441a      	add	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	4a22      	ldr	r2, [pc, #136]	; (8003370 <UART_SetConfig+0x118>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	0119      	lsls	r1, r3, #4
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	009a      	lsls	r2, r3, #2
 80032f8:	441a      	add	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	fbb2 f2f3 	udiv	r2, r2, r3
 8003304:	4b1a      	ldr	r3, [pc, #104]	; (8003370 <UART_SetConfig+0x118>)
 8003306:	fba3 0302 	umull	r0, r3, r3, r2
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	2064      	movs	r0, #100	; 0x64
 800330e:	fb00 f303 	mul.w	r3, r0, r3
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	3332      	adds	r3, #50	; 0x32
 8003318:	4a15      	ldr	r2, [pc, #84]	; (8003370 <UART_SetConfig+0x118>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003324:	4419      	add	r1, r3
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	009a      	lsls	r2, r3, #2
 8003330:	441a      	add	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	fbb2 f2f3 	udiv	r2, r2, r3
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <UART_SetConfig+0x118>)
 800333e:	fba3 0302 	umull	r0, r3, r3, r2
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2064      	movs	r0, #100	; 0x64
 8003346:	fb00 f303 	mul.w	r3, r0, r3
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	3332      	adds	r3, #50	; 0x32
 8003350:	4a07      	ldr	r2, [pc, #28]	; (8003370 <UART_SetConfig+0x118>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	f003 020f 	and.w	r2, r3, #15
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	440a      	add	r2, r1
 8003362:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40013800 	.word	0x40013800
 8003370:	51eb851f 	.word	0x51eb851f

08003374 <__errno>:
 8003374:	4b01      	ldr	r3, [pc, #4]	; (800337c <__errno+0x8>)
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000034 	.word	0x20000034

08003380 <__libc_init_array>:
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	2600      	movs	r6, #0
 8003384:	4d0c      	ldr	r5, [pc, #48]	; (80033b8 <__libc_init_array+0x38>)
 8003386:	4c0d      	ldr	r4, [pc, #52]	; (80033bc <__libc_init_array+0x3c>)
 8003388:	1b64      	subs	r4, r4, r5
 800338a:	10a4      	asrs	r4, r4, #2
 800338c:	42a6      	cmp	r6, r4
 800338e:	d109      	bne.n	80033a4 <__libc_init_array+0x24>
 8003390:	f000 fc5c 	bl	8003c4c <_init>
 8003394:	2600      	movs	r6, #0
 8003396:	4d0a      	ldr	r5, [pc, #40]	; (80033c0 <__libc_init_array+0x40>)
 8003398:	4c0a      	ldr	r4, [pc, #40]	; (80033c4 <__libc_init_array+0x44>)
 800339a:	1b64      	subs	r4, r4, r5
 800339c:	10a4      	asrs	r4, r4, #2
 800339e:	42a6      	cmp	r6, r4
 80033a0:	d105      	bne.n	80033ae <__libc_init_array+0x2e>
 80033a2:	bd70      	pop	{r4, r5, r6, pc}
 80033a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033a8:	4798      	blx	r3
 80033aa:	3601      	adds	r6, #1
 80033ac:	e7ee      	b.n	800338c <__libc_init_array+0xc>
 80033ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b2:	4798      	blx	r3
 80033b4:	3601      	adds	r6, #1
 80033b6:	e7f2      	b.n	800339e <__libc_init_array+0x1e>
 80033b8:	08003cd4 	.word	0x08003cd4
 80033bc:	08003cd4 	.word	0x08003cd4
 80033c0:	08003cd4 	.word	0x08003cd4
 80033c4:	08003cd8 	.word	0x08003cd8

080033c8 <memset>:
 80033c8:	4603      	mov	r3, r0
 80033ca:	4402      	add	r2, r0
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d100      	bne.n	80033d2 <memset+0xa>
 80033d0:	4770      	bx	lr
 80033d2:	f803 1b01 	strb.w	r1, [r3], #1
 80033d6:	e7f9      	b.n	80033cc <memset+0x4>

080033d8 <siprintf>:
 80033d8:	b40e      	push	{r1, r2, r3}
 80033da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033de:	b500      	push	{lr}
 80033e0:	b09c      	sub	sp, #112	; 0x70
 80033e2:	ab1d      	add	r3, sp, #116	; 0x74
 80033e4:	9002      	str	r0, [sp, #8]
 80033e6:	9006      	str	r0, [sp, #24]
 80033e8:	9107      	str	r1, [sp, #28]
 80033ea:	9104      	str	r1, [sp, #16]
 80033ec:	4808      	ldr	r0, [pc, #32]	; (8003410 <siprintf+0x38>)
 80033ee:	4909      	ldr	r1, [pc, #36]	; (8003414 <siprintf+0x3c>)
 80033f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80033f4:	9105      	str	r1, [sp, #20]
 80033f6:	6800      	ldr	r0, [r0, #0]
 80033f8:	a902      	add	r1, sp, #8
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	f000 f868 	bl	80034d0 <_svfiprintf_r>
 8003400:	2200      	movs	r2, #0
 8003402:	9b02      	ldr	r3, [sp, #8]
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	b01c      	add	sp, #112	; 0x70
 8003408:	f85d eb04 	ldr.w	lr, [sp], #4
 800340c:	b003      	add	sp, #12
 800340e:	4770      	bx	lr
 8003410:	20000034 	.word	0x20000034
 8003414:	ffff0208 	.word	0xffff0208

08003418 <__ssputs_r>:
 8003418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800341c:	688e      	ldr	r6, [r1, #8]
 800341e:	4682      	mov	sl, r0
 8003420:	429e      	cmp	r6, r3
 8003422:	460c      	mov	r4, r1
 8003424:	4690      	mov	r8, r2
 8003426:	461f      	mov	r7, r3
 8003428:	d838      	bhi.n	800349c <__ssputs_r+0x84>
 800342a:	898a      	ldrh	r2, [r1, #12]
 800342c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003430:	d032      	beq.n	8003498 <__ssputs_r+0x80>
 8003432:	6825      	ldr	r5, [r4, #0]
 8003434:	6909      	ldr	r1, [r1, #16]
 8003436:	3301      	adds	r3, #1
 8003438:	eba5 0901 	sub.w	r9, r5, r1
 800343c:	6965      	ldr	r5, [r4, #20]
 800343e:	444b      	add	r3, r9
 8003440:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003444:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003448:	106d      	asrs	r5, r5, #1
 800344a:	429d      	cmp	r5, r3
 800344c:	bf38      	it	cc
 800344e:	461d      	movcc	r5, r3
 8003450:	0553      	lsls	r3, r2, #21
 8003452:	d531      	bpl.n	80034b8 <__ssputs_r+0xa0>
 8003454:	4629      	mov	r1, r5
 8003456:	f000 fb53 	bl	8003b00 <_malloc_r>
 800345a:	4606      	mov	r6, r0
 800345c:	b950      	cbnz	r0, 8003474 <__ssputs_r+0x5c>
 800345e:	230c      	movs	r3, #12
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	f8ca 3000 	str.w	r3, [sl]
 8003468:	89a3      	ldrh	r3, [r4, #12]
 800346a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800346e:	81a3      	strh	r3, [r4, #12]
 8003470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003474:	464a      	mov	r2, r9
 8003476:	6921      	ldr	r1, [r4, #16]
 8003478:	f000 face 	bl	8003a18 <memcpy>
 800347c:	89a3      	ldrh	r3, [r4, #12]
 800347e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003486:	81a3      	strh	r3, [r4, #12]
 8003488:	6126      	str	r6, [r4, #16]
 800348a:	444e      	add	r6, r9
 800348c:	6026      	str	r6, [r4, #0]
 800348e:	463e      	mov	r6, r7
 8003490:	6165      	str	r5, [r4, #20]
 8003492:	eba5 0509 	sub.w	r5, r5, r9
 8003496:	60a5      	str	r5, [r4, #8]
 8003498:	42be      	cmp	r6, r7
 800349a:	d900      	bls.n	800349e <__ssputs_r+0x86>
 800349c:	463e      	mov	r6, r7
 800349e:	4632      	mov	r2, r6
 80034a0:	4641      	mov	r1, r8
 80034a2:	6820      	ldr	r0, [r4, #0]
 80034a4:	f000 fac6 	bl	8003a34 <memmove>
 80034a8:	68a3      	ldr	r3, [r4, #8]
 80034aa:	6822      	ldr	r2, [r4, #0]
 80034ac:	1b9b      	subs	r3, r3, r6
 80034ae:	4432      	add	r2, r6
 80034b0:	2000      	movs	r0, #0
 80034b2:	60a3      	str	r3, [r4, #8]
 80034b4:	6022      	str	r2, [r4, #0]
 80034b6:	e7db      	b.n	8003470 <__ssputs_r+0x58>
 80034b8:	462a      	mov	r2, r5
 80034ba:	f000 fb7b 	bl	8003bb4 <_realloc_r>
 80034be:	4606      	mov	r6, r0
 80034c0:	2800      	cmp	r0, #0
 80034c2:	d1e1      	bne.n	8003488 <__ssputs_r+0x70>
 80034c4:	4650      	mov	r0, sl
 80034c6:	6921      	ldr	r1, [r4, #16]
 80034c8:	f000 face 	bl	8003a68 <_free_r>
 80034cc:	e7c7      	b.n	800345e <__ssputs_r+0x46>
	...

080034d0 <_svfiprintf_r>:
 80034d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d4:	4698      	mov	r8, r3
 80034d6:	898b      	ldrh	r3, [r1, #12]
 80034d8:	4607      	mov	r7, r0
 80034da:	061b      	lsls	r3, r3, #24
 80034dc:	460d      	mov	r5, r1
 80034de:	4614      	mov	r4, r2
 80034e0:	b09d      	sub	sp, #116	; 0x74
 80034e2:	d50e      	bpl.n	8003502 <_svfiprintf_r+0x32>
 80034e4:	690b      	ldr	r3, [r1, #16]
 80034e6:	b963      	cbnz	r3, 8003502 <_svfiprintf_r+0x32>
 80034e8:	2140      	movs	r1, #64	; 0x40
 80034ea:	f000 fb09 	bl	8003b00 <_malloc_r>
 80034ee:	6028      	str	r0, [r5, #0]
 80034f0:	6128      	str	r0, [r5, #16]
 80034f2:	b920      	cbnz	r0, 80034fe <_svfiprintf_r+0x2e>
 80034f4:	230c      	movs	r3, #12
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	f04f 30ff 	mov.w	r0, #4294967295
 80034fc:	e0d1      	b.n	80036a2 <_svfiprintf_r+0x1d2>
 80034fe:	2340      	movs	r3, #64	; 0x40
 8003500:	616b      	str	r3, [r5, #20]
 8003502:	2300      	movs	r3, #0
 8003504:	9309      	str	r3, [sp, #36]	; 0x24
 8003506:	2320      	movs	r3, #32
 8003508:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800350c:	2330      	movs	r3, #48	; 0x30
 800350e:	f04f 0901 	mov.w	r9, #1
 8003512:	f8cd 800c 	str.w	r8, [sp, #12]
 8003516:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80036bc <_svfiprintf_r+0x1ec>
 800351a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800351e:	4623      	mov	r3, r4
 8003520:	469a      	mov	sl, r3
 8003522:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003526:	b10a      	cbz	r2, 800352c <_svfiprintf_r+0x5c>
 8003528:	2a25      	cmp	r2, #37	; 0x25
 800352a:	d1f9      	bne.n	8003520 <_svfiprintf_r+0x50>
 800352c:	ebba 0b04 	subs.w	fp, sl, r4
 8003530:	d00b      	beq.n	800354a <_svfiprintf_r+0x7a>
 8003532:	465b      	mov	r3, fp
 8003534:	4622      	mov	r2, r4
 8003536:	4629      	mov	r1, r5
 8003538:	4638      	mov	r0, r7
 800353a:	f7ff ff6d 	bl	8003418 <__ssputs_r>
 800353e:	3001      	adds	r0, #1
 8003540:	f000 80aa 	beq.w	8003698 <_svfiprintf_r+0x1c8>
 8003544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003546:	445a      	add	r2, fp
 8003548:	9209      	str	r2, [sp, #36]	; 0x24
 800354a:	f89a 3000 	ldrb.w	r3, [sl]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 80a2 	beq.w	8003698 <_svfiprintf_r+0x1c8>
 8003554:	2300      	movs	r3, #0
 8003556:	f04f 32ff 	mov.w	r2, #4294967295
 800355a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800355e:	f10a 0a01 	add.w	sl, sl, #1
 8003562:	9304      	str	r3, [sp, #16]
 8003564:	9307      	str	r3, [sp, #28]
 8003566:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800356a:	931a      	str	r3, [sp, #104]	; 0x68
 800356c:	4654      	mov	r4, sl
 800356e:	2205      	movs	r2, #5
 8003570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003574:	4851      	ldr	r0, [pc, #324]	; (80036bc <_svfiprintf_r+0x1ec>)
 8003576:	f000 fa41 	bl	80039fc <memchr>
 800357a:	9a04      	ldr	r2, [sp, #16]
 800357c:	b9d8      	cbnz	r0, 80035b6 <_svfiprintf_r+0xe6>
 800357e:	06d0      	lsls	r0, r2, #27
 8003580:	bf44      	itt	mi
 8003582:	2320      	movmi	r3, #32
 8003584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003588:	0711      	lsls	r1, r2, #28
 800358a:	bf44      	itt	mi
 800358c:	232b      	movmi	r3, #43	; 0x2b
 800358e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003592:	f89a 3000 	ldrb.w	r3, [sl]
 8003596:	2b2a      	cmp	r3, #42	; 0x2a
 8003598:	d015      	beq.n	80035c6 <_svfiprintf_r+0xf6>
 800359a:	4654      	mov	r4, sl
 800359c:	2000      	movs	r0, #0
 800359e:	f04f 0c0a 	mov.w	ip, #10
 80035a2:	9a07      	ldr	r2, [sp, #28]
 80035a4:	4621      	mov	r1, r4
 80035a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035aa:	3b30      	subs	r3, #48	; 0x30
 80035ac:	2b09      	cmp	r3, #9
 80035ae:	d94e      	bls.n	800364e <_svfiprintf_r+0x17e>
 80035b0:	b1b0      	cbz	r0, 80035e0 <_svfiprintf_r+0x110>
 80035b2:	9207      	str	r2, [sp, #28]
 80035b4:	e014      	b.n	80035e0 <_svfiprintf_r+0x110>
 80035b6:	eba0 0308 	sub.w	r3, r0, r8
 80035ba:	fa09 f303 	lsl.w	r3, r9, r3
 80035be:	4313      	orrs	r3, r2
 80035c0:	46a2      	mov	sl, r4
 80035c2:	9304      	str	r3, [sp, #16]
 80035c4:	e7d2      	b.n	800356c <_svfiprintf_r+0x9c>
 80035c6:	9b03      	ldr	r3, [sp, #12]
 80035c8:	1d19      	adds	r1, r3, #4
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	9103      	str	r1, [sp, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	bfbb      	ittet	lt
 80035d2:	425b      	neglt	r3, r3
 80035d4:	f042 0202 	orrlt.w	r2, r2, #2
 80035d8:	9307      	strge	r3, [sp, #28]
 80035da:	9307      	strlt	r3, [sp, #28]
 80035dc:	bfb8      	it	lt
 80035de:	9204      	strlt	r2, [sp, #16]
 80035e0:	7823      	ldrb	r3, [r4, #0]
 80035e2:	2b2e      	cmp	r3, #46	; 0x2e
 80035e4:	d10c      	bne.n	8003600 <_svfiprintf_r+0x130>
 80035e6:	7863      	ldrb	r3, [r4, #1]
 80035e8:	2b2a      	cmp	r3, #42	; 0x2a
 80035ea:	d135      	bne.n	8003658 <_svfiprintf_r+0x188>
 80035ec:	9b03      	ldr	r3, [sp, #12]
 80035ee:	3402      	adds	r4, #2
 80035f0:	1d1a      	adds	r2, r3, #4
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	9203      	str	r2, [sp, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bfb8      	it	lt
 80035fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80035fe:	9305      	str	r3, [sp, #20]
 8003600:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80036cc <_svfiprintf_r+0x1fc>
 8003604:	2203      	movs	r2, #3
 8003606:	4650      	mov	r0, sl
 8003608:	7821      	ldrb	r1, [r4, #0]
 800360a:	f000 f9f7 	bl	80039fc <memchr>
 800360e:	b140      	cbz	r0, 8003622 <_svfiprintf_r+0x152>
 8003610:	2340      	movs	r3, #64	; 0x40
 8003612:	eba0 000a 	sub.w	r0, r0, sl
 8003616:	fa03 f000 	lsl.w	r0, r3, r0
 800361a:	9b04      	ldr	r3, [sp, #16]
 800361c:	3401      	adds	r4, #1
 800361e:	4303      	orrs	r3, r0
 8003620:	9304      	str	r3, [sp, #16]
 8003622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003626:	2206      	movs	r2, #6
 8003628:	4825      	ldr	r0, [pc, #148]	; (80036c0 <_svfiprintf_r+0x1f0>)
 800362a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800362e:	f000 f9e5 	bl	80039fc <memchr>
 8003632:	2800      	cmp	r0, #0
 8003634:	d038      	beq.n	80036a8 <_svfiprintf_r+0x1d8>
 8003636:	4b23      	ldr	r3, [pc, #140]	; (80036c4 <_svfiprintf_r+0x1f4>)
 8003638:	bb1b      	cbnz	r3, 8003682 <_svfiprintf_r+0x1b2>
 800363a:	9b03      	ldr	r3, [sp, #12]
 800363c:	3307      	adds	r3, #7
 800363e:	f023 0307 	bic.w	r3, r3, #7
 8003642:	3308      	adds	r3, #8
 8003644:	9303      	str	r3, [sp, #12]
 8003646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003648:	4433      	add	r3, r6
 800364a:	9309      	str	r3, [sp, #36]	; 0x24
 800364c:	e767      	b.n	800351e <_svfiprintf_r+0x4e>
 800364e:	460c      	mov	r4, r1
 8003650:	2001      	movs	r0, #1
 8003652:	fb0c 3202 	mla	r2, ip, r2, r3
 8003656:	e7a5      	b.n	80035a4 <_svfiprintf_r+0xd4>
 8003658:	2300      	movs	r3, #0
 800365a:	f04f 0c0a 	mov.w	ip, #10
 800365e:	4619      	mov	r1, r3
 8003660:	3401      	adds	r4, #1
 8003662:	9305      	str	r3, [sp, #20]
 8003664:	4620      	mov	r0, r4
 8003666:	f810 2b01 	ldrb.w	r2, [r0], #1
 800366a:	3a30      	subs	r2, #48	; 0x30
 800366c:	2a09      	cmp	r2, #9
 800366e:	d903      	bls.n	8003678 <_svfiprintf_r+0x1a8>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0c5      	beq.n	8003600 <_svfiprintf_r+0x130>
 8003674:	9105      	str	r1, [sp, #20]
 8003676:	e7c3      	b.n	8003600 <_svfiprintf_r+0x130>
 8003678:	4604      	mov	r4, r0
 800367a:	2301      	movs	r3, #1
 800367c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003680:	e7f0      	b.n	8003664 <_svfiprintf_r+0x194>
 8003682:	ab03      	add	r3, sp, #12
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	462a      	mov	r2, r5
 8003688:	4638      	mov	r0, r7
 800368a:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <_svfiprintf_r+0x1f8>)
 800368c:	a904      	add	r1, sp, #16
 800368e:	f3af 8000 	nop.w
 8003692:	1c42      	adds	r2, r0, #1
 8003694:	4606      	mov	r6, r0
 8003696:	d1d6      	bne.n	8003646 <_svfiprintf_r+0x176>
 8003698:	89ab      	ldrh	r3, [r5, #12]
 800369a:	065b      	lsls	r3, r3, #25
 800369c:	f53f af2c 	bmi.w	80034f8 <_svfiprintf_r+0x28>
 80036a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036a2:	b01d      	add	sp, #116	; 0x74
 80036a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036a8:	ab03      	add	r3, sp, #12
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	462a      	mov	r2, r5
 80036ae:	4638      	mov	r0, r7
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <_svfiprintf_r+0x1f8>)
 80036b2:	a904      	add	r1, sp, #16
 80036b4:	f000 f87c 	bl	80037b0 <_printf_i>
 80036b8:	e7eb      	b.n	8003692 <_svfiprintf_r+0x1c2>
 80036ba:	bf00      	nop
 80036bc:	08003c9e 	.word	0x08003c9e
 80036c0:	08003ca8 	.word	0x08003ca8
 80036c4:	00000000 	.word	0x00000000
 80036c8:	08003419 	.word	0x08003419
 80036cc:	08003ca4 	.word	0x08003ca4

080036d0 <_printf_common>:
 80036d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036d4:	4616      	mov	r6, r2
 80036d6:	4699      	mov	r9, r3
 80036d8:	688a      	ldr	r2, [r1, #8]
 80036da:	690b      	ldr	r3, [r1, #16]
 80036dc:	4607      	mov	r7, r0
 80036de:	4293      	cmp	r3, r2
 80036e0:	bfb8      	it	lt
 80036e2:	4613      	movlt	r3, r2
 80036e4:	6033      	str	r3, [r6, #0]
 80036e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036ea:	460c      	mov	r4, r1
 80036ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036f0:	b10a      	cbz	r2, 80036f6 <_printf_common+0x26>
 80036f2:	3301      	adds	r3, #1
 80036f4:	6033      	str	r3, [r6, #0]
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	0699      	lsls	r1, r3, #26
 80036fa:	bf42      	ittt	mi
 80036fc:	6833      	ldrmi	r3, [r6, #0]
 80036fe:	3302      	addmi	r3, #2
 8003700:	6033      	strmi	r3, [r6, #0]
 8003702:	6825      	ldr	r5, [r4, #0]
 8003704:	f015 0506 	ands.w	r5, r5, #6
 8003708:	d106      	bne.n	8003718 <_printf_common+0x48>
 800370a:	f104 0a19 	add.w	sl, r4, #25
 800370e:	68e3      	ldr	r3, [r4, #12]
 8003710:	6832      	ldr	r2, [r6, #0]
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	42ab      	cmp	r3, r5
 8003716:	dc28      	bgt.n	800376a <_printf_common+0x9a>
 8003718:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800371c:	1e13      	subs	r3, r2, #0
 800371e:	6822      	ldr	r2, [r4, #0]
 8003720:	bf18      	it	ne
 8003722:	2301      	movne	r3, #1
 8003724:	0692      	lsls	r2, r2, #26
 8003726:	d42d      	bmi.n	8003784 <_printf_common+0xb4>
 8003728:	4649      	mov	r1, r9
 800372a:	4638      	mov	r0, r7
 800372c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003730:	47c0      	blx	r8
 8003732:	3001      	adds	r0, #1
 8003734:	d020      	beq.n	8003778 <_printf_common+0xa8>
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	68e5      	ldr	r5, [r4, #12]
 800373a:	f003 0306 	and.w	r3, r3, #6
 800373e:	2b04      	cmp	r3, #4
 8003740:	bf18      	it	ne
 8003742:	2500      	movne	r5, #0
 8003744:	6832      	ldr	r2, [r6, #0]
 8003746:	f04f 0600 	mov.w	r6, #0
 800374a:	68a3      	ldr	r3, [r4, #8]
 800374c:	bf08      	it	eq
 800374e:	1aad      	subeq	r5, r5, r2
 8003750:	6922      	ldr	r2, [r4, #16]
 8003752:	bf08      	it	eq
 8003754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003758:	4293      	cmp	r3, r2
 800375a:	bfc4      	itt	gt
 800375c:	1a9b      	subgt	r3, r3, r2
 800375e:	18ed      	addgt	r5, r5, r3
 8003760:	341a      	adds	r4, #26
 8003762:	42b5      	cmp	r5, r6
 8003764:	d11a      	bne.n	800379c <_printf_common+0xcc>
 8003766:	2000      	movs	r0, #0
 8003768:	e008      	b.n	800377c <_printf_common+0xac>
 800376a:	2301      	movs	r3, #1
 800376c:	4652      	mov	r2, sl
 800376e:	4649      	mov	r1, r9
 8003770:	4638      	mov	r0, r7
 8003772:	47c0      	blx	r8
 8003774:	3001      	adds	r0, #1
 8003776:	d103      	bne.n	8003780 <_printf_common+0xb0>
 8003778:	f04f 30ff 	mov.w	r0, #4294967295
 800377c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003780:	3501      	adds	r5, #1
 8003782:	e7c4      	b.n	800370e <_printf_common+0x3e>
 8003784:	2030      	movs	r0, #48	; 0x30
 8003786:	18e1      	adds	r1, r4, r3
 8003788:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003792:	4422      	add	r2, r4
 8003794:	3302      	adds	r3, #2
 8003796:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800379a:	e7c5      	b.n	8003728 <_printf_common+0x58>
 800379c:	2301      	movs	r3, #1
 800379e:	4622      	mov	r2, r4
 80037a0:	4649      	mov	r1, r9
 80037a2:	4638      	mov	r0, r7
 80037a4:	47c0      	blx	r8
 80037a6:	3001      	adds	r0, #1
 80037a8:	d0e6      	beq.n	8003778 <_printf_common+0xa8>
 80037aa:	3601      	adds	r6, #1
 80037ac:	e7d9      	b.n	8003762 <_printf_common+0x92>
	...

080037b0 <_printf_i>:
 80037b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037b4:	460c      	mov	r4, r1
 80037b6:	7e27      	ldrb	r7, [r4, #24]
 80037b8:	4691      	mov	r9, r2
 80037ba:	2f78      	cmp	r7, #120	; 0x78
 80037bc:	4680      	mov	r8, r0
 80037be:	469a      	mov	sl, r3
 80037c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80037c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037c6:	d807      	bhi.n	80037d8 <_printf_i+0x28>
 80037c8:	2f62      	cmp	r7, #98	; 0x62
 80037ca:	d80a      	bhi.n	80037e2 <_printf_i+0x32>
 80037cc:	2f00      	cmp	r7, #0
 80037ce:	f000 80d9 	beq.w	8003984 <_printf_i+0x1d4>
 80037d2:	2f58      	cmp	r7, #88	; 0x58
 80037d4:	f000 80a4 	beq.w	8003920 <_printf_i+0x170>
 80037d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80037dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037e0:	e03a      	b.n	8003858 <_printf_i+0xa8>
 80037e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037e6:	2b15      	cmp	r3, #21
 80037e8:	d8f6      	bhi.n	80037d8 <_printf_i+0x28>
 80037ea:	a001      	add	r0, pc, #4	; (adr r0, 80037f0 <_printf_i+0x40>)
 80037ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80037f0:	08003849 	.word	0x08003849
 80037f4:	0800385d 	.word	0x0800385d
 80037f8:	080037d9 	.word	0x080037d9
 80037fc:	080037d9 	.word	0x080037d9
 8003800:	080037d9 	.word	0x080037d9
 8003804:	080037d9 	.word	0x080037d9
 8003808:	0800385d 	.word	0x0800385d
 800380c:	080037d9 	.word	0x080037d9
 8003810:	080037d9 	.word	0x080037d9
 8003814:	080037d9 	.word	0x080037d9
 8003818:	080037d9 	.word	0x080037d9
 800381c:	0800396b 	.word	0x0800396b
 8003820:	0800388d 	.word	0x0800388d
 8003824:	0800394d 	.word	0x0800394d
 8003828:	080037d9 	.word	0x080037d9
 800382c:	080037d9 	.word	0x080037d9
 8003830:	0800398d 	.word	0x0800398d
 8003834:	080037d9 	.word	0x080037d9
 8003838:	0800388d 	.word	0x0800388d
 800383c:	080037d9 	.word	0x080037d9
 8003840:	080037d9 	.word	0x080037d9
 8003844:	08003955 	.word	0x08003955
 8003848:	680b      	ldr	r3, [r1, #0]
 800384a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800384e:	1d1a      	adds	r2, r3, #4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	600a      	str	r2, [r1, #0]
 8003854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003858:	2301      	movs	r3, #1
 800385a:	e0a4      	b.n	80039a6 <_printf_i+0x1f6>
 800385c:	6825      	ldr	r5, [r4, #0]
 800385e:	6808      	ldr	r0, [r1, #0]
 8003860:	062e      	lsls	r6, r5, #24
 8003862:	f100 0304 	add.w	r3, r0, #4
 8003866:	d50a      	bpl.n	800387e <_printf_i+0xce>
 8003868:	6805      	ldr	r5, [r0, #0]
 800386a:	600b      	str	r3, [r1, #0]
 800386c:	2d00      	cmp	r5, #0
 800386e:	da03      	bge.n	8003878 <_printf_i+0xc8>
 8003870:	232d      	movs	r3, #45	; 0x2d
 8003872:	426d      	negs	r5, r5
 8003874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003878:	230a      	movs	r3, #10
 800387a:	485e      	ldr	r0, [pc, #376]	; (80039f4 <_printf_i+0x244>)
 800387c:	e019      	b.n	80038b2 <_printf_i+0x102>
 800387e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003882:	6805      	ldr	r5, [r0, #0]
 8003884:	600b      	str	r3, [r1, #0]
 8003886:	bf18      	it	ne
 8003888:	b22d      	sxthne	r5, r5
 800388a:	e7ef      	b.n	800386c <_printf_i+0xbc>
 800388c:	680b      	ldr	r3, [r1, #0]
 800388e:	6825      	ldr	r5, [r4, #0]
 8003890:	1d18      	adds	r0, r3, #4
 8003892:	6008      	str	r0, [r1, #0]
 8003894:	0628      	lsls	r0, r5, #24
 8003896:	d501      	bpl.n	800389c <_printf_i+0xec>
 8003898:	681d      	ldr	r5, [r3, #0]
 800389a:	e002      	b.n	80038a2 <_printf_i+0xf2>
 800389c:	0669      	lsls	r1, r5, #25
 800389e:	d5fb      	bpl.n	8003898 <_printf_i+0xe8>
 80038a0:	881d      	ldrh	r5, [r3, #0]
 80038a2:	2f6f      	cmp	r7, #111	; 0x6f
 80038a4:	bf0c      	ite	eq
 80038a6:	2308      	moveq	r3, #8
 80038a8:	230a      	movne	r3, #10
 80038aa:	4852      	ldr	r0, [pc, #328]	; (80039f4 <_printf_i+0x244>)
 80038ac:	2100      	movs	r1, #0
 80038ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038b2:	6866      	ldr	r6, [r4, #4]
 80038b4:	2e00      	cmp	r6, #0
 80038b6:	bfa8      	it	ge
 80038b8:	6821      	ldrge	r1, [r4, #0]
 80038ba:	60a6      	str	r6, [r4, #8]
 80038bc:	bfa4      	itt	ge
 80038be:	f021 0104 	bicge.w	r1, r1, #4
 80038c2:	6021      	strge	r1, [r4, #0]
 80038c4:	b90d      	cbnz	r5, 80038ca <_printf_i+0x11a>
 80038c6:	2e00      	cmp	r6, #0
 80038c8:	d04d      	beq.n	8003966 <_printf_i+0x1b6>
 80038ca:	4616      	mov	r6, r2
 80038cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80038d0:	fb03 5711 	mls	r7, r3, r1, r5
 80038d4:	5dc7      	ldrb	r7, [r0, r7]
 80038d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038da:	462f      	mov	r7, r5
 80038dc:	42bb      	cmp	r3, r7
 80038de:	460d      	mov	r5, r1
 80038e0:	d9f4      	bls.n	80038cc <_printf_i+0x11c>
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d10b      	bne.n	80038fe <_printf_i+0x14e>
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	07df      	lsls	r7, r3, #31
 80038ea:	d508      	bpl.n	80038fe <_printf_i+0x14e>
 80038ec:	6923      	ldr	r3, [r4, #16]
 80038ee:	6861      	ldr	r1, [r4, #4]
 80038f0:	4299      	cmp	r1, r3
 80038f2:	bfde      	ittt	le
 80038f4:	2330      	movle	r3, #48	; 0x30
 80038f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038fe:	1b92      	subs	r2, r2, r6
 8003900:	6122      	str	r2, [r4, #16]
 8003902:	464b      	mov	r3, r9
 8003904:	4621      	mov	r1, r4
 8003906:	4640      	mov	r0, r8
 8003908:	f8cd a000 	str.w	sl, [sp]
 800390c:	aa03      	add	r2, sp, #12
 800390e:	f7ff fedf 	bl	80036d0 <_printf_common>
 8003912:	3001      	adds	r0, #1
 8003914:	d14c      	bne.n	80039b0 <_printf_i+0x200>
 8003916:	f04f 30ff 	mov.w	r0, #4294967295
 800391a:	b004      	add	sp, #16
 800391c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003920:	4834      	ldr	r0, [pc, #208]	; (80039f4 <_printf_i+0x244>)
 8003922:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003926:	680e      	ldr	r6, [r1, #0]
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	f856 5b04 	ldr.w	r5, [r6], #4
 800392e:	061f      	lsls	r7, r3, #24
 8003930:	600e      	str	r6, [r1, #0]
 8003932:	d514      	bpl.n	800395e <_printf_i+0x1ae>
 8003934:	07d9      	lsls	r1, r3, #31
 8003936:	bf44      	itt	mi
 8003938:	f043 0320 	orrmi.w	r3, r3, #32
 800393c:	6023      	strmi	r3, [r4, #0]
 800393e:	b91d      	cbnz	r5, 8003948 <_printf_i+0x198>
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	f023 0320 	bic.w	r3, r3, #32
 8003946:	6023      	str	r3, [r4, #0]
 8003948:	2310      	movs	r3, #16
 800394a:	e7af      	b.n	80038ac <_printf_i+0xfc>
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	f043 0320 	orr.w	r3, r3, #32
 8003952:	6023      	str	r3, [r4, #0]
 8003954:	2378      	movs	r3, #120	; 0x78
 8003956:	4828      	ldr	r0, [pc, #160]	; (80039f8 <_printf_i+0x248>)
 8003958:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800395c:	e7e3      	b.n	8003926 <_printf_i+0x176>
 800395e:	065e      	lsls	r6, r3, #25
 8003960:	bf48      	it	mi
 8003962:	b2ad      	uxthmi	r5, r5
 8003964:	e7e6      	b.n	8003934 <_printf_i+0x184>
 8003966:	4616      	mov	r6, r2
 8003968:	e7bb      	b.n	80038e2 <_printf_i+0x132>
 800396a:	680b      	ldr	r3, [r1, #0]
 800396c:	6826      	ldr	r6, [r4, #0]
 800396e:	1d1d      	adds	r5, r3, #4
 8003970:	6960      	ldr	r0, [r4, #20]
 8003972:	600d      	str	r5, [r1, #0]
 8003974:	0635      	lsls	r5, r6, #24
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	d501      	bpl.n	800397e <_printf_i+0x1ce>
 800397a:	6018      	str	r0, [r3, #0]
 800397c:	e002      	b.n	8003984 <_printf_i+0x1d4>
 800397e:	0671      	lsls	r1, r6, #25
 8003980:	d5fb      	bpl.n	800397a <_printf_i+0x1ca>
 8003982:	8018      	strh	r0, [r3, #0]
 8003984:	2300      	movs	r3, #0
 8003986:	4616      	mov	r6, r2
 8003988:	6123      	str	r3, [r4, #16]
 800398a:	e7ba      	b.n	8003902 <_printf_i+0x152>
 800398c:	680b      	ldr	r3, [r1, #0]
 800398e:	1d1a      	adds	r2, r3, #4
 8003990:	600a      	str	r2, [r1, #0]
 8003992:	681e      	ldr	r6, [r3, #0]
 8003994:	2100      	movs	r1, #0
 8003996:	4630      	mov	r0, r6
 8003998:	6862      	ldr	r2, [r4, #4]
 800399a:	f000 f82f 	bl	80039fc <memchr>
 800399e:	b108      	cbz	r0, 80039a4 <_printf_i+0x1f4>
 80039a0:	1b80      	subs	r0, r0, r6
 80039a2:	6060      	str	r0, [r4, #4]
 80039a4:	6863      	ldr	r3, [r4, #4]
 80039a6:	6123      	str	r3, [r4, #16]
 80039a8:	2300      	movs	r3, #0
 80039aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039ae:	e7a8      	b.n	8003902 <_printf_i+0x152>
 80039b0:	4632      	mov	r2, r6
 80039b2:	4649      	mov	r1, r9
 80039b4:	4640      	mov	r0, r8
 80039b6:	6923      	ldr	r3, [r4, #16]
 80039b8:	47d0      	blx	sl
 80039ba:	3001      	adds	r0, #1
 80039bc:	d0ab      	beq.n	8003916 <_printf_i+0x166>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	079b      	lsls	r3, r3, #30
 80039c2:	d413      	bmi.n	80039ec <_printf_i+0x23c>
 80039c4:	68e0      	ldr	r0, [r4, #12]
 80039c6:	9b03      	ldr	r3, [sp, #12]
 80039c8:	4298      	cmp	r0, r3
 80039ca:	bfb8      	it	lt
 80039cc:	4618      	movlt	r0, r3
 80039ce:	e7a4      	b.n	800391a <_printf_i+0x16a>
 80039d0:	2301      	movs	r3, #1
 80039d2:	4632      	mov	r2, r6
 80039d4:	4649      	mov	r1, r9
 80039d6:	4640      	mov	r0, r8
 80039d8:	47d0      	blx	sl
 80039da:	3001      	adds	r0, #1
 80039dc:	d09b      	beq.n	8003916 <_printf_i+0x166>
 80039de:	3501      	adds	r5, #1
 80039e0:	68e3      	ldr	r3, [r4, #12]
 80039e2:	9903      	ldr	r1, [sp, #12]
 80039e4:	1a5b      	subs	r3, r3, r1
 80039e6:	42ab      	cmp	r3, r5
 80039e8:	dcf2      	bgt.n	80039d0 <_printf_i+0x220>
 80039ea:	e7eb      	b.n	80039c4 <_printf_i+0x214>
 80039ec:	2500      	movs	r5, #0
 80039ee:	f104 0619 	add.w	r6, r4, #25
 80039f2:	e7f5      	b.n	80039e0 <_printf_i+0x230>
 80039f4:	08003caf 	.word	0x08003caf
 80039f8:	08003cc0 	.word	0x08003cc0

080039fc <memchr>:
 80039fc:	4603      	mov	r3, r0
 80039fe:	b510      	push	{r4, lr}
 8003a00:	b2c9      	uxtb	r1, r1
 8003a02:	4402      	add	r2, r0
 8003a04:	4293      	cmp	r3, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	d101      	bne.n	8003a0e <memchr+0x12>
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	e003      	b.n	8003a16 <memchr+0x1a>
 8003a0e:	7804      	ldrb	r4, [r0, #0]
 8003a10:	3301      	adds	r3, #1
 8003a12:	428c      	cmp	r4, r1
 8003a14:	d1f6      	bne.n	8003a04 <memchr+0x8>
 8003a16:	bd10      	pop	{r4, pc}

08003a18 <memcpy>:
 8003a18:	440a      	add	r2, r1
 8003a1a:	4291      	cmp	r1, r2
 8003a1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a20:	d100      	bne.n	8003a24 <memcpy+0xc>
 8003a22:	4770      	bx	lr
 8003a24:	b510      	push	{r4, lr}
 8003a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a2a:	4291      	cmp	r1, r2
 8003a2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a30:	d1f9      	bne.n	8003a26 <memcpy+0xe>
 8003a32:	bd10      	pop	{r4, pc}

08003a34 <memmove>:
 8003a34:	4288      	cmp	r0, r1
 8003a36:	b510      	push	{r4, lr}
 8003a38:	eb01 0402 	add.w	r4, r1, r2
 8003a3c:	d902      	bls.n	8003a44 <memmove+0x10>
 8003a3e:	4284      	cmp	r4, r0
 8003a40:	4623      	mov	r3, r4
 8003a42:	d807      	bhi.n	8003a54 <memmove+0x20>
 8003a44:	1e43      	subs	r3, r0, #1
 8003a46:	42a1      	cmp	r1, r4
 8003a48:	d008      	beq.n	8003a5c <memmove+0x28>
 8003a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a52:	e7f8      	b.n	8003a46 <memmove+0x12>
 8003a54:	4601      	mov	r1, r0
 8003a56:	4402      	add	r2, r0
 8003a58:	428a      	cmp	r2, r1
 8003a5a:	d100      	bne.n	8003a5e <memmove+0x2a>
 8003a5c:	bd10      	pop	{r4, pc}
 8003a5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a66:	e7f7      	b.n	8003a58 <memmove+0x24>

08003a68 <_free_r>:
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	4605      	mov	r5, r0
 8003a6c:	2900      	cmp	r1, #0
 8003a6e:	d043      	beq.n	8003af8 <_free_r+0x90>
 8003a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a74:	1f0c      	subs	r4, r1, #4
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	bfb8      	it	lt
 8003a7a:	18e4      	addlt	r4, r4, r3
 8003a7c:	f000 f8d0 	bl	8003c20 <__malloc_lock>
 8003a80:	4a1e      	ldr	r2, [pc, #120]	; (8003afc <_free_r+0x94>)
 8003a82:	6813      	ldr	r3, [r2, #0]
 8003a84:	4610      	mov	r0, r2
 8003a86:	b933      	cbnz	r3, 8003a96 <_free_r+0x2e>
 8003a88:	6063      	str	r3, [r4, #4]
 8003a8a:	6014      	str	r4, [r2, #0]
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a92:	f000 b8cb 	b.w	8003c2c <__malloc_unlock>
 8003a96:	42a3      	cmp	r3, r4
 8003a98:	d90a      	bls.n	8003ab0 <_free_r+0x48>
 8003a9a:	6821      	ldr	r1, [r4, #0]
 8003a9c:	1862      	adds	r2, r4, r1
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	bf01      	itttt	eq
 8003aa2:	681a      	ldreq	r2, [r3, #0]
 8003aa4:	685b      	ldreq	r3, [r3, #4]
 8003aa6:	1852      	addeq	r2, r2, r1
 8003aa8:	6022      	streq	r2, [r4, #0]
 8003aaa:	6063      	str	r3, [r4, #4]
 8003aac:	6004      	str	r4, [r0, #0]
 8003aae:	e7ed      	b.n	8003a8c <_free_r+0x24>
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	b10b      	cbz	r3, 8003aba <_free_r+0x52>
 8003ab6:	42a3      	cmp	r3, r4
 8003ab8:	d9fa      	bls.n	8003ab0 <_free_r+0x48>
 8003aba:	6811      	ldr	r1, [r2, #0]
 8003abc:	1850      	adds	r0, r2, r1
 8003abe:	42a0      	cmp	r0, r4
 8003ac0:	d10b      	bne.n	8003ada <_free_r+0x72>
 8003ac2:	6820      	ldr	r0, [r4, #0]
 8003ac4:	4401      	add	r1, r0
 8003ac6:	1850      	adds	r0, r2, r1
 8003ac8:	4283      	cmp	r3, r0
 8003aca:	6011      	str	r1, [r2, #0]
 8003acc:	d1de      	bne.n	8003a8c <_free_r+0x24>
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4401      	add	r1, r0
 8003ad4:	6011      	str	r1, [r2, #0]
 8003ad6:	6053      	str	r3, [r2, #4]
 8003ad8:	e7d8      	b.n	8003a8c <_free_r+0x24>
 8003ada:	d902      	bls.n	8003ae2 <_free_r+0x7a>
 8003adc:	230c      	movs	r3, #12
 8003ade:	602b      	str	r3, [r5, #0]
 8003ae0:	e7d4      	b.n	8003a8c <_free_r+0x24>
 8003ae2:	6820      	ldr	r0, [r4, #0]
 8003ae4:	1821      	adds	r1, r4, r0
 8003ae6:	428b      	cmp	r3, r1
 8003ae8:	bf01      	itttt	eq
 8003aea:	6819      	ldreq	r1, [r3, #0]
 8003aec:	685b      	ldreq	r3, [r3, #4]
 8003aee:	1809      	addeq	r1, r1, r0
 8003af0:	6021      	streq	r1, [r4, #0]
 8003af2:	6063      	str	r3, [r4, #4]
 8003af4:	6054      	str	r4, [r2, #4]
 8003af6:	e7c9      	b.n	8003a8c <_free_r+0x24>
 8003af8:	bd38      	pop	{r3, r4, r5, pc}
 8003afa:	bf00      	nop
 8003afc:	20000178 	.word	0x20000178

08003b00 <_malloc_r>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	1ccd      	adds	r5, r1, #3
 8003b04:	f025 0503 	bic.w	r5, r5, #3
 8003b08:	3508      	adds	r5, #8
 8003b0a:	2d0c      	cmp	r5, #12
 8003b0c:	bf38      	it	cc
 8003b0e:	250c      	movcc	r5, #12
 8003b10:	2d00      	cmp	r5, #0
 8003b12:	4606      	mov	r6, r0
 8003b14:	db01      	blt.n	8003b1a <_malloc_r+0x1a>
 8003b16:	42a9      	cmp	r1, r5
 8003b18:	d903      	bls.n	8003b22 <_malloc_r+0x22>
 8003b1a:	230c      	movs	r3, #12
 8003b1c:	6033      	str	r3, [r6, #0]
 8003b1e:	2000      	movs	r0, #0
 8003b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b22:	f000 f87d 	bl	8003c20 <__malloc_lock>
 8003b26:	4921      	ldr	r1, [pc, #132]	; (8003bac <_malloc_r+0xac>)
 8003b28:	680a      	ldr	r2, [r1, #0]
 8003b2a:	4614      	mov	r4, r2
 8003b2c:	b99c      	cbnz	r4, 8003b56 <_malloc_r+0x56>
 8003b2e:	4f20      	ldr	r7, [pc, #128]	; (8003bb0 <_malloc_r+0xb0>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	b923      	cbnz	r3, 8003b3e <_malloc_r+0x3e>
 8003b34:	4621      	mov	r1, r4
 8003b36:	4630      	mov	r0, r6
 8003b38:	f000 f862 	bl	8003c00 <_sbrk_r>
 8003b3c:	6038      	str	r0, [r7, #0]
 8003b3e:	4629      	mov	r1, r5
 8003b40:	4630      	mov	r0, r6
 8003b42:	f000 f85d 	bl	8003c00 <_sbrk_r>
 8003b46:	1c43      	adds	r3, r0, #1
 8003b48:	d123      	bne.n	8003b92 <_malloc_r+0x92>
 8003b4a:	230c      	movs	r3, #12
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	6033      	str	r3, [r6, #0]
 8003b50:	f000 f86c 	bl	8003c2c <__malloc_unlock>
 8003b54:	e7e3      	b.n	8003b1e <_malloc_r+0x1e>
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	1b5b      	subs	r3, r3, r5
 8003b5a:	d417      	bmi.n	8003b8c <_malloc_r+0x8c>
 8003b5c:	2b0b      	cmp	r3, #11
 8003b5e:	d903      	bls.n	8003b68 <_malloc_r+0x68>
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	441c      	add	r4, r3
 8003b64:	6025      	str	r5, [r4, #0]
 8003b66:	e004      	b.n	8003b72 <_malloc_r+0x72>
 8003b68:	6863      	ldr	r3, [r4, #4]
 8003b6a:	42a2      	cmp	r2, r4
 8003b6c:	bf0c      	ite	eq
 8003b6e:	600b      	streq	r3, [r1, #0]
 8003b70:	6053      	strne	r3, [r2, #4]
 8003b72:	4630      	mov	r0, r6
 8003b74:	f000 f85a 	bl	8003c2c <__malloc_unlock>
 8003b78:	f104 000b 	add.w	r0, r4, #11
 8003b7c:	1d23      	adds	r3, r4, #4
 8003b7e:	f020 0007 	bic.w	r0, r0, #7
 8003b82:	1ac2      	subs	r2, r0, r3
 8003b84:	d0cc      	beq.n	8003b20 <_malloc_r+0x20>
 8003b86:	1a1b      	subs	r3, r3, r0
 8003b88:	50a3      	str	r3, [r4, r2]
 8003b8a:	e7c9      	b.n	8003b20 <_malloc_r+0x20>
 8003b8c:	4622      	mov	r2, r4
 8003b8e:	6864      	ldr	r4, [r4, #4]
 8003b90:	e7cc      	b.n	8003b2c <_malloc_r+0x2c>
 8003b92:	1cc4      	adds	r4, r0, #3
 8003b94:	f024 0403 	bic.w	r4, r4, #3
 8003b98:	42a0      	cmp	r0, r4
 8003b9a:	d0e3      	beq.n	8003b64 <_malloc_r+0x64>
 8003b9c:	1a21      	subs	r1, r4, r0
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	f000 f82e 	bl	8003c00 <_sbrk_r>
 8003ba4:	3001      	adds	r0, #1
 8003ba6:	d1dd      	bne.n	8003b64 <_malloc_r+0x64>
 8003ba8:	e7cf      	b.n	8003b4a <_malloc_r+0x4a>
 8003baa:	bf00      	nop
 8003bac:	20000178 	.word	0x20000178
 8003bb0:	2000017c 	.word	0x2000017c

08003bb4 <_realloc_r>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	4607      	mov	r7, r0
 8003bb8:	4614      	mov	r4, r2
 8003bba:	460e      	mov	r6, r1
 8003bbc:	b921      	cbnz	r1, 8003bc8 <_realloc_r+0x14>
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003bc4:	f7ff bf9c 	b.w	8003b00 <_malloc_r>
 8003bc8:	b922      	cbnz	r2, 8003bd4 <_realloc_r+0x20>
 8003bca:	f7ff ff4d 	bl	8003a68 <_free_r>
 8003bce:	4625      	mov	r5, r4
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bd4:	f000 f830 	bl	8003c38 <_malloc_usable_size_r>
 8003bd8:	42a0      	cmp	r0, r4
 8003bda:	d20f      	bcs.n	8003bfc <_realloc_r+0x48>
 8003bdc:	4621      	mov	r1, r4
 8003bde:	4638      	mov	r0, r7
 8003be0:	f7ff ff8e 	bl	8003b00 <_malloc_r>
 8003be4:	4605      	mov	r5, r0
 8003be6:	2800      	cmp	r0, #0
 8003be8:	d0f2      	beq.n	8003bd0 <_realloc_r+0x1c>
 8003bea:	4631      	mov	r1, r6
 8003bec:	4622      	mov	r2, r4
 8003bee:	f7ff ff13 	bl	8003a18 <memcpy>
 8003bf2:	4631      	mov	r1, r6
 8003bf4:	4638      	mov	r0, r7
 8003bf6:	f7ff ff37 	bl	8003a68 <_free_r>
 8003bfa:	e7e9      	b.n	8003bd0 <_realloc_r+0x1c>
 8003bfc:	4635      	mov	r5, r6
 8003bfe:	e7e7      	b.n	8003bd0 <_realloc_r+0x1c>

08003c00 <_sbrk_r>:
 8003c00:	b538      	push	{r3, r4, r5, lr}
 8003c02:	2300      	movs	r3, #0
 8003c04:	4d05      	ldr	r5, [pc, #20]	; (8003c1c <_sbrk_r+0x1c>)
 8003c06:	4604      	mov	r4, r0
 8003c08:	4608      	mov	r0, r1
 8003c0a:	602b      	str	r3, [r5, #0]
 8003c0c:	f7fd fb96 	bl	800133c <_sbrk>
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	d102      	bne.n	8003c1a <_sbrk_r+0x1a>
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	b103      	cbz	r3, 8003c1a <_sbrk_r+0x1a>
 8003c18:	6023      	str	r3, [r4, #0]
 8003c1a:	bd38      	pop	{r3, r4, r5, pc}
 8003c1c:	20000294 	.word	0x20000294

08003c20 <__malloc_lock>:
 8003c20:	4801      	ldr	r0, [pc, #4]	; (8003c28 <__malloc_lock+0x8>)
 8003c22:	f000 b811 	b.w	8003c48 <__retarget_lock_acquire_recursive>
 8003c26:	bf00      	nop
 8003c28:	2000029c 	.word	0x2000029c

08003c2c <__malloc_unlock>:
 8003c2c:	4801      	ldr	r0, [pc, #4]	; (8003c34 <__malloc_unlock+0x8>)
 8003c2e:	f000 b80c 	b.w	8003c4a <__retarget_lock_release_recursive>
 8003c32:	bf00      	nop
 8003c34:	2000029c 	.word	0x2000029c

08003c38 <_malloc_usable_size_r>:
 8003c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c3c:	1f18      	subs	r0, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bfbc      	itt	lt
 8003c42:	580b      	ldrlt	r3, [r1, r0]
 8003c44:	18c0      	addlt	r0, r0, r3
 8003c46:	4770      	bx	lr

08003c48 <__retarget_lock_acquire_recursive>:
 8003c48:	4770      	bx	lr

08003c4a <__retarget_lock_release_recursive>:
 8003c4a:	4770      	bx	lr

08003c4c <_init>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	bf00      	nop
 8003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c52:	bc08      	pop	{r3}
 8003c54:	469e      	mov	lr, r3
 8003c56:	4770      	bx	lr

08003c58 <_fini>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	bf00      	nop
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr
